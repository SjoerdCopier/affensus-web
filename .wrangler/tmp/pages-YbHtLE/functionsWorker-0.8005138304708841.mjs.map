{
  "version": 3,
  "sources": ["../bundle-4BsSZr/checked-fetch.js", "../../../functions/api/auth/shared/email-notifications.ts", "../../../functions/api/auth/facebook/callback.ts", "../../../functions/api/auth/github/callback.ts", "../../../functions/api/auth/google/callback.ts", "../../../functions/api/auth/facebook/index.ts", "../../../functions/api/auth/github/index.ts", "../../../functions/api/auth/google/index.ts", "../../../functions/api/tools/affiliate-link-checker.ts", "../../../functions/api/tools/affiliate-network-uptime.ts", "functionsRoutes-0.7046503546124637.mjs", "../bundle-4BsSZr/middleware-loader.entry.ts", "../bundle-4BsSZr/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/pages-template-worker.ts", "../../../node_modules/path-to-regexp/src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "/Users/sjoerdcopier/PhpstormProjects/affensus_web/.wrangler/tmp/pages-YbHtLE/functionsWorker-0.8005138304708841.mjs",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "async function sendNewUserNotification(userEmail: string, loginMethod: string, resendApiKey: string) {\n  const response = await fetch('https://api.resend.com/emails', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${resendApiKey}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      from: 'noreply@email.morsexpress.com',\n      to: 's.copier@gmail.com',\n      subject: '\uD83C\uDF89 New User Registered - MorseXpress',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <div style=\"text-align: center; margin-bottom: 30px;\">\n            <h1 style=\"color: #1f2937; margin-bottom: 10px;\">\uD83C\uDF89 MorseXpress</h1>\n            <h2 style=\"color: #4b5563; font-weight: normal; margin-top: 0;\">New User Registration</h2>\n          </div>\n          \n          <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 8px; margin-bottom: 20px;\">\n            <h3 style=\"color: #1f2937; margin-top: 0;\">User Details:</h3>\n            <p style=\"color: #374151; margin: 8px 0;\"><strong>Email:</strong> ${userEmail}</p>\n            <p style=\"color: #374151; margin: 8px 0;\"><strong>Login Method:</strong> ${loginMethod}</p>\n            <p style=\"color: #374151; margin: 8px 0;\"><strong>Registration Time:</strong> ${new Date().toISOString()}</p>\n          </div>\n          \n          <p style=\"color: #374151; font-size: 16px; line-height: 1.5;\">\n            A new user has successfully registered for MorseXpress! \uD83D\uDE80\n          </p>\n          \n          <hr style=\"border: none; border-top: 1px solid #e5e7eb; margin: 30px 0;\">\n          \n          <p style=\"color: #9ca3af; font-size: 12px; text-align: center;\">\n            This is an automated notification from MorseXpress.\n          </p>\n        </div>\n      `,\n      text: `\nNew User Registration - MorseXpress\n\nUser Details:\n- Email: ${userEmail}\n- Login Method: ${loginMethod}\n- Registration Time: ${new Date().toISOString()}\n\nA new user has successfully registered for MorseXpress!\n\nThis is an automated notification from MorseXpress.\n      `.trim()\n    })\n  })\n\n  if (!response.ok) {\n    const errorText = await response.text()\n    console.error('Failed to send new user notification:', errorText)\n    // Don't throw error - we don't want to break user registration if email fails\n    return false\n  }\n\n  const result = await response.json()\n  console.log('New user notification sent successfully:', result)\n  return true\n}\n\nexport { sendNewUserNotification } ", "interface FacebookUserInfo {\n  id: string\n  email: string\n  name: string\n}\n\nfunction parseCookies(cookieHeader: string | null): Record<string, string> {\n  const cookies: Record<string, string> = {}\n  if (!cookieHeader) return cookies\n  \n  cookieHeader.split(';').forEach(cookie => {\n    const parts = cookie.trim().split('=')\n    if (parts.length === 2) {\n      cookies[parts[0]] = parts[1]\n    }\n  })\n  return cookies\n}\n\nasync function signJwt(payload: any, secret: string, expiresIn: number): Promise<string> {\n  const header = { alg: 'HS256', typ: 'JWT' }\n  const now = Math.floor(Date.now() / 1000)\n  const exp = now + expiresIn\n  \n  const jwtPayload = { ...payload, iat: now, exp }\n  \n  const encoder = new TextEncoder()\n  const key = await crypto.subtle.importKey(\n    'raw',\n    encoder.encode(secret),\n    { name: 'HMAC', hash: 'SHA-256' },\n    false,\n    ['sign']\n  )\n  \n  const headerB64 = btoa(JSON.stringify(header)).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n  const payloadB64 = btoa(JSON.stringify(jwtPayload)).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n  \n  const signatureArrayBuffer = await crypto.subtle.sign(\n    'HMAC',\n    key,\n    encoder.encode(`${headerB64}.${payloadB64}`)\n  )\n  \n  const signatureB64 = btoa(String.fromCharCode(...new Uint8Array(signatureArrayBuffer)))\n    .replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n  \n  return `${headerB64}.${payloadB64}.${signatureB64}`\n}\n\nexport async function onRequestGet(context: any) {\n  try {\n    const { request, env } = context\n    const url = new URL(request.url)\n    const code = url.searchParams.get('code')\n    const state = url.searchParams.get('state')\n    const error = url.searchParams.get('error')\n\n    const FACEBOOK_APP_ID = env.FACEBOOK_APP_ID\n    const FACEBOOK_APP_SECRET = env.FACEBOOK_APP_SECRET\n    const FACEBOOK_REDIRECT_URI = `${env.SITE_URL || 'http://localhost:3000'}/api/auth/facebook/callback`\n\n    // Check for OAuth errors\n    if (error) {\n      console.error('Facebook OAuth error:', error)\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=oauth_denied` }\n      })\n    }\n\n    // Verify required parameters\n    if (!code || !state) {\n      console.error('Missing code or state parameter')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=invalid_request` }\n      })\n    }\n\n    // Verify state parameter for CSRF protection\n    const cookies = parseCookies(request.headers.get('Cookie'))\n    const storedState = cookies['oauth_state']\n    if (!storedState || state !== storedState) {\n      console.error('Invalid state parameter')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=invalid_state` }\n      })\n    }\n\n    // Check if OAuth is configured\n    if (!FACEBOOK_APP_ID || !FACEBOOK_APP_SECRET) {\n      console.error('Facebook OAuth not configured')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=oauth_not_configured` }\n      })\n    }\n\n    // Exchange code for access token\n    const tokenResponse = await fetch(`https://graph.facebook.com/v18.0/oauth/access_token?` +\n      `client_id=${FACEBOOK_APP_ID}&` +\n      `client_secret=${FACEBOOK_APP_SECRET}&` +\n      `code=${code}&` +\n      `redirect_uri=${encodeURIComponent(FACEBOOK_REDIRECT_URI)}`)\n\n    if (!tokenResponse.ok) {\n      console.error('Failed to exchange code for token:', await tokenResponse.text())\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=token_exchange_failed` }\n      })\n    }\n\n    const tokenData = await tokenResponse.json()\n    const accessToken = tokenData.access_token\n\n    // Get user info from Facebook\n    const userInfoResponse = await fetch(\n      `https://graph.facebook.com/v18.0/me?fields=id,name,email&access_token=${accessToken}`\n    )\n\n    if (!userInfoResponse.ok) {\n      console.error('Failed to get user info from Facebook')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=user_info_failed` }\n      })\n    }\n\n    const userInfo: FacebookUserInfo = await userInfoResponse.json()\n\n    // Verify email is provided\n    if (!userInfo.email) {\n      console.error('Facebook account email not provided')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=email_not_provided` }\n      })\n    }\n\n    // Get database from environment\n    const db = env.DB\n    if (!db) {\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=database_not_available` }\n      })\n    }\n\n    // Create or update user with Facebook login method\n    const createUser = async (db: any, email: string, loginMethod: string = 'facebook') => {\n      const stmt = db.prepare(`\n        INSERT OR IGNORE INTO users (email, preferred_login_method, created_at, updated_at)\n        VALUES (?, ?, datetime('now'), datetime('now'))\n      `)\n      const result = await stmt.bind(email, loginMethod).run()\n      \n      // Get the user (either just created or existing)\n      const user = await db.prepare('SELECT * FROM users WHERE email = ?').bind(email).first()\n      \n      // Check if this is a new user by checking if the insert actually happened\n      // SQLite changes will be > 0 if a row was inserted\n      const isNewUser = result.changes > 0\n      \n      return { user, isNewUser }\n    }\n\n    const updatePreferredLoginMethod = async (db: any, email: string, method: string) => {\n      await db.prepare(`\n        UPDATE users \n        SET preferred_login_method = ?, updated_at = datetime('now')\n        WHERE email = ?\n      `).bind(method, email).run()\n    }\n\n    // Create or update user\n    const { user, isNewUser } = await createUser(db, userInfo.email.toLowerCase(), 'facebook')\n\n    // Update user's preferred login method\n    await updatePreferredLoginMethod(db, userInfo.email.toLowerCase(), 'facebook')\n\n    // Send email notification for new users\n    if (isNewUser) {\n      const resendApiKey = env.RESEND_API_KEY\n      if (resendApiKey) {\n        try {\n          const { sendNewUserNotification } = await import('../shared/email-notifications')\n          await sendNewUserNotification(user.email, 'facebook', resendApiKey)\n        } catch (error) {\n          console.error('Failed to send new user notification:', error)\n          // Continue with normal flow even if email fails\n        }\n      } else {\n        console.log('New user registered but RESEND_API_KEY not configured - email notification skipped')\n      }\n    }\n\n    // Generate JWT token\n    const jwtSecret = env.JWT_SECRET\n    if (!jwtSecret) {\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=jwt_not_configured` }\n      })\n    }\n\n    const jwtToken = await signJwt(\n      {\n        sub: user.id.toString(),\n        email: user.email,\n        login_method: 'facebook',\n      },\n      jwtSecret,\n      7 * 24 * 60 * 60 // 7 days\n    )\n\n    // Create HTML response with localStorage and redirect\n    const html = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>Redirecting...</title>\n      </head>\n      <body>\n        <script>\n          localStorage.setItem('lastLoginMethod', 'facebook');\n          localStorage.setItem('lastLoginTime', new Date().toISOString());\n          window.location.href = '${env.SITE_URL || 'http://localhost:3000'}/auth';\n        </script>\n        <p>Redirecting...</p>\n      </body>\n      </html>\n    `\n    \n    // Set cookie with appropriate security settings\n    const isProduction = env.SITE_URL?.startsWith('https://') || false\n    const secureFlag = isProduction ? 'Secure; ' : ''\n    \n    // Set cookies using Headers object for proper multiple cookie handling\n    const headers = new Headers({\n      'Content-Type': 'text/html'\n    })\n    \n    // Set auth token cookie\n    headers.append('Set-Cookie', `auth-token=${jwtToken}; HttpOnly; ${secureFlag}SameSite=Lax; Max-Age=${7 * 24 * 60 * 60}; Path=/`)\n    \n    // Clear oauth_state cookie\n    headers.append('Set-Cookie', `oauth_state=; HttpOnly; ${secureFlag}SameSite=Lax; Max-Age=0; Path=/`)\n\n    return new Response(html, {\n      status: 200,\n      headers,\n    })\n\n  } catch (error) {\n    console.error('Error processing Facebook OAuth callback:', error)\n    return new Response(null, {\n      status: 302,\n      headers: { 'Location': `${context.env.SITE_URL || 'http://localhost:3000'}/auth?error=internal_error` }\n    })\n  }\n} ", "interface GitHubUserInfo {\n  id: number\n  login: string\n  email: string\n  name: string\n  avatar_url: string\n}\n\ninterface GitHubEmailInfo {\n  email: string\n  primary: boolean\n  verified: boolean\n  visibility: string\n}\n\nfunction parseCookies(cookieHeader: string | null): Record<string, string> {\n  const cookies: Record<string, string> = {}\n  if (!cookieHeader) return cookies\n  \n  cookieHeader.split(';').forEach(cookie => {\n    const parts = cookie.trim().split('=')\n    if (parts.length === 2) {\n      cookies[parts[0]] = parts[1]\n    }\n  })\n  return cookies\n}\n\nasync function signJwt(payload: any, secret: string, expiresIn: number): Promise<string> {\n  const header = { alg: 'HS256', typ: 'JWT' }\n  const now = Math.floor(Date.now() / 1000)\n  const exp = now + expiresIn\n  \n  const jwtPayload = { ...payload, iat: now, exp }\n  \n  const encoder = new TextEncoder()\n  const key = await crypto.subtle.importKey(\n    'raw',\n    encoder.encode(secret),\n    { name: 'HMAC', hash: 'SHA-256' },\n    false,\n    ['sign']\n  )\n  \n  const headerB64 = btoa(JSON.stringify(header)).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n  const payloadB64 = btoa(JSON.stringify(jwtPayload)).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n  \n  const signatureArrayBuffer = await crypto.subtle.sign(\n    'HMAC',\n    key,\n    encoder.encode(`${headerB64}.${payloadB64}`)\n  )\n  \n  const signatureB64 = btoa(String.fromCharCode(...new Uint8Array(signatureArrayBuffer)))\n    .replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n  \n  return `${headerB64}.${payloadB64}.${signatureB64}`\n}\n\nasync function processPendingPayments(db: any, email: string, userId: number, stripeSecretKey?: string) {\n  try {\n    // Check for pending payments for this email\n    const pendingPayments = await db.prepare(`\n      SELECT * FROM pending_payments \n      WHERE email = ? AND processed = 0\n    `).bind(email).all()\n\n    if (pendingPayments.results && pendingPayments.results.length > 0) {\n      console.log(`Found ${pendingPayments.results.length} pending payment(s) for ${email}`)\n      \n      for (const payment of pendingPayments.results) {\n        try {\n          if (stripeSecretKey) {\n            // Get the session details from Stripe\n            const sessionResponse = await fetch(`https://api.stripe.com/v1/checkout/sessions/${payment.session_id}`, {\n              headers: {\n                'Authorization': `Bearer ${stripeSecretKey}`,\n              },\n            })\n\n            if (sessionResponse.ok) {\n              const session = await sessionResponse.json()\n              \n              // Create Stripe customer for this user\n              const customerResponse = await fetch('https://api.stripe.com/v1/customers', {\n                method: 'POST',\n                headers: {\n                  'Authorization': `Bearer ${stripeSecretKey}`,\n                  'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: new URLSearchParams({\n                  email: email,\n                  name: payment.customer_name || 'Customer',\n                  'metadata[user_id]': userId.toString(),\n                  'metadata[session_id]': payment.session_id,\n                }),\n              })\n\n              if (customerResponse.ok) {\n                const customer = await customerResponse.json()\n                \n                // Update user with Stripe customer ID\n                await db.prepare(`\n                  UPDATE users \n                  SET stripe_customer_id = ?, updated_at = datetime('now')\n                  WHERE id = ?\n                `).bind(customer.id, userId).run()\n                \n                // Import the functions from webhook (we'll need to refactor this)\n                // For now, let's create a simple subscription update\n                let subscriptionStatus = 'free'\n                if (payment.amount_total === 1999) subscriptionStatus = 'basic'\n                else if (payment.amount_total === 3999) subscriptionStatus = 'active'\n                else if (payment.amount_total === 7900) subscriptionStatus = 'lifetime'\n                \n                await db.prepare(`\n                  UPDATE users \n                  SET \n                    subscription_status = ?, \n                    subscription_expires_at = datetime('now', '+1 year'),\n                    updated_at = datetime('now')\n                  WHERE id = ?\n                `).bind(subscriptionStatus, userId).run()\n                \n                console.log(`Processed pending payment for user ${userId}, customer ${customer.id}`)\n              }\n            }\n          }\n          \n          // Mark payment as processed\n          await db.prepare(`\n            UPDATE pending_payments \n            SET processed = 1 \n            WHERE id = ?\n          `).bind(payment.id).run()\n          \n        } catch (error) {\n          console.error('Error processing pending payment:', error)\n        }\n      }\n    }\n  } catch (error) {\n    console.error('Error checking for pending payments:', error)\n  }\n}\n\nexport async function onRequestGet(context: any) {\n  try {\n    const { request, env } = context\n    const url = new URL(request.url)\n    const code = url.searchParams.get('code')\n    const state = url.searchParams.get('state')\n    const error = url.searchParams.get('error')\n\n    // Handle OAuth errors\n    if (error) {\n      console.error('GitHub OAuth error:', error)\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=oauth_denied` }\n      })\n    }\n\n    if (!code || !state) {\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=invalid_request` }\n      })\n    }\n\n    // Verify state parameter (CSRF protection)\n    const cookies = parseCookies(request.headers.get('Cookie'))\n    const storedState = cookies['oauth_state']\n    \n    if (!storedState || storedState !== state) {\n      console.error('OAuth state verification failed')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=invalid_state` }\n      })\n    }\n\n    const GITHUB_CLIENT_ID = env.GITHUB_CLIENT_ID\n    const GITHUB_CLIENT_SECRET = env.GITHUB_CLIENT_SECRET\n\n    if (!GITHUB_CLIENT_ID || !GITHUB_CLIENT_SECRET) {\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=oauth_not_configured` }\n      })\n    }\n\n    // Exchange code for access token\n    const tokenResponse = await fetch('https://github.com/login/oauth/access_token', {\n      method: 'POST',\n      headers: { \n        'Accept': 'application/json',\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        client_id: GITHUB_CLIENT_ID,\n        client_secret: GITHUB_CLIENT_SECRET,\n        code: code,\n      }),\n    })\n\n    if (!tokenResponse.ok) {\n      console.error('Failed to exchange code for token:', await tokenResponse.text())\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=token_exchange_failed` }\n      })\n    }\n\n    const tokenData = await tokenResponse.json()\n    const accessToken = tokenData.access_token\n\n    if (!accessToken) {\n      console.error('No access token received from GitHub')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=token_exchange_failed` }\n      })\n    }\n\n    // Get user info from GitHub\n    const userInfoResponse = await fetch('https://api.github.com/user', {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Accept': 'application/vnd.github.v3+json',\n        'User-Agent': 'MorseXpress-App'\n      }\n    })\n\n    if (!userInfoResponse.ok) {\n      console.error('Failed to get user info from GitHub')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=user_info_failed` }\n      })\n    }\n\n    const userInfo: GitHubUserInfo = await userInfoResponse.json()\n\n    // If user's email is not public, get it from the emails endpoint\n    let userEmail: string | undefined = userInfo.email\n    if (!userEmail) {\n      const emailsResponse = await fetch('https://api.github.com/user/emails', {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Accept': 'application/vnd.github.v3+json',\n          'User-Agent': 'MorseXpress-App'\n        }\n      })\n\n      if (emailsResponse.ok) {\n        const emails: GitHubEmailInfo[] = await emailsResponse.json()\n        const primaryEmail = emails.find(e => e.primary && e.verified)\n        userEmail = primaryEmail?.email || emails.find(e => e.verified)?.email\n      }\n    }\n\n    // Verify email is available\n    if (!userEmail) {\n      console.error('GitHub account email not available')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=email_not_provided` }\n      })\n    }\n\n    // Get database from environment\n    const db = env.DB\n    if (!db) {\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=database_not_available` }\n      })\n    }\n\n    // Create or update user with GitHub login method  \n    const createUser = async (db: any, email: string, loginMethod: string = 'github') => {\n      const stmt = db.prepare(`\n        INSERT OR IGNORE INTO users (email, preferred_login_method, created_at, updated_at)\n        VALUES (?, ?, datetime('now'), datetime('now'))\n      `)\n      const result = await stmt.bind(email, loginMethod).run()\n      \n      // Get the user (either just created or existing)\n      const user = await db.prepare('SELECT * FROM users WHERE email = ?').bind(email).first()\n      \n      // Check if this is a new user by checking if the insert actually happened\n      // SQLite changes will be > 0 if a row was inserted\n      const isNewUser = result.changes > 0\n      \n      return { user, isNewUser }\n    }\n\n    const updatePreferredLoginMethod = async (db: any, email: string, method: string) => {\n      await db.prepare(`\n        UPDATE users \n        SET preferred_login_method = ?, updated_at = datetime('now')\n        WHERE email = ?\n      `).bind(method, email).run()\n    }\n\n    // Create or update user\n    const { user, isNewUser } = await createUser(db, userEmail!.toLowerCase(), 'github')\n\n    // Update user's preferred login method\n    await updatePreferredLoginMethod(db, userEmail!.toLowerCase(), 'github')\n\n    // Check for pending payments after user creation/update\n    await processPendingPayments(db, userEmail!.toLowerCase(), user.id, env.STRIPE_SECRET_KEY)\n\n    // Send email notification for new users\n    if (isNewUser) {\n      const resendApiKey = env.RESEND_API_KEY\n      if (resendApiKey) {\n        try {\n          const { sendNewUserNotification } = await import('../shared/email-notifications')\n          await sendNewUserNotification(user.email, 'github', resendApiKey)\n        } catch (error) {\n          console.error('Failed to send new user notification:', error)\n          // Continue with normal flow even if email fails\n        }\n      } else {\n        console.log('New user registered but RESEND_API_KEY not configured - email notification skipped')\n      }\n    }\n\n    // Generate JWT token\n    const jwtSecret = env.JWT_SECRET\n    if (!jwtSecret) {\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=jwt_not_configured` }\n      })\n    }\n\n    const jwtToken = await signJwt(\n      {\n        sub: user.id.toString(),\n        email: user.email,\n        login_method: 'github',\n      },\n      jwtSecret,\n      7 * 24 * 60 * 60 // 7 days\n    )\n\n    // Create HTML response with localStorage and redirect\n    const html = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>Redirecting...</title>\n      </head>\n      <body>\n        <script>\n          localStorage.setItem('lastLoginMethod', 'github');\n          localStorage.setItem('lastLoginTime', new Date().toISOString());\n          window.location.href = '${env.SITE_URL || 'http://localhost:3000'}/auth';\n        </script>\n        <p>Redirecting...</p>\n      </body>\n      </html>\n    `\n    \n    // Set cookie with appropriate security settings\n    const isProduction = env.SITE_URL?.startsWith('https://') || false\n    const secureFlag = isProduction ? 'Secure; ' : ''\n    \n    // Set cookies using Headers object for proper multiple cookie handling\n    const headers = new Headers({\n      'Content-Type': 'text/html'\n    })\n    \n    // Set auth token cookie\n    headers.append('Set-Cookie', `auth-token=${jwtToken}; HttpOnly; ${secureFlag}SameSite=Lax; Max-Age=${7 * 24 * 60 * 60}; Path=/`)\n    \n    // Clear oauth_state cookie\n    headers.append('Set-Cookie', `oauth_state=; HttpOnly; ${secureFlag}SameSite=Lax; Max-Age=0; Path=/`)\n\n    return new Response(html, {\n      status: 200,\n      headers,\n    })\n\n  } catch (error) {\n    console.error('Error processing GitHub OAuth callback:', error)\n    return new Response(null, {\n      status: 302,\n      headers: { 'Location': `${context.env.SITE_URL || 'http://localhost:3000'}/auth?error=internal_error` }\n    })\n  }\n} ", "interface GoogleUserInfo {\n  id: string\n  email: string\n  name: string\n  picture: string\n  verified_email: boolean\n}\n\nfunction parseCookies(cookieHeader: string | null): Record<string, string> {\n  const cookies: Record<string, string> = {}\n  if (!cookieHeader) return cookies\n  \n  cookieHeader.split(';').forEach(cookie => {\n    const parts = cookie.trim().split('=')\n    if (parts.length === 2) {\n      cookies[parts[0]] = parts[1]\n    }\n  })\n  return cookies\n}\n\nasync function signJwt(payload: any, secret: string, expiresIn: number): Promise<string> {\n  const header = { alg: 'HS256', typ: 'JWT' }\n  const now = Math.floor(Date.now() / 1000)\n  const exp = now + expiresIn\n  \n  const jwtPayload = { ...payload, iat: now, exp }\n  \n  const encoder = new TextEncoder()\n  const key = await crypto.subtle.importKey(\n    'raw',\n    encoder.encode(secret),\n    { name: 'HMAC', hash: 'SHA-256' },\n    false,\n    ['sign']\n  )\n  \n  const headerB64 = btoa(JSON.stringify(header)).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n  const payloadB64 = btoa(JSON.stringify(jwtPayload)).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n  \n  const signatureArrayBuffer = await crypto.subtle.sign(\n    'HMAC',\n    key,\n    encoder.encode(`${headerB64}.${payloadB64}`)\n  )\n  \n  const signatureB64 = btoa(String.fromCharCode(...new Uint8Array(signatureArrayBuffer)))\n    .replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n  \n  return `${headerB64}.${payloadB64}.${signatureB64}`\n}\n\nasync function processPendingPayments(db: any, email: string, userId: number, stripeSecretKey?: string) {\n  try {\n    // Check for pending payments for this email\n    const pendingPayments = await db.prepare(`\n      SELECT * FROM pending_payments \n      WHERE email = ? AND processed = 0\n    `).bind(email).all()\n\n    if (pendingPayments.results && pendingPayments.results.length > 0) {\n      console.log(`Found ${pendingPayments.results.length} pending payment(s) for ${email}`)\n      \n      for (const payment of pendingPayments.results) {\n        try {\n          if (stripeSecretKey) {\n            // Get the session details from Stripe\n            const sessionResponse = await fetch(`https://api.stripe.com/v1/checkout/sessions/${payment.session_id}`, {\n              headers: {\n                'Authorization': `Bearer ${stripeSecretKey}`,\n              },\n            })\n\n            if (sessionResponse.ok) {\n              const session = await sessionResponse.json()\n              \n              // Create Stripe customer for this user\n              const customerResponse = await fetch('https://api.stripe.com/v1/customers', {\n                method: 'POST',\n                headers: {\n                  'Authorization': `Bearer ${stripeSecretKey}`,\n                  'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: new URLSearchParams({\n                  email: email,\n                  name: payment.customer_name || 'Customer',\n                  'metadata[user_id]': userId.toString(),\n                  'metadata[session_id]': payment.session_id,\n                }),\n              })\n\n              if (customerResponse.ok) {\n                const customer = await customerResponse.json()\n                \n                // Update user with Stripe customer ID\n                await db.prepare(`\n                  UPDATE users \n                  SET stripe_customer_id = ?, updated_at = datetime('now')\n                  WHERE id = ?\n                `).bind(customer.id, userId).run()\n                \n                // Import the functions from webhook (we'll need to refactor this)\n                // For now, let's create a simple subscription update\n                let subscriptionStatus = 'free'\n                if (payment.amount_total === 1999) subscriptionStatus = 'basic'\n                else if (payment.amount_total === 3999) subscriptionStatus = 'active'\n                else if (payment.amount_total === 7900) subscriptionStatus = 'lifetime'\n                \n                await db.prepare(`\n                  UPDATE users \n                  SET \n                    subscription_status = ?, \n                    subscription_expires_at = datetime('now', '+1 year'),\n                    updated_at = datetime('now')\n                  WHERE id = ?\n                `).bind(subscriptionStatus, userId).run()\n                \n                console.log(`Processed pending payment for user ${userId}, customer ${customer.id}`)\n              }\n            }\n          }\n          \n          // Mark payment as processed\n          await db.prepare(`\n            UPDATE pending_payments \n            SET processed = 1 \n            WHERE id = ?\n          `).bind(payment.id).run()\n          \n        } catch (error) {\n          console.error('Error processing pending payment:', error)\n        }\n      }\n    }\n  } catch (error) {\n    console.error('Error checking for pending payments:', error)\n  }\n}\n\nexport async function onRequestGet(context: any) {\n  try {\n    const { request, env } = context\n    const url = new URL(request.url)\n    const code = url.searchParams.get('code')\n    const state = url.searchParams.get('state')\n    const paidParam = url.searchParams.get('paid')\n    const sessionId = url.searchParams.get('session_id')\n    const error = url.searchParams.get('error')\n\n    const GOOGLE_CLIENT_ID = env.GOOGLE_CLIENT_ID\n    const GOOGLE_CLIENT_SECRET = env.GOOGLE_CLIENT_SECRET\n    const GOOGLE_REDIRECT_URI = `${env.SITE_URL || 'http://localhost:3000'}/api/auth/google/callback`\n\n    // Check for OAuth errors\n    if (error) {\n      console.error('Google OAuth error:', error)\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=oauth_denied` }\n      })\n    }\n\n    // Verify required parameters\n    if (!code || !state) {\n      console.error('Missing code or state parameter')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=invalid_request` }\n      })\n    }\n\n    // Verify state parameter for CSRF protection\n    const cookies = parseCookies(request.headers.get('Cookie'))\n    const storedState = cookies['oauth_state']\n    if (!storedState || state !== storedState) {\n      console.error('Invalid state parameter')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=invalid_state` }\n      })\n    }\n\n    // Check if OAuth is configured\n    if (!GOOGLE_CLIENT_ID || !GOOGLE_CLIENT_SECRET) {\n      console.error('Google OAuth not configured')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=oauth_not_configured` }\n      })\n    }\n\n    // Exchange code for access token\n    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: new URLSearchParams({\n        client_id: GOOGLE_CLIENT_ID,\n        client_secret: GOOGLE_CLIENT_SECRET,\n        code: code,\n        grant_type: 'authorization_code',\n        redirect_uri: GOOGLE_REDIRECT_URI,\n      }),\n    })\n\n    if (!tokenResponse.ok) {\n      console.error('Failed to exchange code for token:', await tokenResponse.text())\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=token_exchange_failed` }\n      })\n    }\n\n    const tokenData = await tokenResponse.json()\n    const accessToken = tokenData.access_token\n\n    // Get user info from Google\n    const userInfoResponse = await fetch(\n      `https://www.googleapis.com/oauth2/v2/userinfo?access_token=${accessToken}`\n    )\n\n    if (!userInfoResponse.ok) {\n      console.error('Failed to get user info from Google')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=user_info_failed` }\n      })\n    }\n\n    const userInfo: GoogleUserInfo = await userInfoResponse.json()\n\n    // Verify email is provided and verified\n    if (!userInfo.email || !userInfo.verified_email) {\n      console.error('Google account email not verified')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=email_not_verified` }\n      })\n    }\n\n    // Get database from environment\n    const db = env.DB\n    if (!db) {\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=database_not_available` }\n      })\n    }\n\n    // Create or update user with Google login method\n    const createUser = async (db: any, email: string, loginMethod: string = 'google') => {\n      const stmt = db.prepare(`\n        INSERT OR IGNORE INTO users (email, preferred_login_method, created_at, updated_at)\n        VALUES (?, ?, datetime('now'), datetime('now'))\n      `)\n      const result = await stmt.bind(email, loginMethod).run()\n      \n      // Get the user (either just created or existing)\n      const user = await db.prepare('SELECT * FROM users WHERE email = ?').bind(email).first()\n      \n      // Check if this is a new user by checking if the insert actually happened\n      // SQLite changes will be > 0 if a row was inserted\n      const isNewUser = result.changes > 0\n      \n      return { user, isNewUser }\n    }\n\n    const updatePreferredLoginMethod = async (db: any, email: string, method: string) => {\n      await db.prepare(`\n        UPDATE users \n        SET preferred_login_method = ?, updated_at = datetime('now')\n        WHERE email = ?\n      `).bind(method, email).run()\n    }\n\n    // If this is a paid user, try to link with Stripe customer\n    if (paidParam === 'true' && sessionId) {\n      try {\n        const stripeSecretKey = env.STRIPE_SECRET_KEY\n        if (stripeSecretKey) {\n          const sessionResponse = await fetch(`https://api.stripe.com/v1/checkout/sessions/${sessionId}`, {\n            headers: {\n              'Authorization': `Bearer ${stripeSecretKey}`,\n            },\n          })\n          \n          if (sessionResponse.ok) {\n            const session = await sessionResponse.json()\n            if (session.customer) {\n              // Update user with Stripe customer ID\n              await db.prepare(`\n                UPDATE users \n                SET stripe_customer_id = ?, updated_at = datetime('now')\n                WHERE email = ?\n              `).bind(session.customer, userInfo.email.toLowerCase()).run()\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error linking Stripe customer:', error)\n        // Continue without Stripe customer ID\n      }\n    }\n\n    // Create or update user\n    const { user, isNewUser } = await createUser(db, userInfo.email.toLowerCase(), 'google')\n\n    // Update user's preferred login method\n    await updatePreferredLoginMethod(db, userInfo.email.toLowerCase(), 'google')\n\n    // Check for pending payments after user creation/update\n    await processPendingPayments(db, userInfo.email.toLowerCase(), user.id, env.STRIPE_SECRET_KEY)\n\n    // Send email notification for new users\n    if (isNewUser) {\n      const resendApiKey = env.RESEND_API_KEY\n      if (resendApiKey) {\n        try {\n          const { sendNewUserNotification } = await import('../shared/email-notifications')\n          await sendNewUserNotification(user.email, 'google', resendApiKey)\n        } catch (error) {\n          console.error('Failed to send new user notification:', error)\n          // Continue with normal flow even if email fails\n        }\n      } else {\n        console.log('New user registered but RESEND_API_KEY not configured - email notification skipped')\n      }\n    }\n\n    // Generate JWT token\n    const jwtSecret = env.JWT_SECRET\n    if (!jwtSecret) {\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=jwt_not_configured` }\n      })\n    }\n\n    const jwtToken = await signJwt(\n      {\n        sub: user.id.toString(),\n        email: user.email,\n        login_method: 'google',\n      },\n      jwtSecret,\n      7 * 24 * 60 * 60 // 7 days\n    )\n\n    // Determine redirect URL based on whether this is a paid user\n    let redirectUrl = `${env.SITE_URL || 'http://localhost:3000'}/auth`\n    if (paidParam === 'true') {\n      redirectUrl = `${env.SITE_URL || 'http://localhost:3000'}/auth?paid=true&session_id=${sessionId}`\n    }\n\n    // Create HTML response with localStorage and redirect\n    const html = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>Redirecting...</title>\n      </head>\n      <body>\n        <script>\n          localStorage.setItem('lastLoginMethod', 'google');\n          localStorage.setItem('lastLoginTime', new Date().toISOString());\n          ${paidParam === 'true' ? `localStorage.setItem('paidUser', 'true');` : ''}\n          // Force a hard refresh to ensure auth state is updated\n          window.location.replace('${redirectUrl}');\n        </script>\n        <p>Redirecting...</p>\n      </body>\n      </html>\n    `\n    \n    // Set cookie with appropriate security settings\n    const isProduction = env.SITE_URL?.startsWith('https://') || false\n    const secureFlag = isProduction ? 'Secure; ' : ''\n    \n    // Set cookies using Headers object for proper multiple cookie handling\n    const headers = new Headers({\n      'Content-Type': 'text/html'\n    })\n    \n    // Set auth token cookie\n    headers.append('Set-Cookie', `auth-token=${jwtToken}; HttpOnly; ${secureFlag}SameSite=Lax; Max-Age=${7 * 24 * 60 * 60}; Path=/`)\n    \n    // Clear oauth_state cookie\n    headers.append('Set-Cookie', `oauth_state=; HttpOnly; ${secureFlag}SameSite=Lax; Max-Age=0; Path=/`)\n\n    return new Response(html, {\n      status: 200,\n      headers,\n    })\n\n  } catch (error) {\n    console.error('Error processing Google OAuth callback:', error)\n    return new Response(null, {\n      status: 302,\n      headers: { 'Location': `${context.env.SITE_URL || 'http://localhost:3000'}/auth?error=internal_error` }\n    })\n  }\n} ", "export async function onRequestGet(context: any) {\n  try {\n    const { request, env } = context\n    \n    const FACEBOOK_APP_ID = env.FACEBOOK_APP_ID\n    const FACEBOOK_REDIRECT_URI = `${env.SITE_URL || 'http://localhost:3000'}/api/auth/facebook/callback`\n\n    if (!FACEBOOK_APP_ID) {\n      console.error('FACEBOOK_APP_ID not configured')\n      return new Response(JSON.stringify({ error: 'Facebook OAuth not configured' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    // Generate state parameter for CSRF protection\n    const state = Math.random().toString(36).substring(2, 15)\n    \n    // Create OAuth URL\n    const authUrl = `https://www.facebook.com/v18.0/dialog/oauth?` +\n      `client_id=${FACEBOOK_APP_ID}&` +\n      `redirect_uri=${encodeURIComponent(FACEBOOK_REDIRECT_URI)}&` +\n      `response_type=code&` +\n      `scope=${encodeURIComponent('email')}&` +\n      `state=${state}`\n\n    // Create response with redirect and state cookie\n    const response = new Response(null, {\n      status: 302,\n      headers: {\n        'Location': authUrl,\n        'Set-Cookie': `oauth_state=${state}; HttpOnly; ${env.SITE_URL?.startsWith('https://') ? 'Secure; ' : ''}SameSite=Lax; Max-Age=600; Path=/`\n      }\n    })\n\n    return response\n\n  } catch (error) {\n    console.error('Error initiating Facebook OAuth:', error)\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n} ", "function generateState(): string {\n  // Generate a random state for CSRF protection\n  const array = new Uint8Array(32)\n  crypto.getRandomValues(array)\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('')\n}\n\nexport async function onRequestGet(context: any) {\n  try {\n    const { env } = context\n\n    const GITHUB_CLIENT_ID = env.GITHUB_CLIENT_ID\n    const GITHUB_REDIRECT_URI = `${env.SITE_URL || 'http://localhost:3000'}/api/auth/github/callback`\n\n    if (!GITHUB_CLIENT_ID) {\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=oauth_not_configured` }\n      })\n    }\n\n    // Generate state for CSRF protection\n    const state = generateState()\n\n    // GitHub OAuth URL\n    const authUrl = `https://github.com/login/oauth/authorize?client_id=${GITHUB_CLIENT_ID}&redirect_uri=${encodeURIComponent(GITHUB_REDIRECT_URI)}&scope=user:email&state=${state}`\n\n    return new Response(null, {\n      status: 302,\n      headers: {\n        'Location': authUrl,\n        'Set-Cookie': `oauth_state=${state}; HttpOnly; ${env.SITE_URL?.startsWith('https://') ? 'Secure; ' : ''}SameSite=Lax; Max-Age=600; Path=/`\n      }\n    })\n\n  } catch (error) {\n    console.error('Error initiating GitHub OAuth:', error)\n    return new Response(null, {\n      status: 302,\n      headers: { 'Location': `${context.env.SITE_URL || 'http://localhost:3000'}/auth?error=oauth_not_configured` }\n    })\n  }\n} ", "export async function onRequestGet(context: any) {\n  try {\n    const { request, env } = context\n    \n    const GOOGLE_CLIENT_ID = env.GOOGLE_CLIENT_ID\n    const GOOGLE_REDIRECT_URI = `${env.SITE_URL || 'http://localhost:3000'}/api/auth/google/callback`\n\n    if (!GOOGLE_CLIENT_ID) {\n      console.error('GOOGLE_CLIENT_ID not configured')\n      return new Response(JSON.stringify({ error: 'Google OAuth not configured' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    // Generate state parameter for CSRF protection\n    const state = Math.random().toString(36).substring(2, 15)\n    \n    // Create OAuth URL\n    const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?` +\n      `client_id=${GOOGLE_CLIENT_ID}&` +\n      `redirect_uri=${encodeURIComponent(GOOGLE_REDIRECT_URI)}&` +\n      `response_type=code&` +\n      `scope=${encodeURIComponent('openid email profile')}&` +\n      `state=${state}&` +\n      `access_type=offline&` +\n      `prompt=consent`\n\n    // Create response with redirect and state cookie\n    const response = new Response(null, {\n      status: 302,\n      headers: {\n        'Location': authUrl,\n        'Set-Cookie': `oauth_state=${state}; HttpOnly; ${env.SITE_URL?.startsWith('https://') ? 'Secure; ' : ''}SameSite=Lax; Max-Age=600; Path=/`\n      }\n    })\n\n    return response\n\n  } catch (error) {\n    console.error('Error initiating Google OAuth:', error)\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n} ", "export const regexPatterns = [\n    { name: 'Daisycon', pattern: /c\\/\\?si=(\\d+)|ds1\\.nl\\/c\\/.*?si=(\\d+)|lt45\\.net\\/c\\/.*?si=(\\d+)|\\/csd\\/\\?si=(\\d+)&li=(\\d+)&wi=(\\d+)|jf79\\.net\\/c\\/.*?si=(\\d+)/, matches: [], networkId: 1 },\n    { name: 'Daisycon', pattern: /c\\/\\?si=(\\d+)/, matches: [], networkId: 1 },\n    { name: 'Brandreward', pattern: /brandreward\\.com\\/?(?:\\?key=[^&]+&url=([^&]+))/, matches: [], networkId: 2 },\n    { name: 'TradeTracker', pattern: /https:\\/\\/tc\\.tradetracker\\.net\\/\\?c=(\\d+)|\\/tt\\/\\?tt=(\\d+)_/, matches: [], networkId: 3 },\n    { name: 'TradeTracker', pattern: /tt=(\\d+)_/, matches: [], networkId: 3 },\n    { name: 'TradeTracker', pattern: /\\/tt\\/index\\.php\\?tt=(\\d+)/, matches: [], networkId: 3 },\n    { name: 'TradeTracker', pattern: /c\\?c=(\\d+)/, matches: [], networkId: 3 },\n    { name: 'Tradedoubler', pattern: /tradedoubler\\.com/, matches: [], networkId: 4 },\n    { name: 'Awin', pattern: /awinmid=(\\d+)|awin1\\.com.*?(?:mid|id)=(\\d+)/, matches: [], networkId: 5 },\n    { name: 'Awin', pattern: /awin1\\.com/, matches: [], networkId: 5 },\n    { name: 'Adservice', pattern: /ADSERVICEID=(\\d+)|adservicemedia\\.dk\\/cgi-bin\\/click\\.pl\\?.*?cid=(\\d+)/, matches: [], networkId: 6 },\n    { name: 'Kwanko', pattern: /metaffiliation\\.com/, matches: [], networkId: 7 },\n    { name: 'Adrecord', pattern: /click\\.adrecord\\.com\\/?\\?c=\\d+&p=(\\d+)|click\\.adrecord\\.com\\/?\\?c=\\d+&amp;p=(\\d+)/, matches: [], networkId: 8 },\n    { name: 'Partnerize', pattern: /prf\\.hn\\/click\\/camref:(.*?)(\\/|$)|PARTNERIZEID:(.*?)|prf\\.hn\\/click\\/camref:([^/]+)/, matches: [], networkId: 9 },\n    { name: 'Partnerize', pattern: /prf\\.hn\\/click\\/camref:([^/]+)/, matches: [], networkId: 9 },\n    { name: 'Partnerize', pattern: /camref:.*?\\/pubref:/, matches: [], networkId: 9 },\n    { name: 'Partner Ads', pattern: /klikbanner\\.php\\?.*bannerid=([^&]+)/, matches: [], networkId: 10 },\n    { name: 'Adtraction', pattern: /\\/t\\/t\\?a=(\\d+)/, matches: [], networkId: 11 },\n    { name: 'Cj', pattern: /CJID=([a-zA-Z0-9]+)|cj\\.dotomi\\.com/, matches: [], networkId: 12 },\n    { name: 'Admitad', pattern: /\\.com\\/g\\/([a-zA-Z0-9]+)/, matches: [], networkId: 13 },\n    { name: 'Digidip', pattern: /digidip\\.net\\/visit\\?url=([^&]+)/, matches: [], networkId: 14 },\n    { name: 'Salestring', pattern: /salestring\\.com\\/aff_c\\?offer_id=([0-9]+)/, matches: [], networkId: 15 },\n    { name: 'Flexoffers', pattern: /trid=([0-9]+)/, matches: [], networkId: 16 },\n    { name: 'Flexoffers', pattern: /track\\.flexlinkspro\\.com/, matches: [], networkId: 16 },\n    { name: 'Impact', pattern: /impact\\.[a-zA-Z0-9-]+\\.com\\/c\\/|\\/c\\/[0-9]+\\/[0-9]+\\/([0-9]+)/, matches: [], networkId: 17 },\n    { name: 'Webgains', pattern: /wgprogramid=([0-9]+)/, matches: [], networkId: 18 },\n    { name: 'Circlewise', pattern: /trackmytarget\\.com\\/\\?a=([^&#]+)/, matches: [], networkId: 19 },\n    { name: 'Optimise', pattern: /https?:\\/\\/clk\\.omgt3\\.com\\/\\?.*PID=([0-9]+).*/, matches: [], networkId: 20 },\n    { name: 'Partnerboost', pattern: /https?:\\/\\/app\\.partnermatic\\.com\\/track\\/([a-zA-Z0-9_\\-]+)\\?/, matches: [], networkId: 21 },\n    { name: 'Involveasia', pattern: /\\/aff_m\\?offer_id=([0-9]+)/, matches: [], networkId: 22 },\n    { name: 'Chinesean', pattern: /https?:\\/\\/www\\.chinesean\\.com\\/affiliate\\/clickBanner\\.do\\?.*pId=(\\d+)/, matches: [], networkId: 23 },\n    { name: 'Rakuten', pattern: /https:\\/\\/click\\.linksynergy\\.com\\/(?:deeplink\\?|link\\?)(?:.*&)?(?:mid|offerid)=(\\d+)/, matches: [], networkId: 24 },\n    { name: 'Yieldkit', pattern: /https:\\/\\/r\\.linksprf\\.com/, matches: [], networkId: 25 },\n    { name: 'Indoleads', pattern: /\\.xyz\\/([a-zA-Z0-9]+)/, matches: [], networkId: 26 },\n    { name: 'Commissionfactory', pattern: /https:\\/\\/t\\.cfjump\\.com\\/[0-9]+\\/t\\/([0-9]+)/, matches: [], networkId: 27 },\n    { name: 'Accesstrade', pattern: /https?:\\/\\/(?:atsg\\.me|atmy\\.me|atid\\.me|accesstra\\.de)\\/([a-zA-Z0-9]+)/, matches: [], networkId: 28 },\n    { name: 'Yadore', pattern: /yadore\\.com\\/v2\\/d\\?url=(.*?)&market/, matches: [], networkId: 29 },\n    { name: 'Yadore', pattern: /yadore\\.com/, matches: [], networkId: 29 },\n    { name: 'Skimlinks', pattern: /https:\\/\\/go\\.skimresources\\.com.*?url=((http%3A%2F%2F|https%3A%2F%2F|http:\\/\\/|https:\\/\\/)[\\w.-]+)/, matches: [], networkId: 30 },\n    { name: 'Addrevenue', pattern: /https:\\/\\/addrevenue\\.io\\/t\\?c=[0-9]+&a=([0-9]+)/, matches: [], networkId: 33 },\n    { name: 'Timeone', pattern: /https:\\/\\/tracking\\.publicidees\\.com\\/clic\\.php\\?.*progid=(\\d+)/, matches: [], networkId: 35 },\n    { name: 'Glopss', pattern: /glopss\\.com\\/aff_c\\?offer_id=([0-9]+)/, matches: [], networkId: 36 },\n    { name: 'RetailAds', pattern: /retailads\\.net\\/tc\\.php\\?t=([a-zA-Z0-9]+)/, matches: [], networkId: 38 },\n    { name: 'Shareasale', pattern: /shareasale/, matches: [], networkId: 39 },\n    { name: 'Kelkoo', pattern: /kelkoogroup\\.net/, matches: [], networkId: 40 },\n    { name: 'Takeads', pattern: /tatrck\\.com/, matches: [], networkId: 45 },\n    { name: 'Belboon', pattern: /\\/ts\\/.*?\\/tsc/, matches: [], networkId: 31 },\n    { name: 'HealthTrader', pattern: /track\\.healthtrader\\.com/, matches: [], networkId: 48 },\n    { name: 'Sourceknowledge', pattern: /provenpixel\\.com\\/plp\\.php|sktng0/, matches: [], networkId: 999 },\n    { name: 'Linkbux', pattern: /linkbux\\.com\\/track/, matches: [], networkId: 998 },\n    { name: 'PointClickTrack', pattern: /clcktrck\\.com/, matches: [], networkId: 997 },\n    { name: 'Pepperjam', pattern: /pepperjamnetwork\\.com/, matches: [], networkId: 996 },\n    { name: 'OpieNetwork', pattern: /tracking\\.opienetwork\\.com/, matches: [], networkId: 995 },\n    { name: 'Vcommission', pattern: /vcommission\\.com/, matches: [], networkId: 994 },\n    { name: 'MissAffiliate', pattern: /missaffiliate\\.com/, matches: [], networkId: 993 },\n    { name: 'Ga-Net', pattern: /ga-net\\.com/, matches: [], networkId: 992 },\n    { name: 'Affisereach', pattern: /reachclk\\.com/, matches: [], networkId: 990 },\n    { name: 'opienetwork', pattern: /opienetwork\\.com/, matches: [], networkId: 990 },\n    { name: 'Fatcoupon', pattern: /fatcoupon\\.com/, matches: [], networkId: 989 },\n    { name: 'Adcell', pattern: /adcell\\.com/, matches: [], networkId: 988 },\n    { name: 'blueaff', pattern: /blueaff\\.com/, matches: [], networkId: 987 },\n    { name: 'DigiDum', pattern: /digidum/, matches: [], networkId: 986 },\n    { name: 'AdIndex', pattern: /adindex/, matches: [], networkId: 985 },\n];\n\nexport async function onRequestPost(context: any) {\n    try {\n        const body = await context.request.json();\n        const { url } = body;\n\n        if (!url) {\n            return new Response(JSON.stringify({ message: 'URL is required' }), {\n                status: 400,\n                headers: { 'Content-Type': 'application/json' }\n            });\n        }\n\n        let currentUrl = url;\n        const redirects: any[] = [];\n        const visitedUrls = new Set<string>();\n\n        while (true) {\n            if (visitedUrls.has(currentUrl)) {\n                console.log(`Redirect loop detected at URL: ${currentUrl}`);\n                redirects.push({\n                    url: currentUrl,\n                    status: 'error',\n                    type: 'Redirect Loop',\n                    name: null,\n                    error: 'Redirect loop detected'\n                });\n                break;\n            }\n            visitedUrls.add(currentUrl);\n\n            try {\n                const response = await fetch(currentUrl, {\n                    method: 'GET',\n                    redirect: 'manual',\n                });\n\n                let redirectedUrl = response.headers.get('location');\n                let matchName = null;\n\n                // Check if the current URL matches any of the provided patterns\n                for (const patternObj of regexPatterns) {\n                    if (patternObj.pattern.test(currentUrl)) {\n                        matchName = patternObj.name;\n                        break;\n                    }\n                }\n\n                console.log(`Checking URL: ${currentUrl}`);\n\n                if (redirectedUrl) {\n                    // Resolve relative URLs\n                    try {\n                        redirectedUrl = new URL(redirectedUrl, currentUrl).href;\n                    } catch (urlError: any) {\n                        console.log(`Error resolving redirect URL: ${urlError.message}`);\n                        redirects.push({\n                            url: currentUrl,\n                            status: response.status,\n                            type: 'Invalid Redirect URL',\n                            name: matchName,\n                            error: urlError.message\n                        });\n                        break;\n                    }\n\n                    console.log(`HTTP Redirect detected: ${redirectedUrl}`);\n                    redirects.push({\n                        url: currentUrl,\n                        status: response.status,\n                        type: 'HTTP Redirect',\n                        name: matchName\n                    });\n                    currentUrl = redirectedUrl;\n                    continue;\n                }\n\n                // Check for meta redirects or JS redirects\n                const html = await response.text();\n\n                // Meta refresh detection\n                const metaRedirect = html.match(/<meta[^>]*http-equiv=[\"']refresh[\"'][^>]*content=[\"']\\d+;\\s*url=([^\"']+)/i);\n                if (metaRedirect) {\n                    console.log(`Meta Redirect detected: ${metaRedirect[1]}`);\n                    currentUrl = metaRedirect[1];\n                    redirects.push({\n                        url: currentUrl,\n                        status: 200,\n                        type: 'Meta Redirect',\n                        name: matchName\n                    });\n                    continue;\n                }\n\n                // JavaScript redirect detection\n                const jsRedirect = html.match(/window\\.location\\.href\\s*=\\s*[\"']([^\"']+)[\"']/i) ||\n                                    html.match(/window\\.location\\.replace\\s*\\(\\s*[\"']([^\"']+)[\"']\\s*\\)/i) ||\n                                    html.match(/window\\.location\\s*=\\s*[\"']([^\"']+)[\"']/i) ||\n                                    html.match(/location\\.href\\s*=\\s*[\"']([^\"']+)[\"']/i) ||\n                                    html.match(/location\\.replace\\s*\\(\\s*[\"']([^\"']+)[\"']/i) ||\n                                    html.match(/window\\.open\\s*\\(\\s*[\"']([^\"']+)[\"']/i);\n\n                if (jsRedirect) {\n                    console.log(`JavaScript Redirect detected: ${jsRedirect[1]}`);\n                    currentUrl = jsRedirect[1];\n                    redirects.push({\n                        url: currentUrl,\n                        status: 200,\n                        type: 'JavaScript Redirect',\n                        name: matchName\n                    });\n                    continue;\n                }\n\n                const htmlRedirect = html.match(/window\\.location\\.replace\\s*\\(\\s*['\"]([^'\"]+)['\"]\\s*\\)/i);\n                if (htmlRedirect) {\n                    console.log(`HTML-based Redirect detected: ${htmlRedirect[1]}`);\n                    currentUrl = htmlRedirect[1];\n                    redirects.push({\n                        url: currentUrl,\n                        status: 200,\n                        type: 'HTML-based Redirect',\n                        name: matchName\n                    });\n                    continue;\n                }\n\n                // Add a check for query parameter-based redirects\n                const queryRedirect = new URL(currentUrl).searchParams.get('deeplink') || \n                                      new URL(currentUrl).searchParams.get('url') ||\n                                      new URL(currentUrl).searchParams.get('u');\n                if (queryRedirect) {\n                    console.log(`Query Parameter Redirect detected: ${queryRedirect}`);\n                    currentUrl = decodeURIComponent(queryRedirect);\n                    redirects.push({\n                        url: currentUrl,\n                        status: 200,\n                        type: 'Query Parameter Redirect',\n                        name: matchName\n                    });\n                    continue;\n                }\n\n                // Timeout-based JavaScript redirect detection\n                const timeoutRedirect = html.match(/setTimeout\\s*\\(\\s*(?:function\\s*\\(\\s*\\)\\s*\\{\\s*)?(?:window\\.location\\.(?:replace|href)\\s*=|location\\.(?:replace|href)\\s*=)\\s*[\"']([^\"']+)[\"']/i);\n                if (timeoutRedirect) {\n                    console.log(`Delayed JavaScript Redirect detected: ${timeoutRedirect[1]}`);\n                    currentUrl = timeoutRedirect[1];\n                    redirects.push({\n                        url: currentUrl,\n                        status: 200,\n                        type: 'Delayed JavaScript Redirect',\n                        name: matchName\n                    });\n                    continue;\n                }\n\n                // Inside the while loop, after checking for other redirects\n                if (currentUrl.includes('r.linksprf.com/v1/redirect')) {\n                    try {\n                        const response = await fetch(currentUrl, {\n                            method: 'GET',\n                            redirect: 'manual',\n                            headers: {\n                                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n                            }\n                        });\n\n                        if (response.status === 302 || response.status === 301) {\n                            let redirectedUrl = response.headers.get('location');\n                            console.log(`Linksprf HTTP Redirect detected: ${redirectedUrl}`);\n                            \n                            // Handle relative URLs\n                            if (redirectedUrl && redirectedUrl.startsWith('/')) {\n                                const currentUrlObj = new URL(currentUrl);\n                                redirectedUrl = `${currentUrlObj.protocol}//${currentUrlObj.host}${redirectedUrl}`;\n                            }\n                            \n                            if (redirectedUrl) {\n                                console.log(`Resolved Linksprf redirect URL: ${redirectedUrl}`);\n                                currentUrl = redirectedUrl;\n                                redirects.push({\n                                    url: currentUrl,\n                                    status: response.status,\n                                    type: 'Linksprf HTTP Redirect',\n                                    name: matchName\n                                });\n                                continue;\n                            }\n                        }\n\n                        const html = await response.text();\n                        \n                        // Check for window.location.replace in the response\n                        const scriptRedirect = html.match(/window\\.location\\.replace\\s*\\(\\s*['\"]([^'\"]+)['\"]\\s*\\)/i);\n                        \n                        if (scriptRedirect) {\n                            let redirectedUrl = scriptRedirect[1];\n                            console.log(`Linksprf Script Redirect detected: ${redirectedUrl}`);\n                            \n                            // Handle relative URLs\n                            if (redirectedUrl.startsWith('/')) {\n                                const currentUrlObj = new URL(currentUrl);\n                                redirectedUrl = `${currentUrlObj.protocol}//${currentUrlObj.host}${redirectedUrl}`;\n                            }\n                            \n                            console.log(`Resolved Linksprf script redirect URL: ${redirectedUrl}`);\n                            currentUrl = redirectedUrl;\n                            redirects.push({\n                                url: currentUrl,\n                                status: response.status,\n                                type: 'Linksprf Script Redirect',\n                                name: matchName\n                            });\n                            continue;\n                        }\n                        \n                        // If no redirect found, log the content for debugging\n                        console.log('Linksprf response content:', html);\n                    } catch (error: any) {\n                        console.log(`Error handling Linksprf URL: ${error.message}`);\n                    }\n                }\n\n                // If no more redirects are detected, check the final URL\n                let matchNameFinal = null;\n                for (const patternObj of regexPatterns) {\n                    if (patternObj.pattern.test(currentUrl)) {\n                        matchNameFinal = patternObj.name;\n                        break;\n                    }\n                }\n\n                console.log(`No more redirects detected. Final URL: ${currentUrl}`);\n                console.log(`Final URL: ${currentUrl}`); // Add this line\n                redirects.push({\n                    url: currentUrl,\n                    status: 200,\n                    type: 'Final URL',\n                    name: matchNameFinal\n                });\n                break;\n            } catch (redirectError: any) {\n                console.log(`Redirect Error: ${redirectError.message}`);\n                redirects.push({\n                    url: currentUrl,\n                    status: 'error',\n                    type: 'Redirect Error',\n                    name: null,\n                    error: redirectError.message\n                });\n                break;\n            }\n        }\n\n        return new Response(JSON.stringify({ redirects }), {\n            status: 200,\n            headers: { 'Content-Type': 'application/json' }\n        });\n    } catch (error: any) {\n        console.error('Error processing request:', error);\n        return new Response(JSON.stringify({ message: 'An error occurred', error: error.message }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' }\n        });\n    }\n}\n", "export interface Env {\n  UPTIME_KUMA_SECRET: string;\n  UPTIME_KUMA_URL?: string;\n}\n\ninterface StatusPageHeartbeat {\n  status: number;\n  time: string;\n  msg: string;\n  ping: number;\n}\n\ninterface StatusPageResponse {\n  heartbeatList: {\n    [key: string]: StatusPageHeartbeat[];\n  };\n  uptimeList: {\n    [key: string]: number;\n  };\n}\n\ninterface UrlData {\n  type: string;\n  avg_uptime_percentage: number;\n  avg_response_time: number;\n  hasStatusPage: boolean;\n  heartbeats?: StatusPageHeartbeat[];\n  uptimeList?: { [key: string]: number };\n}\n\ninterface Domain {\n  domain: string;\n  displayName: string;\n  avg_uptime_percentage: number;\n  urls: UrlData[];\n  day_uptime: { type: string; day_uptime: { date: string; uptime: number | null }[] }[];\n  hasStatusPage: boolean;\n  uptimeList?: { [key: string]: number };\n}\n\nexport async function onRequestGet(context: { env: Env, request: Request }): Promise<Response> {\n  try {\n    const { env } = context;\n    \n    const uptimeKumaSecret = env.UPTIME_KUMA_SECRET;\n\n    if (!uptimeKumaSecret) {\n      return new Response(JSON.stringify({ error: 'Uptime Kuma secret not configured' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    // Try multiple endpoints to get data from Uptime Kuma\n    let metricsText = '';\n    let success = false;\n\n    // First try the metrics endpoint with Basic Auth\n    try {\n      const monitorsResponse = await fetch(`${env.UPTIME_KUMA_URL || 'http://152.42.135.243:3001'}/metrics`, {\n        headers: {\n          'Authorization': `Basic ${btoa(':' + uptimeKumaSecret)}`,\n          'Accept': 'text/plain'\n        }\n      });\n\n      if (monitorsResponse.ok) {\n        metricsText = await monitorsResponse.text();\n        console.log('Metrics response preview:', metricsText.substring(0, 200));\n        \n        // Check if we got HTML instead of metrics\n        if (metricsText.startsWith('<!DOCTYPE') || metricsText.includes('<html')) {\n          console.log('Received HTML instead of metrics, trying alternative approach');\n        } else {\n          success = true;\n        }\n      } else {\n        console.error('Metrics endpoint failed:', monitorsResponse.status, monitorsResponse.statusText);\n      }\n    } catch (error) {\n      console.error('Error fetching metrics:', error);\n    }\n\n    if (!success) {\n      console.log('All API attempts failed - providing fallback response');\n      \n      // Check if we're in Cloudflare environment and the issue is network access\n      const isCloudflareEnv = typeof caches !== 'undefined';\n      const usingPrivateIp = !env.UPTIME_KUMA_URL && isCloudflareEnv;\n      \n      let errorMessage = 'Unable to fetch data from Uptime Kuma';\n      if (usingPrivateIp) {\n        errorMessage += ' - Private IP access blocked in production. Please configure UPTIME_KUMA_URL environment variable with a public domain.';\n      }\n      \n      return new Response(JSON.stringify({ \n        error: errorMessage,\n        debug: {\n          environment: isCloudflareEnv ? 'cloudflare' : 'local',\n          hasPublicUrl: !!env.UPTIME_KUMA_URL,\n          suggestedAction: usingPrivateIp ? 'Configure UPTIME_KUMA_URL environment variable' : 'Check network connectivity'\n        }\n      }), {\n        status: 503,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type'\n        }\n      });\n    }\n\n    // Process the Prometheus metrics to match our expected format\n    const processedDomains = await processPrometheusMetrics(metricsText, env.UPTIME_KUMA_URL);\n\n    return new Response(JSON.stringify(processedDomains), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type'\n      }\n    });\n\n  } catch (error) {\n    console.error('Error in affiliate-network-uptime API:', error);\n    \n    // Return error instead of mock data\n    return new Response(JSON.stringify({ error: 'Failed to fetch real uptime data: ' + (error instanceof Error ? error.message : 'Unknown error') }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type'\n      }\n    });\n  }\n}\n\nexport async function onRequestOptions(): Promise<Response> {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n}\n\nfunction formatNetworkDisplayName(networkName: string): string {\n  const nameMappings: { [key: string]: string } = {\n    'involveasia': 'Involve Asia',\n    'partnerads': 'Partner Ads',\n    'retailads': 'Retail Ads',\n    'smartresponse': 'Smart Response',\n    'takeads': 'Take Ads'\n  };\n  \n  const normalizedName = networkName.toLowerCase().replace(/[^a-z0-9]/g, '');\n  return nameMappings[normalizedName] || networkName;\n}\n\nasync function fetchStatusPageData(networkName: string, uptimeKumaUrl?: string): Promise<StatusPageResponse | null> {\n  try {\n    const url = `${uptimeKumaUrl || 'http://152.42.135.243:3001'}/api/status-page/heartbeat/${networkName}?limit=10080`;\n    console.log(`Fetching status page from: ${url}`);\n    \n    const response = await fetch(url);\n    \n    console.log(`Status page response for ${networkName}:`, response.status, response.statusText);\n    \n    if (!response.ok) {\n      console.log(`Status page not found for ${networkName}: ${response.status}`);\n      return null;\n    }\n    \n    const data = await response.json();\n    console.log(`Status page data for ${networkName}:`, {\n      hasHeartbeatList: !!data.heartbeatList,\n      heartbeatKeys: data.heartbeatList ? Object.keys(data.heartbeatList) : [],\n      totalHeartbeats: data.heartbeatList ? Object.values(data.heartbeatList).reduce((sum: number, arr: any) => sum + (Array.isArray(arr) ? arr.length : 0), 0) : 0\n    });\n    \n    return data;\n  } catch (error) {\n    console.error(`Error fetching status page data for ${networkName}:`, error);\n    return null;\n  }\n}\n\nasync function processPrometheusMetrics(metricsText: string, uptimeKumaUrl?: string): Promise<Domain[]> {\n  const domains: Map<string, Domain> = new Map();\n  const lines = metricsText.split('\\n');\n\n  // Parse Prometheus metrics\n  const monitors: Map<string, any> = new Map();\n\n  for (const line of lines) {\n    if (line.startsWith('#') || !line.trim()) continue;\n\n    // Parse metric lines like: metric_name{label1=\"value1\",label2=\"value2\"} value\n    const metricMatch = line.match(/^([a-zA-Z_:][a-zA-Z0-9_:]*)\\{([^}]*)\\}\\s+(.+)$/);\n    if (!metricMatch) continue;\n\n    const [, metricName, labelsStr, value] = metricMatch;\n    \n    // Parse labels\n    const labels: { [key: string]: string } = {};\n    const labelMatches = labelsStr.matchAll(/([a-zA-Z_][a-zA-Z0-9_]*)=\"([^\"]*)\"/g);\n    for (const labelMatch of labelMatches) {\n      labels[labelMatch[1]] = labelMatch[2];\n    }\n\n    const monitorName = labels.monitor_name || labels.job || 'unknown';\n    \n    // Skip group monitors or invalid ones\n    if (labels.monitor_type === 'group' || monitorName === 'unknown') continue;\n\n    if (!monitors.has(monitorName)) {\n      monitors.set(monitorName, {\n        name: monitorName,\n        type: labels.monitor_type || 'http',\n        url: labels.monitor_url || '',\n        metrics: {}\n      });\n    }\n\n    const monitor = monitors.get(monitorName)!;\n    monitor.metrics[metricName] = parseFloat(value);\n  }\n\n  // Process monitors into domains\n  for (const monitor of monitors.values()) {\n    const domain = monitor.name.toLowerCase().replace(/[^a-z0-9]/g, '');\n    \n    if (!domains.has(domain)) {\n      domains.set(domain, {\n        domain,\n        displayName: formatNetworkDisplayName(monitor.name),\n        avg_uptime_percentage: 0,\n        urls: [],\n        day_uptime: [],\n        hasStatusPage: false\n      });\n    }\n\n    const domainData = domains.get(domain)!;\n\n    // Extract metrics - using the actual metric names from Uptime Kuma\n    const status = monitor.metrics['monitor_status'] || 0; // 1 = UP, 0 = DOWN\n    const responseTime = monitor.metrics['monitor_response_time'] || 0;\n    \n    // Calculate uptime percentage based on actual status\n    const uptimePercentage = status === 1 ? 100 : 0;\n\n    // Add URL data - treating each monitor as a \"Tracking\" endpoint since they're all tracking URLs\n    domainData.urls.push({\n      type: 'Tracking',\n      avg_uptime_percentage: uptimePercentage,\n      avg_response_time: responseTime,\n      hasStatusPage: false\n    });\n\n    // Only include today's data since we don't have historical data\n    const today = new Date().toISOString().split('T')[0];\n    domainData.day_uptime.push({\n      type: 'Tracking',\n      day_uptime: [{\n        date: today,\n        uptime: uptimePercentage / 100\n      }]\n    });\n  }\n\n  // Fetch status page data for each domain and only keep those with status pages\n  const domainsWithStatusPages: Domain[] = [];\n  \n  for (const domain of domains.values()) {\n    const networkName = domain.domain;\n    console.log(`Checking status page for network: ${networkName}`);\n    \n    const statusPageData = await fetchStatusPageData(networkName, uptimeKumaUrl);\n    \n    if (statusPageData && statusPageData.heartbeatList && Object.keys(statusPageData.heartbeatList).length > 0) {\n      console.log(`Status page found for ${networkName}, heartbeats:`, Object.keys(statusPageData.heartbeatList).length);\n      \n      domain.hasStatusPage = true;\n      \n      // Add uptimeList to domain\n      if (statusPageData.uptimeList) {\n        domain.uptimeList = statusPageData.uptimeList;\n        console.log(`Added uptimeList to domain ${domain.domain}:`, statusPageData.uptimeList);\n      }\n      \n      // Update URLs with status page data\n      domain.urls.forEach(url => {\n        url.hasStatusPage = true;\n        \n        // Add uptimeList to each URL as well\n        if (statusPageData.uptimeList) {\n          url.uptimeList = statusPageData.uptimeList;\n          console.log(`Added uptimeList to URL ${url.type}:`, statusPageData.uptimeList);\n        }\n        \n        // Get heartbeats from all available monitors - each heartbeat should be a separate candle\n        const allHeartbeats: StatusPageHeartbeat[] = [];\n        console.log(`Processing heartbeats for ${domain.domain}, heartbeatList keys:`, Object.keys(statusPageData.heartbeatList));\n        \n        // Extract all individual heartbeats from all monitors\n        Object.entries(statusPageData.heartbeatList).forEach(([monitorId, heartbeatArray]) => {\n          console.log(`Monitor ${monitorId} heartbeats:`, Array.isArray(heartbeatArray) ? heartbeatArray.length : 'not array');\n          if (Array.isArray(heartbeatArray)) {\n            // Each heartbeat in the array should be a separate candle\n            heartbeatArray.forEach(heartbeat => {\n              if (heartbeat && typeof heartbeat === 'object' && 'status' in heartbeat) {\n                allHeartbeats.push(heartbeat as StatusPageHeartbeat);\n              }\n            });\n          }\n        });\n        \n        console.log(`Total individual heartbeats collected for ${domain.domain}:`, allHeartbeats.length);\n        \n        // Sort by time (newest first) and assign to URL\n        url.heartbeats = allHeartbeats.sort((a, b) => \n          new Date(b.time).getTime() - new Date(a.time).getTime()\n        );\n        \n        console.log(`Final heartbeats assigned to ${domain.domain} ${url.type}:`, url.heartbeats.length);\n        if (url.heartbeats.length > 0) {\n          console.log(`Sample heartbeats:`, url.heartbeats.slice(0, 3));\n        }\n      });\n      \n      domainsWithStatusPages.push(domain);\n    } else {\n      console.log(`No status page found for ${networkName}`);\n    }\n  }\n\n  console.log(`Total domains with status pages: ${domainsWithStatusPages.length}`);\n\n  // Calculate overall domain uptime for domains with status pages\n  domainsWithStatusPages.forEach((domain) => {\n    if (domain.urls.length > 0) {\n      domain.avg_uptime_percentage = domain.urls.reduce((sum, url) => sum + url.avg_uptime_percentage, 0) / domain.urls.length;\n    }\n  });\n\n  return domainsWithStatusPages;\n}\n\n\n", "import { onRequestGet as __api_auth_facebook_callback_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/auth/facebook/callback.ts\"\nimport { onRequestGet as __api_auth_github_callback_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/auth/github/callback.ts\"\nimport { onRequestGet as __api_auth_google_callback_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/auth/google/callback.ts\"\nimport { onRequestGet as __api_auth_facebook_index_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/auth/facebook/index.ts\"\nimport { onRequestGet as __api_auth_github_index_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/auth/github/index.ts\"\nimport { onRequestGet as __api_auth_google_index_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/auth/google/index.ts\"\nimport { onRequestPost as __api_tools_affiliate_link_checker_ts_onRequestPost } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/tools/affiliate-link-checker.ts\"\nimport { onRequestGet as __api_tools_affiliate_network_uptime_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/tools/affiliate-network-uptime.ts\"\nimport { onRequestOptions as __api_tools_affiliate_network_uptime_ts_onRequestOptions } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/tools/affiliate-network-uptime.ts\"\n\nexport const routes = [\n    {\n      routePath: \"/api/auth/facebook/callback\",\n      mountPath: \"/api/auth/facebook\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_auth_facebook_callback_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/auth/github/callback\",\n      mountPath: \"/api/auth/github\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_auth_github_callback_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/auth/google/callback\",\n      mountPath: \"/api/auth/google\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_auth_google_callback_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/auth/facebook\",\n      mountPath: \"/api/auth/facebook\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_auth_facebook_index_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/auth/github\",\n      mountPath: \"/api/auth/github\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_auth_github_index_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/auth/google\",\n      mountPath: \"/api/auth/google\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_auth_google_index_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/tools/affiliate-link-checker\",\n      mountPath: \"/api/tools\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_tools_affiliate_link_checker_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/tools/affiliate-network-uptime\",\n      mountPath: \"/api/tools\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_tools_affiliate_network_uptime_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/tools/affiliate-network-uptime\",\n      mountPath: \"/api/tools\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_tools_affiliate_network_uptime_ts_onRequestOptions],\n    },\n  ]", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/.wrangler/tmp/bundle-4BsSZr/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/.wrangler/tmp/bundle-4BsSZr/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/.wrangler/tmp/bundle-4BsSZr/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/node_modules/wrangler/templates/pages-template-worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/node_modules/wrangler/templates/pages-template-worker.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "import { match } from \"path-to-regexp\";\n\n//note: this explicitly does not include the * character, as pages requires this\nconst escapeRegex = /[.+?^${}()|[\\]\\\\]/g;\n\ntype HTTPMethod =\n\t| \"HEAD\"\n\t| \"OPTIONS\"\n\t| \"GET\"\n\t| \"POST\"\n\t| \"PUT\"\n\t| \"PATCH\"\n\t| \"DELETE\";\n\n/* TODO: Grab these from @cloudflare/workers-types instead */\ntype Params<P extends string = string> = Record<P, string | string[]>;\n\ntype EventContext<Env, P extends string, Data> = {\n\trequest: Request;\n\tfunctionPath: string;\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n\tnext: (input?: Request | string, init?: RequestInit) => Promise<Response>;\n\tenv: Env & { ASSETS: { fetch: typeof fetch } };\n\tparams: Params<P>;\n\tdata: Data;\n};\n\ndeclare type PagesFunction<\n\tEnv = unknown,\n\tP extends string = string,\n\tData extends Record<string, unknown> = Record<string, unknown>,\n> = (context: EventContext<Env, P, Data>) => Response | Promise<Response>;\n/* end @cloudflare/workers-types */\n\ntype RouteHandler = {\n\troutePath: string;\n\tmountPath: string;\n\tmethod?: HTTPMethod;\n\tmodules: PagesFunction[];\n\tmiddlewares: PagesFunction[];\n};\n\n// inject `routes` via ESBuild\ndeclare const routes: RouteHandler[];\n// define `__FALLBACK_SERVICE__` via ESBuild\ndeclare const __FALLBACK_SERVICE__: string;\n\n// expect an ASSETS fetcher binding pointing to the asset-server stage\ntype FetchEnv = {\n\t[name: string]: { fetch: typeof fetch };\n\tASSETS: { fetch: typeof fetch };\n};\n\ntype WorkerContext = {\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n};\n\nfunction* executeRequest(request: Request) {\n\tconst requestPath = new URL(request.url).pathname;\n\n\t// First, iterate through the routes (backwards) and execute \"middlewares\" on partial route matches\n\tfor (const route of [...routes].reverse()) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// replaces with \"\\\\$&\", this prepends a backslash to the matched string, e.g. \"[\" becomes \"\\[\"\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult) {\n\t\t\tfor (const handler of route.middlewares.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: mountMatchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t// Then look for the first exact route match and execute its \"modules\"\n\tfor (const route of routes) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: true,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult && route.modules.length) {\n\t\t\tfor (const handler of route.modules.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: matchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport default {\n\tasync fetch(\n\t\toriginalRequest: Request,\n\t\tenv: FetchEnv,\n\t\tworkerContext: WorkerContext\n\t) {\n\t\tlet request = originalRequest;\n\t\tconst handlerIterator = executeRequest(request);\n\t\tlet data = {}; // arbitrary data the user can set between functions\n\t\tlet isFailOpen = false;\n\n\t\tconst next = async (input?: RequestInfo, init?: RequestInit) => {\n\t\t\tif (input !== undefined) {\n\t\t\t\tlet url = input;\n\t\t\t\tif (typeof input === \"string\") {\n\t\t\t\t\turl = new URL(input, request.url).toString();\n\t\t\t\t}\n\t\t\t\trequest = new Request(url, init);\n\t\t\t}\n\n\t\t\tconst result = handlerIterator.next();\n\t\t\t// Note we can't use `!result.done` because this doesn't narrow to the correct type\n\t\t\tif (result.done === false) {\n\t\t\t\tconst { handler, params, path } = result.value;\n\t\t\t\tconst context = {\n\t\t\t\t\trequest: new Request(request.clone()),\n\t\t\t\t\tfunctionPath: path,\n\t\t\t\t\tnext,\n\t\t\t\t\tparams,\n\t\t\t\t\tget data() {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t},\n\t\t\t\t\tset data(value) {\n\t\t\t\t\t\tif (typeof value !== \"object\" || value === null) {\n\t\t\t\t\t\t\tthrow new Error(\"context.data must be an object\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// user has overriden context.data, so we need to merge it with the existing data\n\t\t\t\t\t\tdata = value;\n\t\t\t\t\t},\n\t\t\t\t\tenv,\n\t\t\t\t\twaitUntil: workerContext.waitUntil.bind(workerContext),\n\t\t\t\t\tpassThroughOnException: () => {\n\t\t\t\t\t\tisFailOpen = true;\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst response = await handler(context);\n\n\t\t\t\tif (!(response instanceof Response)) {\n\t\t\t\t\tthrow new Error(\"Your Pages function should return a Response\");\n\t\t\t\t}\n\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else if (__FALLBACK_SERVICE__) {\n\t\t\t\t// There are no more handlers so finish with the fallback service (`env.ASSETS.fetch` in Pages' case)\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else {\n\t\t\t\t// There was not fallback service so actually make the request to the origin.\n\t\t\t\tconst response = await fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\treturn await next();\n\t\t} catch (error) {\n\t\t\tif (isFailOpen) {\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t},\n};\n\n// This makes a Response mutable\nconst cloneResponse = (response: Response) =>\n\t// https://fetch.spec.whatwg.org/#null-body-status\n\tnew Response(\n\t\t[101, 204, 205, 304].includes(response.status) ? null : response.body,\n\t\tresponse\n\t);\n", "/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\", delimiter = \"/#?\" } = options;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  const isSafe = (value: string): boolean => {\n    for (const char of delimiter) if (value.indexOf(char) > -1) return true;\n    return false;\n  };\n\n  const safePattern = (prefix: string) => {\n    const prev = result[result.length - 1];\n    const prevText = prefix || (prev && typeof prev === \"string\" ? prev : \"\");\n\n    if (prev && !prevText) {\n      throw new TypeError(\n        `Must have text between two parameters, missing text after \"${(prev as Key).name}\"`,\n      );\n    }\n\n    if (!prevText || isSafe(prevText)) return `[^${escapeString(delimiter)}]+?`;\n    return `(?:(?!${escapeString(prevText)})[^${escapeString(delimiter)}])+?`;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || safePattern(prefix),\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? safePattern(prefix) : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions,\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {},\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map((token) => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`,\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string,\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions,\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {},\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function (pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map((value) => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\",\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n): RegExp {\n  const parts = paths.map((path) => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp won't allow an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {},\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x,\n    delimiter = \"/#?\",\n    endsWith = \"\",\n  } = options;\n  const endsWithRe = `[${escapeString(endsWith)}]|$`;\n  const delimiterRe = `[${escapeString(delimiter)}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            throw new TypeError(\n              `Can not repeat \"${token.name}\" without a prefix and suffix`,\n            );\n          }\n\n          route += `(${token.pattern})${token.modifier}`;\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiterRe}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWithRe})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1\n        : endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiterRe}(?=${endsWithRe}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiterRe}|${endsWithRe})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": "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",
  "names": ["db", "user", "isNewUser", "sendNewUserNotification", "error", "parseCookies", "signJwt", "onRequestGet", "db", "user", "isNewUser", "sendNewUserNotification", "error", "init_callback", "parseCookies", "signJwt", "processPendingPayments", "onRequestGet", "db", "user", "isNewUser", "error", "sendNewUserNotification", "init_callback", "onRequestGet", "onRequestGet", "onRequestGet", "response", "redirectedUrl", "html", "onRequestGet", "init_callback", "onRequestGet", "value", "_a", "result", "char", "prefix", "i"]
}
