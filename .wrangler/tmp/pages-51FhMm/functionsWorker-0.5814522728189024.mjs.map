{
  "version": 3,
  "sources": ["../bundle-Z404Wm/checked-fetch.js", "../../../functions/api/auth/shared/email-notifications.ts", "../../../functions/api/auth/facebook/callback.ts", "../../../functions/api/auth/github/callback.ts", "../../../functions/api/auth/google/callback.ts", "../../../functions/api/user/progress/%5BcourseId%5D/index.ts", "../../../functions/api/auth/facebook/index.ts", "../../../functions/api/auth/github/index.ts", "../../../functions/api/auth/google/index.ts", "../../../src/lib/jwt.ts", "../../../functions/api/profile/billing-address.ts", "../../../functions/api/profile/completion-status.ts", "../../../functions/api/profile/invoices.ts", "../../../functions/api/profile/preferences.ts", "../../../src/lib/invoice-generator.ts", "../../../functions/api/profile/process-pending-invoices.ts", "../../../functions/api/tools/affiliate-link-checker.ts", "../../../functions/api/tools/affiliate-network-uptime.ts", "../../../src/pricing-plans.json", "../../../src/locales/settings.ts", "../../../functions/api/stripe/create-checkout-session.ts", "../../../functions/api/stripe/create-portal-session.ts", "../../../functions/api/stripe/create-user-account.ts", "../../../functions/api/stripe/webhook.ts", "../../../functions/api/invoice/%5BinvoiceNumber%5D.ts", "../../../functions/api/contact/index.ts", "../../../functions/api/debug-uptime-connection.ts", "../../../functions/api/logout/index.ts", "../../../functions/api/magic-login/index.ts", "../../../functions/api/mistake-report/index.ts", "../../../functions/api/profile/index.ts", "../../../functions/api/refund-request/index.ts", "../../../functions/api/request-magic-link/index.ts", "../../../functions/api/user/index.ts", "../../../functions/api/user-preferences.ts", "../../../functions/api/currency-rates.ts", "functionsRoutes-0.7618036433816886.mjs", "../bundle-Z404Wm/middleware-loader.entry.ts", "../bundle-Z404Wm/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/pages-template-worker.ts", "../../../node_modules/path-to-regexp/src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "/Users/sjoerdcopier/PhpstormProjects/affensus_web/.wrangler/tmp/pages-51FhMm/functionsWorker-0.5814522728189024.mjs",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "async function sendNewUserNotification(userEmail: string, loginMethod: string, resendApiKey: string) {\n  const response = await fetch('https://api.resend.com/emails', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${resendApiKey}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      from: 'noreply@email.morsexpress.com',\n      to: 's.copier@gmail.com',\n      subject: '\uD83C\uDF89 New User Registered - MorseXpress',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <div style=\"text-align: center; margin-bottom: 30px;\">\n            <h1 style=\"color: #1f2937; margin-bottom: 10px;\">\uD83C\uDF89 MorseXpress</h1>\n            <h2 style=\"color: #4b5563; font-weight: normal; margin-top: 0;\">New User Registration</h2>\n          </div>\n          \n          <div style=\"background-color: #f3f4f6; padding: 20px; border-radius: 8px; margin-bottom: 20px;\">\n            <h3 style=\"color: #1f2937; margin-top: 0;\">User Details:</h3>\n            <p style=\"color: #374151; margin: 8px 0;\"><strong>Email:</strong> ${userEmail}</p>\n            <p style=\"color: #374151; margin: 8px 0;\"><strong>Login Method:</strong> ${loginMethod}</p>\n            <p style=\"color: #374151; margin: 8px 0;\"><strong>Registration Time:</strong> ${new Date().toISOString()}</p>\n          </div>\n          \n          <p style=\"color: #374151; font-size: 16px; line-height: 1.5;\">\n            A new user has successfully registered for MorseXpress! \uD83D\uDE80\n          </p>\n          \n          <hr style=\"border: none; border-top: 1px solid #e5e7eb; margin: 30px 0;\">\n          \n          <p style=\"color: #9ca3af; font-size: 12px; text-align: center;\">\n            This is an automated notification from MorseXpress.\n          </p>\n        </div>\n      `,\n      text: `\nNew User Registration - MorseXpress\n\nUser Details:\n- Email: ${userEmail}\n- Login Method: ${loginMethod}\n- Registration Time: ${new Date().toISOString()}\n\nA new user has successfully registered for MorseXpress!\n\nThis is an automated notification from MorseXpress.\n      `.trim()\n    })\n  })\n\n  if (!response.ok) {\n    const errorText = await response.text()\n    console.error('Failed to send new user notification:', errorText)\n    // Don't throw error - we don't want to break user registration if email fails\n    return false\n  }\n\n  const result = await response.json()\n  console.log('New user notification sent successfully:', result)\n  return true\n}\n\nexport { sendNewUserNotification } ", "interface FacebookUserInfo {\n  id: string\n  email: string\n  name: string\n}\n\nfunction parseCookies(cookieHeader: string | null): Record<string, string> {\n  const cookies: Record<string, string> = {}\n  if (!cookieHeader) return cookies\n  \n  cookieHeader.split(';').forEach(cookie => {\n    const parts = cookie.trim().split('=')\n    if (parts.length === 2) {\n      cookies[parts[0]] = parts[1]\n    }\n  })\n  return cookies\n}\n\nasync function signJwt(payload: any, secret: string, expiresIn: number): Promise<string> {\n  const header = { alg: 'HS256', typ: 'JWT' }\n  const now = Math.floor(Date.now() / 1000)\n  const exp = now + expiresIn\n  \n  const jwtPayload = { ...payload, iat: now, exp }\n  \n  const encoder = new TextEncoder()\n  const key = await crypto.subtle.importKey(\n    'raw',\n    encoder.encode(secret),\n    { name: 'HMAC', hash: 'SHA-256' },\n    false,\n    ['sign']\n  )\n  \n  const headerB64 = btoa(JSON.stringify(header)).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n  const payloadB64 = btoa(JSON.stringify(jwtPayload)).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n  \n  const signatureArrayBuffer = await crypto.subtle.sign(\n    'HMAC',\n    key,\n    encoder.encode(`${headerB64}.${payloadB64}`)\n  )\n  \n  const signatureB64 = btoa(String.fromCharCode(...new Uint8Array(signatureArrayBuffer)))\n    .replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n  \n  return `${headerB64}.${payloadB64}.${signatureB64}`\n}\n\nexport async function onRequestGet(context: any) {\n  try {\n    const { request, env } = context\n    const url = new URL(request.url)\n    const code = url.searchParams.get('code')\n    const state = url.searchParams.get('state')\n    const error = url.searchParams.get('error')\n\n    const FACEBOOK_APP_ID = env.FACEBOOK_APP_ID\n    const FACEBOOK_APP_SECRET = env.FACEBOOK_APP_SECRET\n    const FACEBOOK_REDIRECT_URI = `${env.SITE_URL || 'http://localhost:3000'}/api/auth/facebook/callback`\n\n    // Check for OAuth errors\n    if (error) {\n      console.error('Facebook OAuth error:', error)\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=oauth_denied` }\n      })\n    }\n\n    // Verify required parameters\n    if (!code || !state) {\n      console.error('Missing code or state parameter')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=invalid_request` }\n      })\n    }\n\n    // Verify state parameter for CSRF protection\n    const cookies = parseCookies(request.headers.get('Cookie'))\n    const storedState = cookies['oauth_state']\n    if (!storedState || state !== storedState) {\n      console.error('Invalid state parameter')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=invalid_state` }\n      })\n    }\n\n    // Check if OAuth is configured\n    if (!FACEBOOK_APP_ID || !FACEBOOK_APP_SECRET) {\n      console.error('Facebook OAuth not configured')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=oauth_not_configured` }\n      })\n    }\n\n    // Exchange code for access token\n    const tokenResponse = await fetch(`https://graph.facebook.com/v18.0/oauth/access_token?` +\n      `client_id=${FACEBOOK_APP_ID}&` +\n      `client_secret=${FACEBOOK_APP_SECRET}&` +\n      `code=${code}&` +\n      `redirect_uri=${encodeURIComponent(FACEBOOK_REDIRECT_URI)}`)\n\n    if (!tokenResponse.ok) {\n      console.error('Failed to exchange code for token:', await tokenResponse.text())\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=token_exchange_failed` }\n      })\n    }\n\n    const tokenData = await tokenResponse.json()\n    const accessToken = tokenData.access_token\n\n    // Get user info from Facebook\n    const userInfoResponse = await fetch(\n      `https://graph.facebook.com/v18.0/me?fields=id,name,email&access_token=${accessToken}`\n    )\n\n    if (!userInfoResponse.ok) {\n      console.error('Failed to get user info from Facebook')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=user_info_failed` }\n      })\n    }\n\n    const userInfo: FacebookUserInfo = await userInfoResponse.json()\n\n    // Verify email is provided\n    if (!userInfo.email) {\n      console.error('Facebook account email not provided')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=email_not_provided` }\n      })\n    }\n\n    // Get database from environment\n    const db = env.DB\n    if (!db) {\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=database_not_available` }\n      })\n    }\n\n    // Create or update user with Facebook login method\n    const createUser = async (db: any, email: string, loginMethod: string = 'facebook') => {\n      const stmt = db.prepare(`\n        INSERT OR IGNORE INTO users (email, preferred_login_method, created_at, updated_at)\n        VALUES (?, ?, datetime('now'), datetime('now'))\n      `)\n      const result = await stmt.bind(email, loginMethod).run()\n      \n      // Get the user (either just created or existing)\n      const user = await db.prepare('SELECT * FROM users WHERE email = ?').bind(email).first()\n      \n      // Check if this is a new user by checking if the insert actually happened\n      // SQLite changes will be > 0 if a row was inserted\n      const isNewUser = result.changes > 0\n      \n      return { user, isNewUser }\n    }\n\n    const updatePreferredLoginMethod = async (db: any, email: string, method: string) => {\n      await db.prepare(`\n        UPDATE users \n        SET preferred_login_method = ?, updated_at = datetime('now')\n        WHERE email = ?\n      `).bind(method, email).run()\n    }\n\n    // Create or update user\n    const { user, isNewUser } = await createUser(db, userInfo.email.toLowerCase(), 'facebook')\n\n    // Update user's preferred login method\n    await updatePreferredLoginMethod(db, userInfo.email.toLowerCase(), 'facebook')\n\n    // Send email notification for new users\n    if (isNewUser) {\n      const resendApiKey = env.RESEND_API_KEY\n      if (resendApiKey) {\n        try {\n          const { sendNewUserNotification } = await import('../shared/email-notifications')\n          await sendNewUserNotification(user.email, 'facebook', resendApiKey)\n        } catch (error) {\n          console.error('Failed to send new user notification:', error)\n          // Continue with normal flow even if email fails\n        }\n      } else {\n        console.log('New user registered but RESEND_API_KEY not configured - email notification skipped')\n      }\n    }\n\n    // Generate JWT token\n    const jwtSecret = env.JWT_SECRET\n    if (!jwtSecret) {\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=jwt_not_configured` }\n      })\n    }\n\n    const jwtToken = await signJwt(\n      {\n        sub: user.id.toString(),\n        email: user.email,\n        login_method: 'facebook',\n      },\n      jwtSecret,\n      7 * 24 * 60 * 60 // 7 days\n    )\n\n    // Create HTML response with localStorage and redirect\n    const html = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>Redirecting...</title>\n      </head>\n      <body>\n        <script>\n          localStorage.setItem('lastLoginMethod', 'facebook');\n          localStorage.setItem('lastLoginTime', new Date().toISOString());\n          window.location.href = '${env.SITE_URL || 'http://localhost:3000'}/auth';\n        </script>\n        <p>Redirecting...</p>\n      </body>\n      </html>\n    `\n    \n    // Set cookie with appropriate security settings\n    const isProduction = env.SITE_URL?.startsWith('https://') || false\n    const secureFlag = isProduction ? 'Secure; ' : ''\n    \n    // Set cookies using Headers object for proper multiple cookie handling\n    const headers = new Headers({\n      'Content-Type': 'text/html'\n    })\n    \n    // Set auth token cookie\n    headers.append('Set-Cookie', `auth-token=${jwtToken}; HttpOnly; ${secureFlag}SameSite=Lax; Max-Age=${7 * 24 * 60 * 60}; Path=/`)\n    \n    // Clear oauth_state cookie\n    headers.append('Set-Cookie', `oauth_state=; HttpOnly; ${secureFlag}SameSite=Lax; Max-Age=0; Path=/`)\n\n    return new Response(html, {\n      status: 200,\n      headers,\n    })\n\n  } catch (error) {\n    console.error('Error processing Facebook OAuth callback:', error)\n    return new Response(null, {\n      status: 302,\n      headers: { 'Location': `${context.env.SITE_URL || 'http://localhost:3000'}/auth?error=internal_error` }\n    })\n  }\n} ", "interface GitHubUserInfo {\n  id: number\n  login: string\n  email: string\n  name: string\n  avatar_url: string\n}\n\ninterface GitHubEmailInfo {\n  email: string\n  primary: boolean\n  verified: boolean\n  visibility: string\n}\n\nfunction parseCookies(cookieHeader: string | null): Record<string, string> {\n  const cookies: Record<string, string> = {}\n  if (!cookieHeader) return cookies\n  \n  cookieHeader.split(';').forEach(cookie => {\n    const parts = cookie.trim().split('=')\n    if (parts.length === 2) {\n      cookies[parts[0]] = parts[1]\n    }\n  })\n  return cookies\n}\n\nasync function signJwt(payload: any, secret: string, expiresIn: number): Promise<string> {\n  const header = { alg: 'HS256', typ: 'JWT' }\n  const now = Math.floor(Date.now() / 1000)\n  const exp = now + expiresIn\n  \n  const jwtPayload = { ...payload, iat: now, exp }\n  \n  const encoder = new TextEncoder()\n  const key = await crypto.subtle.importKey(\n    'raw',\n    encoder.encode(secret),\n    { name: 'HMAC', hash: 'SHA-256' },\n    false,\n    ['sign']\n  )\n  \n  const headerB64 = btoa(JSON.stringify(header)).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n  const payloadB64 = btoa(JSON.stringify(jwtPayload)).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n  \n  const signatureArrayBuffer = await crypto.subtle.sign(\n    'HMAC',\n    key,\n    encoder.encode(`${headerB64}.${payloadB64}`)\n  )\n  \n  const signatureB64 = btoa(String.fromCharCode(...new Uint8Array(signatureArrayBuffer)))\n    .replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n  \n  return `${headerB64}.${payloadB64}.${signatureB64}`\n}\n\nasync function processPendingPayments(db: any, email: string, userId: number, stripeSecretKey?: string) {\n  try {\n    // Check for pending payments for this email\n    const pendingPayments = await db.prepare(`\n      SELECT * FROM pending_payments \n      WHERE email = ? AND processed = 0\n    `).bind(email).all()\n\n    if (pendingPayments.results && pendingPayments.results.length > 0) {\n      console.log(`Found ${pendingPayments.results.length} pending payment(s) for ${email}`)\n      \n      for (const payment of pendingPayments.results) {\n        try {\n          if (stripeSecretKey) {\n            // Get the session details from Stripe\n            const sessionResponse = await fetch(`https://api.stripe.com/v1/checkout/sessions/${payment.session_id}`, {\n              headers: {\n                'Authorization': `Bearer ${stripeSecretKey}`,\n              },\n            })\n\n            if (sessionResponse.ok) {\n              const session = await sessionResponse.json()\n              \n              // Create Stripe customer for this user\n              const customerResponse = await fetch('https://api.stripe.com/v1/customers', {\n                method: 'POST',\n                headers: {\n                  'Authorization': `Bearer ${stripeSecretKey}`,\n                  'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: new URLSearchParams({\n                  email: email,\n                  name: payment.customer_name || 'Customer',\n                  'metadata[user_id]': userId.toString(),\n                  'metadata[session_id]': payment.session_id,\n                }),\n              })\n\n              if (customerResponse.ok) {\n                const customer = await customerResponse.json()\n                \n                // Update user with Stripe customer ID\n                await db.prepare(`\n                  UPDATE users \n                  SET stripe_customer_id = ?, updated_at = datetime('now')\n                  WHERE id = ?\n                `).bind(customer.id, userId).run()\n                \n                // Import the functions from webhook (we'll need to refactor this)\n                // For now, let's create a simple subscription update\n                let subscriptionStatus = 'free'\n                if (payment.amount_total === 1999) subscriptionStatus = 'basic'\n                else if (payment.amount_total === 3999) subscriptionStatus = 'active'\n                else if (payment.amount_total === 7900) subscriptionStatus = 'lifetime'\n                \n                await db.prepare(`\n                  UPDATE users \n                  SET \n                    subscription_status = ?, \n                    subscription_expires_at = datetime('now', '+1 year'),\n                    updated_at = datetime('now')\n                  WHERE id = ?\n                `).bind(subscriptionStatus, userId).run()\n                \n                console.log(`Processed pending payment for user ${userId}, customer ${customer.id}`)\n              }\n            }\n          }\n          \n          // Mark payment as processed\n          await db.prepare(`\n            UPDATE pending_payments \n            SET processed = 1 \n            WHERE id = ?\n          `).bind(payment.id).run()\n          \n        } catch (error) {\n          console.error('Error processing pending payment:', error)\n        }\n      }\n    }\n  } catch (error) {\n    console.error('Error checking for pending payments:', error)\n  }\n}\n\nexport async function onRequestGet(context: any) {\n  try {\n    const { request, env } = context\n    const url = new URL(request.url)\n    const code = url.searchParams.get('code')\n    const state = url.searchParams.get('state')\n    const error = url.searchParams.get('error')\n\n    // Handle OAuth errors\n    if (error) {\n      console.error('GitHub OAuth error:', error)\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=oauth_denied` }\n      })\n    }\n\n    if (!code || !state) {\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=invalid_request` }\n      })\n    }\n\n    // Verify state parameter (CSRF protection)\n    const cookies = parseCookies(request.headers.get('Cookie'))\n    const storedState = cookies['oauth_state']\n    \n    if (!storedState || storedState !== state) {\n      console.error('OAuth state verification failed')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=invalid_state` }\n      })\n    }\n\n    const GITHUB_CLIENT_ID = env.GITHUB_CLIENT_ID\n    const GITHUB_CLIENT_SECRET = env.GITHUB_CLIENT_SECRET\n\n    if (!GITHUB_CLIENT_ID || !GITHUB_CLIENT_SECRET) {\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=oauth_not_configured` }\n      })\n    }\n\n    // Exchange code for access token\n    const tokenResponse = await fetch('https://github.com/login/oauth/access_token', {\n      method: 'POST',\n      headers: { \n        'Accept': 'application/json',\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: new URLSearchParams({\n        client_id: GITHUB_CLIENT_ID,\n        client_secret: GITHUB_CLIENT_SECRET,\n        code: code,\n      }),\n    })\n\n    if (!tokenResponse.ok) {\n      console.error('Failed to exchange code for token:', await tokenResponse.text())\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=token_exchange_failed` }\n      })\n    }\n\n    const tokenData = await tokenResponse.json()\n    const accessToken = tokenData.access_token\n\n    if (!accessToken) {\n      console.error('No access token received from GitHub')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=token_exchange_failed` }\n      })\n    }\n\n    // Get user info from GitHub\n    const userInfoResponse = await fetch('https://api.github.com/user', {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Accept': 'application/vnd.github.v3+json',\n        'User-Agent': 'MorseXpress-App'\n      }\n    })\n\n    if (!userInfoResponse.ok) {\n      console.error('Failed to get user info from GitHub')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=user_info_failed` }\n      })\n    }\n\n    const userInfo: GitHubUserInfo = await userInfoResponse.json()\n\n    // If user's email is not public, get it from the emails endpoint\n    let userEmail: string | undefined = userInfo.email\n    if (!userEmail) {\n      const emailsResponse = await fetch('https://api.github.com/user/emails', {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Accept': 'application/vnd.github.v3+json',\n          'User-Agent': 'MorseXpress-App'\n        }\n      })\n\n      if (emailsResponse.ok) {\n        const emails: GitHubEmailInfo[] = await emailsResponse.json()\n        const primaryEmail = emails.find(e => e.primary && e.verified)\n        userEmail = primaryEmail?.email || emails.find(e => e.verified)?.email\n      }\n    }\n\n    // Verify email is available\n    if (!userEmail) {\n      console.error('GitHub account email not available')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=email_not_provided` }\n      })\n    }\n\n    // Get database from environment\n    const db = env.DB\n    if (!db) {\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=database_not_available` }\n      })\n    }\n\n    // Create or update user with GitHub login method  \n    const createUser = async (db: any, email: string, loginMethod: string = 'github') => {\n      const stmt = db.prepare(`\n        INSERT OR IGNORE INTO users (email, preferred_login_method, created_at, updated_at)\n        VALUES (?, ?, datetime('now'), datetime('now'))\n      `)\n      const result = await stmt.bind(email, loginMethod).run()\n      \n      // Get the user (either just created or existing)\n      const user = await db.prepare('SELECT * FROM users WHERE email = ?').bind(email).first()\n      \n      // Check if this is a new user by checking if the insert actually happened\n      // SQLite changes will be > 0 if a row was inserted\n      const isNewUser = result.changes > 0\n      \n      return { user, isNewUser }\n    }\n\n    const updatePreferredLoginMethod = async (db: any, email: string, method: string) => {\n      await db.prepare(`\n        UPDATE users \n        SET preferred_login_method = ?, updated_at = datetime('now')\n        WHERE email = ?\n      `).bind(method, email).run()\n    }\n\n    // Create or update user\n    const { user, isNewUser } = await createUser(db, userEmail!.toLowerCase(), 'github')\n\n    // Update user's preferred login method\n    await updatePreferredLoginMethod(db, userEmail!.toLowerCase(), 'github')\n\n    // Check for pending payments after user creation/update\n    await processPendingPayments(db, userEmail!.toLowerCase(), user.id, env.STRIPE_SECRET_KEY)\n\n    // Send email notification for new users\n    if (isNewUser) {\n      const resendApiKey = env.RESEND_API_KEY\n      if (resendApiKey) {\n        try {\n          const { sendNewUserNotification } = await import('../shared/email-notifications')\n          await sendNewUserNotification(user.email, 'github', resendApiKey)\n        } catch (error) {\n          console.error('Failed to send new user notification:', error)\n          // Continue with normal flow even if email fails\n        }\n      } else {\n        console.log('New user registered but RESEND_API_KEY not configured - email notification skipped')\n      }\n    }\n\n    // Generate JWT token\n    const jwtSecret = env.JWT_SECRET\n    if (!jwtSecret) {\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=jwt_not_configured` }\n      })\n    }\n\n    const jwtToken = await signJwt(\n      {\n        sub: user.id.toString(),\n        email: user.email,\n        login_method: 'github',\n      },\n      jwtSecret,\n      7 * 24 * 60 * 60 // 7 days\n    )\n\n    // Create HTML response with localStorage and redirect\n    const html = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>Redirecting...</title>\n      </head>\n      <body>\n        <script>\n          localStorage.setItem('lastLoginMethod', 'github');\n          localStorage.setItem('lastLoginTime', new Date().toISOString());\n          window.location.href = '${env.SITE_URL || 'http://localhost:3000'}/auth';\n        </script>\n        <p>Redirecting...</p>\n      </body>\n      </html>\n    `\n    \n    // Set cookie with appropriate security settings\n    const isProduction = env.SITE_URL?.startsWith('https://') || false\n    const secureFlag = isProduction ? 'Secure; ' : ''\n    \n    // Set cookies using Headers object for proper multiple cookie handling\n    const headers = new Headers({\n      'Content-Type': 'text/html'\n    })\n    \n    // Set auth token cookie\n    headers.append('Set-Cookie', `auth-token=${jwtToken}; HttpOnly; ${secureFlag}SameSite=Lax; Max-Age=${7 * 24 * 60 * 60}; Path=/`)\n    \n    // Clear oauth_state cookie\n    headers.append('Set-Cookie', `oauth_state=; HttpOnly; ${secureFlag}SameSite=Lax; Max-Age=0; Path=/`)\n\n    return new Response(html, {\n      status: 200,\n      headers,\n    })\n\n  } catch (error) {\n    console.error('Error processing GitHub OAuth callback:', error)\n    return new Response(null, {\n      status: 302,\n      headers: { 'Location': `${context.env.SITE_URL || 'http://localhost:3000'}/auth?error=internal_error` }\n    })\n  }\n} ", "interface GoogleUserInfo {\n  id: string\n  email: string\n  name: string\n  picture: string\n  verified_email: boolean\n}\n\nfunction parseCookies(cookieHeader: string | null): Record<string, string> {\n  const cookies: Record<string, string> = {}\n  if (!cookieHeader) return cookies\n  \n  cookieHeader.split(';').forEach(cookie => {\n    const parts = cookie.trim().split('=')\n    if (parts.length === 2) {\n      cookies[parts[0]] = parts[1]\n    }\n  })\n  return cookies\n}\n\n// JWT function using standard base64 encoding (not URL-safe)\nasync function signJwt(payload: any, secret: string, expiresIn: number = 7 * 24 * 60 * 60): Promise<string> {\n  const now = Math.floor(Date.now() / 1000)\n  const jwtPayload = {\n    ...payload,\n    iat: now,\n    exp: now + expiresIn\n  }\n\n  const headerB64 = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }))\n  const payloadB64 = btoa(JSON.stringify(jwtPayload))\n  const data = `${headerB64}.${payloadB64}`\n\n  const encoder = new TextEncoder()\n  const key = await crypto.subtle.importKey(\n    'raw',\n    encoder.encode(secret),\n    { name: 'HMAC', hash: 'SHA-256' },\n    false,\n    ['sign']\n  )\n\n  const signature = await crypto.subtle.sign('HMAC', key, encoder.encode(data))\n  const signatureB64 = btoa(String.fromCharCode(...new Uint8Array(signature)))\n\n  return `${data}.${signatureB64}`\n}\n\nasync function processPendingPayments(db: any, email: string, userId: number, stripeSecretKey?: string) {\n  try {\n    // Check for pending payments for this email\n    const pendingPayments = await db.prepare(`\n      SELECT * FROM pending_payments \n      WHERE email = ? AND processed = 0\n    `).bind(email).all()\n\n    if (pendingPayments.results && pendingPayments.results.length > 0) {\n      console.log(`Found ${pendingPayments.results.length} pending payment(s) for ${email}`)\n      \n      for (const payment of pendingPayments.results) {\n        try {\n          if (stripeSecretKey) {\n            // Get the session details from Stripe\n            const sessionResponse = await fetch(`https://api.stripe.com/v1/checkout/sessions/${payment.session_id}`, {\n              headers: {\n                'Authorization': `Bearer ${stripeSecretKey}`,\n              },\n            })\n\n            if (sessionResponse.ok) {\n              const session = await sessionResponse.json()\n              \n              // Create Stripe customer for this user\n              const customerResponse = await fetch('https://api.stripe.com/v1/customers', {\n                method: 'POST',\n                headers: {\n                  'Authorization': `Bearer ${stripeSecretKey}`,\n                  'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: new URLSearchParams({\n                  email: email,\n                  name: payment.customer_name || 'Customer',\n                  'metadata[user_id]': userId.toString(),\n                  'metadata[session_id]': payment.session_id,\n                }),\n              })\n\n              if (customerResponse.ok) {\n                const customer = await customerResponse.json()\n                \n                // Update user with Stripe customer ID\n                await db.prepare(`\n                  UPDATE users \n                  SET stripe_customer_id = ?, updated_at = datetime('now')\n                  WHERE id = ?\n                `).bind(customer.id, userId).run()\n                \n                // Import the functions from webhook (we'll need to refactor this)\n                // For now, let's create a simple subscription update\n                let subscriptionStatus = 'free'\n                if (payment.amount_total === 1999) subscriptionStatus = 'basic'\n                else if (payment.amount_total === 3999) subscriptionStatus = 'active'\n                else if (payment.amount_total === 7900) subscriptionStatus = 'lifetime'\n                \n                await db.prepare(`\n                  UPDATE users \n                  SET \n                    subscription_status = ?, \n                    subscription_expires_at = datetime('now', '+1 year'),\n                    updated_at = datetime('now')\n                  WHERE id = ?\n                `).bind(subscriptionStatus, userId).run()\n                \n                console.log(`Processed pending payment for user ${userId}, customer ${customer.id}`)\n              }\n            }\n          }\n          \n          // Mark payment as processed\n          await db.prepare(`\n            UPDATE pending_payments \n            SET processed = 1 \n            WHERE id = ?\n          `).bind(payment.id).run()\n          \n        } catch (error) {\n          console.error('Error processing pending payment:', error)\n        }\n      }\n    }\n  } catch (error) {\n    console.error('Error checking for pending payments:', error)\n  }\n}\n\nexport async function onRequestGet(context: any) {\n  try {\n    const { request, env } = context\n    const url = new URL(request.url)\n    const code = url.searchParams.get('code')\n    const state = url.searchParams.get('state')\n    const paidParam = url.searchParams.get('paid')\n    const sessionId = url.searchParams.get('session_id')\n    const error = url.searchParams.get('error')\n\n    const GOOGLE_CLIENT_ID = env.GOOGLE_CLIENT_ID\n    const GOOGLE_CLIENT_SECRET = env.GOOGLE_CLIENT_SECRET\n    const GOOGLE_REDIRECT_URI = `${env.SITE_URL || 'http://localhost:3000'}/api/auth/google/callback`\n\n    // Check for OAuth errors\n    if (error) {\n      console.error('Google OAuth error:', error)\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=oauth_denied` }\n      })\n    }\n\n    // Verify required parameters\n    if (!code || !state) {\n      console.error('Missing code or state parameter')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=invalid_request` }\n      })\n    }\n\n    // Verify state parameter for CSRF protection\n    const cookies = parseCookies(request.headers.get('Cookie'))\n    const storedState = cookies['oauth_state']\n    if (!storedState || state !== storedState) {\n      console.error('Invalid state parameter')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=invalid_state` }\n      })\n    }\n\n    // Check if OAuth is configured\n    if (!GOOGLE_CLIENT_ID || !GOOGLE_CLIENT_SECRET) {\n      console.error('Google OAuth not configured')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=oauth_not_configured` }\n      })\n    }\n\n    // Exchange code for access token\n    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      body: new URLSearchParams({\n        client_id: GOOGLE_CLIENT_ID,\n        client_secret: GOOGLE_CLIENT_SECRET,\n        code: code,\n        grant_type: 'authorization_code',\n        redirect_uri: GOOGLE_REDIRECT_URI,\n      }),\n    })\n\n    if (!tokenResponse.ok) {\n      console.error('Failed to exchange code for token:', await tokenResponse.text())\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=token_exchange_failed` }\n      })\n    }\n\n    const tokenData = await tokenResponse.json()\n    const accessToken = tokenData.access_token\n\n    // Get user info from Google\n    const userInfoResponse = await fetch(\n      `https://www.googleapis.com/oauth2/v2/userinfo?access_token=${accessToken}`\n    )\n\n    if (!userInfoResponse.ok) {\n      console.error('Failed to get user info from Google')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=user_info_failed` }\n      })\n    }\n\n    const userInfo: GoogleUserInfo = await userInfoResponse.json()\n\n    // Verify email is provided and verified\n    if (!userInfo.email || !userInfo.verified_email) {\n      console.error('Google account email not verified')\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=email_not_verified` }\n      })\n    }\n\n    // Get database from environment\n    const db = env.DB\n    if (!db) {\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=database_not_available` }\n      })\n    }\n\n    // Create or update user with Google login method\n    const createUser = async (db: any, email: string, loginMethod: string = 'google') => {\n      const stmt = db.prepare(`\n        INSERT OR IGNORE INTO users (email, preferred_login_method, created_at, updated_at)\n        VALUES (?, ?, datetime('now'), datetime('now'))\n      `)\n      const result = await stmt.bind(email, loginMethod).run()\n      \n      // Get the user (either just created or existing)\n      const user = await db.prepare('SELECT * FROM users WHERE email = ?').bind(email).first()\n      \n      // Check if this is a new user by checking if the insert actually happened\n      // SQLite changes will be > 0 if a row was inserted\n      const isNewUser = result.changes > 0\n      \n      return { user, isNewUser }\n    }\n\n    const updatePreferredLoginMethod = async (db: any, email: string, method: string) => {\n      await db.prepare(`\n        UPDATE users \n        SET preferred_login_method = ?, updated_at = datetime('now')\n        WHERE email = ?\n      `).bind(method, email).run()\n    }\n\n    // If this is a paid user, try to link with Stripe customer\n    if (paidParam === 'true' && sessionId) {\n      try {\n        const stripeSecretKey = env.STRIPE_SECRET_KEY\n        if (stripeSecretKey) {\n          const sessionResponse = await fetch(`https://api.stripe.com/v1/checkout/sessions/${sessionId}`, {\n            headers: {\n              'Authorization': `Bearer ${stripeSecretKey}`,\n            },\n          })\n          \n          if (sessionResponse.ok) {\n            const session = await sessionResponse.json()\n            if (session.customer) {\n              // Update user with Stripe customer ID\n              await db.prepare(`\n                UPDATE users \n                SET stripe_customer_id = ?, updated_at = datetime('now')\n                WHERE email = ?\n              `).bind(session.customer, userInfo.email.toLowerCase()).run()\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error linking Stripe customer:', error)\n        // Continue without Stripe customer ID\n      }\n    }\n\n    // Create or update user\n    const { user, isNewUser } = await createUser(db, userInfo.email.toLowerCase(), 'google')\n\n    // Update user's preferred login method\n    await updatePreferredLoginMethod(db, userInfo.email.toLowerCase(), 'google')\n\n    // Check for pending payments after user creation/update\n    await processPendingPayments(db, userInfo.email.toLowerCase(), user.id, env.STRIPE_SECRET_KEY)\n\n    // Send email notification for new users\n    if (isNewUser) {\n      const resendApiKey = env.RESEND_API_KEY\n      if (resendApiKey) {\n        try {\n          const { sendNewUserNotification } = await import('../shared/email-notifications')\n          await sendNewUserNotification(user.email, 'google', resendApiKey)\n        } catch (error) {\n          console.error('Failed to send new user notification:', error)\n          // Continue with normal flow even if email fails\n        }\n      } else {\n        console.log('New user registered but RESEND_API_KEY not configured - email notification skipped')\n      }\n    }\n\n    // Generate JWT token\n    const jwtSecret = env.JWT_SECRET\n    if (!jwtSecret) {\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=jwt_not_configured` }\n      })\n    }\n\n    const jwtToken = await signJwt(\n      {\n        sub: user.id.toString(),\n        email: user.email,\n        login_method: 'google',\n      },\n      jwtSecret,\n      7 * 24 * 60 * 60 // 7 days\n    )\n\n    // Determine redirect URL based on whether this is a paid user\n    let redirectUrl = `${env.SITE_URL || 'http://localhost:3000'}/`\n    if (paidParam === 'true') {\n      redirectUrl = `${env.SITE_URL || 'http://localhost:3000'}/?paid=true&session_id=${sessionId}`\n    }\n\n    // Create HTML response with localStorage and redirect\n    const html = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>Redirecting...</title>\n      </head>\n      <body>\n        <script>\n          localStorage.setItem('lastLoginMethod', 'google');\n          localStorage.setItem('lastLoginTime', new Date().toISOString());\n          ${paidParam === 'true' ? `localStorage.setItem('paidUser', 'true');` : ''}\n          // Force a hard refresh to ensure auth state is updated\n          window.location.replace('${redirectUrl}');\n        </script>\n        <p>Redirecting...</p>\n      </body>\n      </html>\n    `\n    \n    // Set cookie with appropriate security settings\n    const isProduction = env.SITE_URL?.startsWith('https://') || false\n    const secureFlag = isProduction ? 'Secure; ' : ''\n    \n    // Set cookies using Headers object for proper multiple cookie handling\n    const headers = new Headers({\n      'Content-Type': 'text/html'\n    })\n    \n    // URL encode the JWT token to prevent issues with = signs in cookies\n    const encodedToken = encodeURIComponent(jwtToken)\n    const cookieValue = `auth-token=${encodedToken}; HttpOnly; ${secureFlag}SameSite=Lax; Max-Age=${7 * 24 * 60 * 60}; Path=/`\n    \n    // Set auth token cookie\n    headers.append('Set-Cookie', cookieValue)\n    \n    // Clear oauth_state cookie\n    headers.append('Set-Cookie', `oauth_state=; HttpOnly; ${secureFlag}SameSite=Lax; Max-Age=0; Path=/`)\n\n    return new Response(html, {\n      status: 200,\n      headers,\n    })\n\n  } catch (error) {\n    console.error('Error processing Google OAuth callback:', error)\n    return new Response(null, {\n      status: 302,\n      headers: { 'Location': `${context.env.SITE_URL || 'http://localhost:3000'}/auth?error=internal_error` }\n    })\n  }\n} ", "import { NextRequest } from 'next/server'\n\nexport async function onRequestGet(context: { request: Request; env: any; params: { courseId: string } }) {\n  try {\n    const { request, env, params } = context\n    const { searchParams } = new URL(request.url)\n    const userId = searchParams.get('userId')\n    \n    if (!userId) {\n      return new Response(JSON.stringify({ \n        success: false, \n        error: 'User ID is required' \n      }), { \n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    const db = env.DB\n    \n    // Get or create progress record for this user and course\n    let progress = await db.prepare(`\n      SELECT * FROM user_course_progress \n      WHERE user_id = ? AND course_id = ?\n    `).bind(userId, params.courseId).first()\n\n    if (!progress) {\n      // Create initial progress record\n      const result = await db.prepare(`\n        INSERT INTO user_course_progress (user_id, course_id, current_lesson_id, current_section_id, completed_lessons)\n        VALUES (?, ?, ?, ?, ?)\n      `).bind(userId, params.courseId, null, null, '[]').run()\n      \n      progress = {\n        user_id: userId,\n        course_id: params.courseId,\n        current_lesson_id: null,\n        current_section_id: null,\n        completed_lessons: '[]',\n        last_accessed_at: new Date().toISOString(),\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }\n    }\n\n    // Parse completed lessons JSON\n    const completedLessons = JSON.parse(progress.completed_lessons || '[]')\n\n    return new Response(JSON.stringify({\n      success: true,\n      data: {\n        currentLessonId: progress.current_lesson_id,\n        currentSectionId: progress.current_section_id,\n        completedLessons,\n        lastAccessedAt: progress.last_accessed_at\n      }\n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    })\n\n  } catch (error) {\n    console.error('Error fetching user progress:', error)\n    return new Response(JSON.stringify({ \n      success: false, \n      error: 'Failed to fetch user progress' \n    }), { \n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n}\n\nexport async function onRequestPost(context: { request: Request; env: any; params: { courseId: string } }) {\n  try {\n    const { request, env, params } = context\n    const { searchParams } = new URL(request.url)\n    const userId = searchParams.get('userId')\n    \n    if (!userId) {\n      return new Response(JSON.stringify({ \n        success: false, \n        error: 'User ID is required' \n      }), { \n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    const body = await request.json()\n    const { lessonId, sectionId, action } = body\n\n    if (!lessonId || !action) {\n      return new Response(JSON.stringify({ \n        success: false, \n        error: 'Lesson ID and action are required' \n      }), { \n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    const db = env.DB\n    \n    // Get current progress\n    let progress = await db.prepare(`\n      SELECT * FROM user_course_progress \n      WHERE user_id = ? AND course_id = ?\n    `).bind(userId, params.courseId).first()\n\n    if (!progress) {\n      // Create initial progress record\n      await db.prepare(`\n        INSERT INTO user_course_progress (user_id, course_id, current_lesson_id, current_section_id, completed_lessons)\n        VALUES (?, ?, ?, ?, ?)\n      `).bind(userId, params.courseId, lessonId, sectionId || null, '[]').run()\n      \n      progress = {\n        user_id: userId,\n        course_id: params.courseId,\n        current_lesson_id: lessonId,\n        current_section_id: sectionId || null,\n        completed_lessons: '[]',\n        last_accessed_at: new Date().toISOString(),\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }\n    }\n\n    // Parse current completed lessons\n    const completedLessons = JSON.parse(progress.completed_lessons || '[]')\n    let updatedCompletedLessons = [...completedLessons]\n    let updatedCurrentLessonId = progress.current_lesson_id\n    let updatedCurrentSectionId = progress.current_section_id\n\n    // Handle different actions\n    switch (action) {\n      case 'start':\n        // User started a lesson\n        updatedCurrentLessonId = lessonId\n        updatedCurrentSectionId = sectionId || null\n        break\n        \n      case 'complete':\n        // User completed a lesson\n        if (!completedLessons.includes(lessonId)) {\n          updatedCompletedLessons.push(lessonId)\n        }\n        updatedCurrentLessonId = lessonId\n        updatedCurrentSectionId = sectionId || null\n        break\n        \n      case 'update_section':\n        // User updated section within a lesson\n        updatedCurrentLessonId = lessonId\n        updatedCurrentSectionId = sectionId || null\n        break\n        \n      default:\n        return new Response(JSON.stringify({ \n          success: false, \n          error: 'Invalid action' \n        }), { \n          status: 400,\n          headers: { 'Content-Type': 'application/json' }\n        })\n    }\n\n    // Update progress in database\n    await db.prepare(`\n      UPDATE user_course_progress \n      SET current_lesson_id = ?, \n          current_section_id = ?, \n          completed_lessons = ?, \n          last_accessed_at = CURRENT_TIMESTAMP,\n          updated_at = CURRENT_TIMESTAMP\n      WHERE user_id = ? AND course_id = ?\n    `).bind(\n      updatedCurrentLessonId,\n      updatedCurrentSectionId,\n      JSON.stringify(updatedCompletedLessons),\n      userId,\n      params.courseId\n    ).run()\n\n    return new Response(JSON.stringify({\n      success: true,\n      data: {\n        currentLessonId: updatedCurrentLessonId,\n        currentSectionId: updatedCurrentSectionId,\n        completedLessons: updatedCompletedLessons,\n        lastAccessedAt: new Date().toISOString()\n      }\n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    })\n\n  } catch (error) {\n    console.error('Error updating user progress:', error)\n    return new Response(JSON.stringify({ \n      success: false, \n      error: 'Failed to update user progress' \n    }), { \n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n} ", "export async function onRequestGet(context: any) {\n  try {\n    const { request, env } = context\n    \n    const FACEBOOK_APP_ID = env.FACEBOOK_APP_ID\n    const FACEBOOK_REDIRECT_URI = `${env.SITE_URL || 'http://localhost:3000'}/api/auth/facebook/callback`\n\n    if (!FACEBOOK_APP_ID) {\n      console.error('FACEBOOK_APP_ID not configured')\n      return new Response(JSON.stringify({ error: 'Facebook OAuth not configured' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    // Generate state parameter for CSRF protection\n    const state = Math.random().toString(36).substring(2, 15)\n    \n    // Create OAuth URL\n    const authUrl = `https://www.facebook.com/v18.0/dialog/oauth?` +\n      `client_id=${FACEBOOK_APP_ID}&` +\n      `redirect_uri=${encodeURIComponent(FACEBOOK_REDIRECT_URI)}&` +\n      `response_type=code&` +\n      `scope=${encodeURIComponent('email')}&` +\n      `state=${state}`\n\n    // Create response with redirect and state cookie\n    const response = new Response(null, {\n      status: 302,\n      headers: {\n        'Location': authUrl,\n        'Set-Cookie': `oauth_state=${state}; HttpOnly; ${env.SITE_URL?.startsWith('https://') ? 'Secure; ' : ''}SameSite=Lax; Max-Age=600; Path=/`\n      }\n    })\n\n    return response\n\n  } catch (error) {\n    console.error('Error initiating Facebook OAuth:', error)\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n} ", "function generateState(): string {\n  // Generate a random state for CSRF protection\n  const array = new Uint8Array(32)\n  crypto.getRandomValues(array)\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('')\n}\n\nexport async function onRequestGet(context: any) {\n  try {\n    const { env } = context\n\n    const GITHUB_CLIENT_ID = env.GITHUB_CLIENT_ID\n    const GITHUB_REDIRECT_URI = `${env.SITE_URL || 'http://localhost:3000'}/api/auth/github/callback`\n\n    if (!GITHUB_CLIENT_ID) {\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=oauth_not_configured` }\n      })\n    }\n\n    // Generate state for CSRF protection\n    const state = generateState()\n\n    // GitHub OAuth URL\n    const authUrl = `https://github.com/login/oauth/authorize?client_id=${GITHUB_CLIENT_ID}&redirect_uri=${encodeURIComponent(GITHUB_REDIRECT_URI)}&scope=user:email&state=${state}`\n\n    return new Response(null, {\n      status: 302,\n      headers: {\n        'Location': authUrl,\n        'Set-Cookie': `oauth_state=${state}; HttpOnly; ${env.SITE_URL?.startsWith('https://') ? 'Secure; ' : ''}SameSite=Lax; Max-Age=600; Path=/`\n      }\n    })\n\n  } catch (error) {\n    console.error('Error initiating GitHub OAuth:', error)\n    return new Response(null, {\n      status: 302,\n      headers: { 'Location': `${context.env.SITE_URL || 'http://localhost:3000'}/auth?error=oauth_not_configured` }\n    })\n  }\n} ", "export async function onRequestGet(context: any) {\n  try {\n    const { request, env } = context\n    \n    const GOOGLE_CLIENT_ID = env.GOOGLE_CLIENT_ID\n    const GOOGLE_REDIRECT_URI = `${env.SITE_URL || 'http://localhost:3000'}/api/auth/google/callback`\n\n    if (!GOOGLE_CLIENT_ID) {\n      console.error('GOOGLE_CLIENT_ID not configured')\n      return new Response(JSON.stringify({ error: 'Google OAuth not configured' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    // Generate state parameter for CSRF protection\n    const state = Math.random().toString(36).substring(2, 15)\n    \n    // Create OAuth URL\n    const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?` +\n      `client_id=${GOOGLE_CLIENT_ID}&` +\n      `redirect_uri=${encodeURIComponent(GOOGLE_REDIRECT_URI)}&` +\n      `response_type=code&` +\n      `scope=${encodeURIComponent('openid email profile')}&` +\n      `state=${state}&` +\n      `access_type=offline&` +\n      `prompt=consent`\n\n    // Create response with redirect and state cookie\n    const response = new Response(null, {\n      status: 302,\n      headers: {\n        'Location': authUrl,\n        'Set-Cookie': `oauth_state=${state}; HttpOnly; ${env.SITE_URL?.startsWith('https://') ? 'Secure; ' : ''}SameSite=Lax; Max-Age=600; Path=/`\n      }\n    })\n\n    return response\n\n  } catch (error) {\n    console.error('Error initiating Google OAuth:', error)\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n} ", "// Edge-compatible JWT utilities using Web Crypto API\n// No Node.js dependencies, works in Cloudflare Workers/Pages\n\nconst JWT_ALGORITHM = 'HS256'\nconst JWT_HEADER = { alg: JWT_ALGORITHM, typ: 'JWT' }\n\nexport interface JWTPayload {\n  sub: string // user ID\n  email: string\n  login_method?: string // login method used (email, google, etc.)\n  iat: number // issued at\n  exp: number // expiration\n}\n\nexport interface User {\n  id: string\n  email: string\n  login_method?: string\n}\n\nexport async function signJwt(payload: Omit<JWTPayload, 'iat' | 'exp'>, secret: string, expiresIn: number = 7 * 24 * 60 * 60): Promise<string> {\n  const now = Math.floor(Date.now() / 1000)\n  const jwtPayload: JWTPayload = {\n    ...payload,\n    iat: now,\n    exp: now + expiresIn\n  }\n\n  const headerB64 = btoa(JSON.stringify(JWT_HEADER))\n  const payloadB64 = btoa(JSON.stringify(jwtPayload))\n  const data = `${headerB64}.${payloadB64}`\n\n  const encoder = new TextEncoder()\n  const key = await crypto.subtle.importKey(\n    'raw',\n    encoder.encode(secret),\n    { name: 'HMAC', hash: 'SHA-256' },\n    false,\n    ['sign']\n  )\n\n  const signature = await crypto.subtle.sign('HMAC', key, encoder.encode(data))\n  const signatureB64 = btoa(String.fromCharCode(...new Uint8Array(signature)))\n\n  return `${data}.${signatureB64}`\n}\n\nexport async function verifyJwt(token: string, secret: string): Promise<JWTPayload | null> {\n  try {\n    const parts = token.split('.')\n    if (parts.length !== 3) {\n      return null\n    }\n\n    const [headerB64, payloadB64, signatureB64] = parts\n    const data = `${headerB64}.${payloadB64}`\n\n    // Verify signature\n    const encoder = new TextEncoder()\n    const key = await crypto.subtle.importKey(\n      'raw',\n      encoder.encode(secret),\n      { name: 'HMAC', hash: 'SHA-256' },\n      false,\n      ['verify']\n    )\n\n    const signature = Uint8Array.from(atob(signatureB64), c => c.charCodeAt(0))\n    const isValid = await crypto.subtle.verify('HMAC', key, signature, encoder.encode(data))\n\n    if (!isValid) {\n      return null\n    }\n\n    // Parse payload\n    const payload = JSON.parse(atob(payloadB64)) as JWTPayload\n\n    // Check expiration\n    const now = Math.floor(Date.now() / 1000)\n    if (payload.exp < now) {\n      return null\n    }\n\n    return payload\n  } catch {\n    return null\n  }\n}\n\n/**\n * Validate JWT and return payload (alias for verifyJwt for consistency)\n */\nexport async function validateJWT(token: string, secret: string): Promise<JWTPayload> {\n  const payload = await verifyJwt(token, secret)\n  if (!payload) {\n    throw new Error('Invalid or expired JWT token')\n  }\n  return payload\n}\n\n/**\n * Extract user information from JWT payload\n */\nexport async function getUserFromToken(payload: JWTPayload): Promise<User> {\n  // In a real implementation, you might want to fetch additional user data from database\n  // For now, we'll just return the basic info from the token\n  return {\n    id: payload.sub,\n    email: payload.email,\n    login_method: payload.login_method,\n  }\n}\n\nexport function generateToken(): string {\n  const array = new Uint8Array(32)\n  crypto.getRandomValues(array)\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('')\n} ", "import { verifyJwt } from '../../../src/lib/jwt'\n\n// Parse cookies from header\nfunction parseCookies(cookieHeader: string | null): { [key: string]: string } {\n  const cookies: { [key: string]: string } = {}\n  if (!cookieHeader) return cookies\n  \n  const cookiePairs = cookieHeader.split('; ')\n  for (const cookie of cookiePairs) {\n    const [name, ...rest] = cookie.split('=')\n    if (name && rest.length > 0) {\n      cookies[name] = rest.join('=') // Handle values with = signs\n    }\n  }\n  \n  return cookies\n}\n\n// GET - Get billing address\nexport async function onRequestGet(context: any) {\n  try {\n    const { request, env } = context\n    const cookies = parseCookies(request.headers.get('Cookie'))\n    const token = cookies['auth-token']\n\n    if (!token) {\n      return new Response(JSON.stringify({ error: 'No authentication token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    const jwtSecret = env.JWT_SECRET\n    if (!jwtSecret) {\n      return new Response(JSON.stringify({ error: 'JWT secret not configured' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    try {\n      const decoded = await verifyJwt(token, jwtSecret)\n      if (!decoded) {\n        return new Response(JSON.stringify({ error: 'Invalid token' }), {\n          status: 401,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n      \n      const db = env.DB\n      if (!db) {\n        return new Response(JSON.stringify({ error: 'Database not available' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      // Get billing address from database\n      const address = await db.prepare(`\n        SELECT line1, line2, city, state, postal_code, country\n        FROM user_billing_addresses \n        WHERE user_id = ?\n      `).bind(decoded.sub).first()\n\n      return new Response(JSON.stringify({ \n        address: address || null \n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      })\n\n    } catch (jwtError) {\n      return new Response(JSON.stringify({ error: 'Invalid or expired token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n  } catch (error) {\n    console.error('Error fetching billing address:', error)\n    return new Response(JSON.stringify({ error: 'Failed to fetch billing address' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n}\n\n// PUT - Update billing address\nexport async function onRequestPut(context: any) {\n  try {\n    const { request, env } = context\n    \n    // Get JWT token from cookie\n    const cookieHeader = request.headers.get('Cookie')\n    let token: string | null = null\n    \n    if (cookieHeader) {\n      const cookies = cookieHeader.split('; ')\n      const authCookie = cookies.find((c: string) => c.startsWith('auth-token='))\n      if (authCookie) {\n        token = authCookie.split('=')[1]\n      }\n    }\n\n    if (!token) {\n      return new Response(JSON.stringify({ error: 'No authentication token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    const jwtSecret = env.JWT_SECRET\n    if (!jwtSecret) {\n      return new Response(JSON.stringify({ error: 'JWT secret not configured' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    try {\n      const decoded = await verifyJwt(token, jwtSecret)\n      if (!decoded) {\n        return new Response(JSON.stringify({ error: 'Invalid token' }), {\n          status: 401,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      const { line1, line2, city, state, postalCode, country } = await request.json()\n\n      // Validate required fields\n      if (!line1 || !city || !postalCode || !country) {\n        return new Response(JSON.stringify({ error: 'Missing required fields' }), {\n          status: 400,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      const db = env.DB\n      if (!db) {\n        return new Response(JSON.stringify({ error: 'Database not available' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      // Upsert billing address\n      await db.prepare(`\n        INSERT INTO user_billing_addresses (user_id, line1, line2, city, state, postal_code, country, updated_at)\n        VALUES (?, ?, ?, ?, ?, ?, ?, datetime('now'))\n        ON CONFLICT(user_id) DO UPDATE SET\n          line1 = excluded.line1,\n          line2 = excluded.line2,\n          city = excluded.city,\n          state = excluded.state,\n          postal_code = excluded.postal_code,\n          country = excluded.country,\n          updated_at = datetime('now')\n      `).bind(decoded.sub, line1, line2 || null, city, state, postalCode, country).run()\n\n      return new Response(JSON.stringify({ \n        success: true,\n        address: { line1, line2, city, state, postalCode, country }\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      })\n\n    } catch (jwtError) {\n      return new Response(JSON.stringify({ error: 'Invalid or expired token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n  } catch (error) {\n    console.error('Error saving billing address:', error)\n    return new Response(JSON.stringify({ error: 'Failed to save billing address' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n} ", "import { verifyJwt } from '../../../src/lib/jwt'\n\nfunction parseCookies(cookieHeader: string | null): Record<string, string> {\n  if (!cookieHeader) return {}\n  \n  return cookieHeader.split(';').reduce((cookies, cookie) => {\n    const [name, value] = cookie.trim().split('=')\n    if (name && value) {\n      cookies[name] = decodeURIComponent(value)\n    }\n    return cookies\n  }, {} as Record<string, string>)\n}\n\nasync function getUserById(db: any, userId: string) {\n  try {\n    const user = await db.prepare(`\n      SELECT id, email, first_name, last_name, avatar_url, subscription_status, \n             stripe_customer_id, subscription_expires_at, trial_ends_at, \n             created_at, updated_at\n      FROM users \n      WHERE id = ?\n    `).bind(userId).first()\n    \n    return user\n  } catch (error) {\n    console.error('Error getting user by ID:', error)\n    return null\n  }\n}\n\n// GET - Check if user needs to complete profile\nexport async function onRequestGet(context: any) {\n  try {\n    const { request, env } = context\n    const cookies = parseCookies(request.headers.get('Cookie'))\n    const token = cookies['auth-token']\n\n    if (!token) {\n      return new Response(JSON.stringify({ error: 'No authentication token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    const jwtSecret = env.JWT_SECRET\n    if (!jwtSecret) {\n      return new Response(JSON.stringify({ error: 'JWT secret not configured' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    try {\n      const decoded = await verifyJwt(token, jwtSecret)\n      \n      if (!decoded) {\n        return new Response(JSON.stringify({ error: 'Invalid or expired token' }), {\n          status: 401,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n      \n      const db = env.DB\n      if (!db) {\n        return new Response(JSON.stringify({ error: 'Database not available' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      const user = await getUserById(db, decoded.sub)\n      if (!user) {\n        return new Response(JSON.stringify({ error: 'User not found' }), {\n          status: 404,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      // Check if user has personal data (first name and last name)\n      const hasPersonalData = !!(user.first_name && user.last_name)\n\n      // Check if user has billing address\n      const billingAddress = await db.prepare(`\n        SELECT line1, line2, city, state, postal_code, country\n        FROM user_billing_addresses \n        WHERE user_id = ?\n      `).bind(decoded.sub).first()\n\n      const hasBillingAddress = !!billingAddress\n\n      // Determine if profile completion is needed\n      const needsProfileCompletion = !hasPersonalData || !hasBillingAddress\n\n      return new Response(JSON.stringify({\n        needsProfileCompletion,\n        hasPersonalData,\n        hasBillingAddress,\n        isPaidUser: user.subscription_status !== 'free'\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      })\n\n    } catch (jwtError) {\n      return new Response(JSON.stringify({ error: 'Invalid or expired token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n  } catch (error) {\n    console.error('Error checking profile completion status:', error)\n    return new Response(JSON.stringify({ error: 'Failed to check profile completion status' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n}\n", "import { verifyJwt } from '../../../src/lib/jwt'\n\nasync function getUserInvoices(db: any, userId: string) {\n  return await db.prepare(`\n    SELECT * FROM stripe_invoices \n    WHERE user_id = ? \n    ORDER BY created_at DESC \n    LIMIT 50\n  `).bind(userId).all()\n}\n\n// GET - Get user invoices\nexport async function onRequestGet(context: any) {\n  try {\n    const { request, env } = context\n    \n    // Get JWT token from cookie (same logic as /api/user)\n    const cookieHeader = request.headers.get('Cookie')\n    let token: string | null = null\n    \n    if (cookieHeader) {\n      const cookies = cookieHeader.split('; ')\n      const authCookie = cookies.find((c: string) => c.startsWith('auth-token='))\n      if (authCookie) {\n        token = authCookie.split('=')[1]\n      }\n    }\n\n    if (!token) {\n      return new Response(JSON.stringify({ error: 'No authentication token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    const jwtSecret = env.JWT_SECRET\n    if (!jwtSecret) {\n      return new Response(JSON.stringify({ error: 'JWT secret not configured' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    try {\n      const decoded = await verifyJwt(token, jwtSecret)\n      if (!decoded) {\n        return new Response(JSON.stringify({ error: 'Invalid token' }), {\n          status: 401,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n      \n      const db = env.DB\n      if (!db) {\n        return new Response(JSON.stringify({ error: 'Database not available' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      const invoicesResult = await getUserInvoices(db, decoded.sub)\n      const invoices = invoicesResult.results || []\n\n      // Format invoices for frontend\n      const formattedInvoices = invoices.map((invoice: any) => ({\n        id: invoice.id.toString(),\n        stripeInvoiceId: invoice.stripe_invoice_id,\n        amountPaid: invoice.amount_paid,\n        currency: invoice.currency,\n        status: invoice.status,\n        description: invoice.description,\n        invoiceUrl: invoice.invoice_url,\n        hostedInvoiceUrl: invoice.hosted_invoice_url,\n        periodStart: invoice.period_start,\n        periodEnd: invoice.period_end,\n        createdAt: invoice.created_at,\n        // New invoice fields\n        invoiceNumber: invoice.invoice_number,\n        invoiceType: invoice.invoice_type,\n        invoiceDate: invoice.invoice_date,\n        totalAmount: invoice.total_amount,\n        creditNoteForInvoiceId: invoice.credit_note_for_invoice_id\n      }))\n\n      return new Response(JSON.stringify({\n        invoices: formattedInvoices\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      })\n\n    } catch (jwtError) {\n      return new Response(JSON.stringify({ error: 'Invalid or expired token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n  } catch (error) {\n    console.error('Error getting user invoices:', error)\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n} ", "import { verifyJwt } from '../../../src/lib/jwt'\n\nasync function getUserPreferences(db: any, userId: string) {\n  return await db.prepare(`\n    SELECT * FROM user_preferences \n    WHERE user_id = ?\n  `).bind(userId).first()\n}\n\nasync function createDefaultPreferences(db: any, userId: string) {\n  await db.prepare(`\n    INSERT INTO user_preferences (user_id, speed_preference, audio_enabled, notifications_enabled, theme, language)\n    VALUES (?, 20, 1, 1, 'light', 'en')\n  `).bind(userId).run()\n  \n  return await getUserPreferences(db, userId)\n}\n\n// GET - Get user preferences\nexport async function onRequestGet(context: any) {\n  try {\n    const { request, env } = context\n    \n    // Get JWT token from cookie (same logic as /api/user)\n    const cookieHeader = request.headers.get('Cookie')\n    let token: string | null = null\n    \n    if (cookieHeader) {\n      const cookies = cookieHeader.split('; ')\n      const authCookie = cookies.find((c: string) => c.startsWith('auth-token='))\n      if (authCookie) {\n        token = authCookie.split('=')[1]\n      }\n    }\n\n    if (!token) {\n      return new Response(JSON.stringify({ error: 'No authentication token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    const jwtSecret = env.JWT_SECRET\n    if (!jwtSecret) {\n      return new Response(JSON.stringify({ error: 'JWT secret not configured' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    try {\n      const decoded = await verifyJwt(token, jwtSecret)\n      if (!decoded) {\n        return new Response(JSON.stringify({ error: 'Invalid token' }), {\n          status: 401,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n      \n      const db = env.DB\n      if (!db) {\n        return new Response(JSON.stringify({ error: 'Database not available' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      let preferences = await getUserPreferences(db, decoded.sub)\n      \n      // Create default preferences if none exist\n      if (!preferences) {\n        preferences = await createDefaultPreferences(db, decoded.sub)\n      }\n\n      // Format preferences for frontend\n      const formattedPreferences = {\n        speedPreference: preferences.speed_preference,\n        audioEnabled: Boolean(preferences.audio_enabled),\n        notificationsEnabled: Boolean(preferences.notifications_enabled),\n        theme: preferences.theme,\n        language: preferences.language\n      }\n\n      return new Response(JSON.stringify({\n        preferences: formattedPreferences\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      })\n\n    } catch (jwtError) {\n      console.error('JWT Error:', jwtError)\n      return new Response(JSON.stringify({ error: 'Invalid or expired token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n  } catch (error) {\n    console.error('Error getting user preferences:', error)\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n} ", "/**\n * Invoice Generation Utilities\n * Handles sequential invoice numbering and invoice record creation\n */\n\n// Database interface for CloudFlare D1\ninterface D1Database {\n  prepare(query: string): D1PreparedStatement\n}\n\ninterface D1PreparedStatement {\n  bind(...values: unknown[]): D1PreparedStatement\n  first(): Promise<Record<string, unknown>>\n  all(): Promise<{ results: Record<string, unknown>[] }>\n  run(): Promise<{ success: boolean; meta: Record<string, unknown> }>\n}\n\ninterface BillingAddress {\n  line1: string\n  line2?: string\n  city: string\n  state: string\n  postalCode: string\n  country: string\n  addressType?: 'personal' | 'company'\n  companyName?: string\n  taxIdType?: string\n  taxIdNumber?: string\n}\n\ninterface InvoiceData {\n  userId: number\n  userEmail: string\n  userName: string\n  stripeCustomerId: string\n  stripeInvoiceId: string\n  amountPaid: number\n  currency: string\n  description: string\n  billingAddress: BillingAddress\n  invoiceType?: 'invoice' | 'credit_note'\n  creditNoteForInvoiceId?: number\n}\n\ninterface InvoiceRecord {\n  id: number\n  invoiceNumber: string\n  invoiceType: 'invoice' | 'credit_note'\n  userId: number\n  stripeInvoiceId: string\n  stripeCustomerId: string\n  amountPaid: number\n  currency: string\n  status: string\n  description: string\n  billingName: string\n  billingEmail: string\n  billingAddressLine1: string\n  billingAddressLine2?: string\n  billingCity: string\n  billingState: string\n  billingPostalCode: string\n  billingCountry: string\n  taxRate: number\n  taxAmount: number\n  taxDescription: string\n  subtotalAmount: number\n  totalAmount: number\n  invoiceDate: string\n  dueDate: string\n  creditNoteForInvoiceId?: number\n  createdAt: string\n}\n\n/**\n * Generates the next sequential invoice number\n */\nexport async function generateInvoiceNumber(db: D1Database): Promise<string> {\n  const currentYear = new Date().getFullYear()\n  \n  // Atomic increment of sequence number\n  const result = await db.prepare(`\n    INSERT INTO invoice_sequence (year, sequence_number) \n    VALUES (?, 1)\n    ON CONFLICT(year) DO UPDATE SET \n      sequence_number = sequence_number + 1,\n      last_updated = datetime('now')\n    RETURNING sequence_number\n  `).bind(currentYear).first()\n  \n  const sequenceNumber = result?.sequence_number as number\n  \n  // Format: INV-2025-001\n  return `INV-${currentYear}-${sequenceNumber.toString().padStart(3, '0')}`\n}\n\n/**\n * Calculates tax based on billing address and Hong Kong regulations\n */\nexport function calculateTax(amount: number, billingAddress: BillingAddress): {\n  taxRate: number\n  taxAmount: number\n  taxDescription: string\n  subtotalAmount: number\n  totalAmount: number\n} {\n  // Hong Kong tax logic\n  // For now, 0% tax on all transactions (foreign income exemption)\n  // Future: Could add logic for HK residents or different jurisdictions\n  \n  const taxRate = 0.00\n  const taxAmount = 0\n  const taxDescription = billingAddress.country === 'HK' \n    ? 'No tax applicable (Hong Kong)' \n    : 'No tax applicable (Hong Kong - Foreign Income)'\n  \n  const subtotalAmount = amount\n  const totalAmount = subtotalAmount + taxAmount\n  \n  return {\n    taxRate,\n    taxAmount,\n    taxDescription,\n    subtotalAmount,\n    totalAmount\n  }\n}\n\n/**\n * Creates a complete invoice record in the database\n */\nexport async function createInvoiceRecord(db: D1Database, invoiceData: InvoiceData): Promise<InvoiceRecord> {\n  const invoiceNumber = await generateInvoiceNumber(db)\n  const invoiceDate = new Date().toISOString()\n  const dueDate = new Date().toISOString() // Immediate payment for one-time purchases\n  \n  // Calculate tax\n  const taxCalc = calculateTax(invoiceData.amountPaid, invoiceData.billingAddress)\n  \n  // Format billing name\n  const billingName = invoiceData.billingAddress.addressType === 'company' && invoiceData.billingAddress.companyName\n    ? invoiceData.billingAddress.companyName\n    : invoiceData.userName\n  \n  // Insert invoice record\n  const invoiceRecord = await db.prepare(`\n    INSERT INTO stripe_invoices (\n      invoice_number,\n      invoice_type,\n      user_id,\n      stripe_invoice_id,\n      stripe_customer_id,\n      amount_paid,\n      currency,\n      status,\n      description,\n      billing_name,\n      billing_email,\n      billing_address_line1,\n      billing_address_line2,\n      billing_city,\n      billing_state,\n      billing_postal_code,\n      billing_country,\n      tax_rate,\n      tax_amount,\n      tax_description,\n      subtotal_amount,\n      total_amount,\n      invoice_date,\n      due_date,\n      credit_note_for_invoice_id,\n      created_at\n    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, datetime('now'))\n    RETURNING *\n  `).bind(\n    invoiceNumber,\n    invoiceData.invoiceType || 'invoice',\n    invoiceData.userId,\n    invoiceData.stripeInvoiceId,\n    invoiceData.stripeCustomerId,\n    invoiceData.amountPaid,\n    invoiceData.currency,\n    'paid', // Default status for new invoices\n    invoiceData.description,\n    billingName,\n    invoiceData.userEmail,\n    invoiceData.billingAddress.line1,\n    invoiceData.billingAddress.line2 || null,\n    invoiceData.billingAddress.city,\n    invoiceData.billingAddress.state,\n    invoiceData.billingAddress.postalCode,\n    invoiceData.billingAddress.country,\n    taxCalc.taxRate,\n    taxCalc.taxAmount,\n    taxCalc.taxDescription,\n    taxCalc.subtotalAmount,\n    taxCalc.totalAmount,\n    invoiceDate,\n    dueDate,\n    invoiceData.creditNoteForInvoiceId || null\n  ).first() as unknown as InvoiceRecord\n  \n  console.log(`Generated invoice: ${invoiceNumber} for user ${invoiceData.userId}`)\n  \n  return invoiceRecord\n}\n\n/**\n * Creates a credit note for a refund\n */\nexport async function createCreditNote(db: D1Database, originalInvoiceId: number, refundReason: string): Promise<InvoiceRecord> {\n  // Get original invoice data\n  const originalInvoice = await db.prepare(`\n    SELECT * FROM stripe_invoices WHERE id = ?\n  `).bind(originalInvoiceId).first() as unknown as InvoiceRecord\n  \n  if (!originalInvoice) {\n    throw new Error('Original invoice not found')\n  }\n  \n  // Create credit note with negative amounts\n  const creditNoteData: InvoiceData = {\n    userId: originalInvoice.userId,\n    userEmail: originalInvoice.billingEmail,\n    userName: originalInvoice.billingName,\n    stripeCustomerId: originalInvoice.stripeCustomerId,\n    stripeInvoiceId: `refund_${originalInvoice.stripeInvoiceId}`,\n    amountPaid: -Math.abs(originalInvoice.amountPaid), // Negative amount for credit\n    currency: originalInvoice.currency,\n    description: `Credit Note - ${refundReason}`,\n    billingAddress: {\n      line1: originalInvoice.billingAddressLine1,\n      line2: originalInvoice.billingAddressLine2,\n      city: originalInvoice.billingCity,\n      state: originalInvoice.billingState,\n      postalCode: originalInvoice.billingPostalCode,\n      country: originalInvoice.billingCountry\n    },\n    invoiceType: 'credit_note',\n    creditNoteForInvoiceId: originalInvoiceId\n  }\n  \n  return await createInvoiceRecord(db, creditNoteData)\n}\n\n/**\n * Gets user's billing address from the database\n */\nexport async function getUserBillingAddress(db: D1Database, userId: number): Promise<BillingAddress | null> {\n  const address = await db.prepare(`\n    SELECT * FROM user_billing_addresses WHERE user_id = ?\n  `).bind(userId).first()\n  \n  if (!address) {\n    return null\n  }\n  \n  return {\n    line1: address.line1 as string,\n    line2: address.line2 as string | undefined,\n    city: address.city as string,\n    state: address.state as string,\n    postalCode: address.postal_code as string,\n    country: address.country as string,\n    addressType: address.address_type as 'personal' | 'company' | undefined,\n    companyName: address.company_name as string | undefined,\n    taxIdType: address.tax_id_type as string | undefined,\n    taxIdNumber: address.tax_id_number as string | undefined\n  }\n}\n\n/**\n * Processes pending payments after user completes billing address\n */\nexport async function processPendingInvoices(db: D1Database, userId: number, userEmail: string): Promise<InvoiceRecord[]> {\n  // Get user's billing address\n  const billingAddress = await getUserBillingAddress(db, userId)\n  if (!billingAddress) {\n    throw new Error('Billing address not found')\n  }\n  \n  // Get user's name\n  const user = await db.prepare(`\n    SELECT first_name, last_name FROM users WHERE id = ?\n  `).bind(userId).first()\n  \n  const userName = user ? `${user.first_name as string} ${user.last_name as string}`.trim() : 'Customer'\n  \n  // Get pending payments for this user\n  const pendingPayments = await db.prepare(`\n    SELECT * FROM pending_payments WHERE email = ? ORDER BY created_at ASC\n  `).bind(userEmail.toLowerCase()).all()\n  \n  const createdInvoices: InvoiceRecord[] = []\n  \n  for (const payment of pendingPayments.results || []) {\n    const invoiceData: InvoiceData = {\n      userId,\n      userEmail,\n      userName,\n      stripeCustomerId: (payment.stripe_customer_id as string) || 'pending',\n      stripeInvoiceId: payment.session_id as string,\n      amountPaid: payment.amount_total as number,\n      currency: payment.currency as string,\n      description: `${(payment.customer_name as string) || 'Premium Plan'} - Processed Payment`,\n      billingAddress\n    }\n    \n    const invoice = await createInvoiceRecord(db, invoiceData)\n    createdInvoices.push(invoice)\n    \n    // Remove from pending payments\n    await db.prepare(`\n      DELETE FROM pending_payments WHERE id = ?\n    `).bind(payment.id as number).run()\n  }\n  \n  console.log(`Processed ${createdInvoices.length} pending invoices for user ${userId}`)\n  \n  return createdInvoices\n}\n\nexport type { InvoiceData, InvoiceRecord, BillingAddress }\n", "import { verifyJwt } from '../../../src/lib/jwt'\n\nexport async function onRequestOptions() {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  })\n}\n\nexport async function onRequestPost(context: any) {\n  try {\n    const { request, env } = context\n    \n    // Get JWT token from cookie\n    const cookieHeader = request.headers.get('Cookie')\n    let token: string | null = null\n    \n    if (cookieHeader) {\n      const cookies = cookieHeader.split('; ')\n      const authCookie = cookies.find((c: string) => c.startsWith('auth-token='))\n      if (authCookie) {\n        token = authCookie.split('=')[1]\n      }\n    }\n\n    if (!token) {\n      return new Response(JSON.stringify({ error: 'No authentication token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    const jwtSecret = env.JWT_SECRET\n    if (!jwtSecret) {\n      return new Response(JSON.stringify({ error: 'JWT secret not configured' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    try {\n      const payload = await verifyJwt(token, jwtSecret)\n      if (!payload) {\n        return new Response(JSON.stringify({ error: 'Invalid token' }), {\n          status: 401,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      const db = env.DB\n      if (!db) {\n        return new Response(JSON.stringify({ error: 'Database not available' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      // Import invoice generator functions\n      const { processPendingInvoices } = await import('../../../src/lib/invoice-generator.js')\n\n      // Process pending invoices for this user\n      const createdInvoices = await processPendingInvoices(db, parseInt(payload.sub), payload.email)\n\n      return new Response(JSON.stringify({ \n        success: true,\n        invoicesCreated: createdInvoices.length,\n        invoices: createdInvoices.map(inv => ({\n          invoiceNumber: inv.invoiceNumber,\n          amount: inv.totalAmount,\n          currency: inv.currency\n        }))\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      })\n\n    } catch (jwtError) {\n      return new Response(JSON.stringify({ error: 'Invalid or expired token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n  } catch (error) {\n    console.error('Error processing pending invoices:', error)\n    return new Response(JSON.stringify({ \n      error: \"Internal server error\" \n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n}\n", "export const regexPatterns = [\n    { name: 'Daisycon', pattern: /c\\/\\?si=(\\d+)|ds1\\.nl\\/c\\/.*?si=(\\d+)|lt45\\.net\\/c\\/.*?si=(\\d+)|\\/csd\\/\\?si=(\\d+)&li=(\\d+)&wi=(\\d+)|jf79\\.net\\/c\\/.*?si=(\\d+)/, matches: [], networkId: 1 },\n    { name: 'Daisycon', pattern: /c\\/\\?si=(\\d+)/, matches: [], networkId: 1 },\n    { name: 'Brandreward', pattern: /brandreward\\.com\\/?(?:\\?key=[^&]+&url=([^&]+))/, matches: [], networkId: 2 },\n    { name: 'TradeTracker', pattern: /https:\\/\\/tc\\.tradetracker\\.net\\/\\?c=(\\d+)|\\/tt\\/\\?tt=(\\d+)_/, matches: [], networkId: 3 },\n    { name: 'TradeTracker', pattern: /tt=(\\d+)_/, matches: [], networkId: 3 },\n    { name: 'TradeTracker', pattern: /\\/tt\\/index\\.php\\?tt=(\\d+)/, matches: [], networkId: 3 },\n    { name: 'TradeTracker', pattern: /c\\?c=(\\d+)/, matches: [], networkId: 3 },\n    { name: 'Tradedoubler', pattern: /tradedoubler\\.com/, matches: [], networkId: 4 },\n    { name: 'Awin', pattern: /awinmid=(\\d+)|awin1\\.com.*?(?:mid|id)=(\\d+)/, matches: [], networkId: 5 },\n    { name: 'Awin', pattern: /awin1\\.com/, matches: [], networkId: 5 },\n    { name: 'Adservice', pattern: /ADSERVICEID=(\\d+)|adservicemedia\\.dk\\/cgi-bin\\/click\\.pl\\?.*?cid=(\\d+)/, matches: [], networkId: 6 },\n    { name: 'Kwanko', pattern: /metaffiliation\\.com/, matches: [], networkId: 7 },\n    { name: 'Adrecord', pattern: /click\\.adrecord\\.com\\/?\\?c=\\d+&p=(\\d+)|click\\.adrecord\\.com\\/?\\?c=\\d+&amp;p=(\\d+)/, matches: [], networkId: 8 },\n    { name: 'Partnerize', pattern: /prf\\.hn\\/click\\/camref:(.*?)(\\/|$)|PARTNERIZEID:(.*?)|prf\\.hn\\/click\\/camref:([^/]+)/, matches: [], networkId: 9 },\n    { name: 'Partnerize', pattern: /prf\\.hn\\/click\\/camref:([^/]+)/, matches: [], networkId: 9 },\n    { name: 'Partnerize', pattern: /camref:.*?\\/pubref:/, matches: [], networkId: 9 },\n    { name: 'Partner Ads', pattern: /klikbanner\\.php\\?.*bannerid=([^&]+)/, matches: [], networkId: 10 },\n    { name: 'Adtraction', pattern: /\\/t\\/t\\?a=(\\d+)/, matches: [], networkId: 11 },\n    { name: 'Cj', pattern: /CJID=([a-zA-Z0-9]+)|cj\\.dotomi\\.com/, matches: [], networkId: 12 },\n    { name: 'Admitad', pattern: /\\.com\\/g\\/([a-zA-Z0-9]+)/, matches: [], networkId: 13 },\n    { name: 'Digidip', pattern: /digidip\\.net\\/visit\\?url=([^&]+)/, matches: [], networkId: 14 },\n    { name: 'Salestring', pattern: /salestring\\.com\\/aff_c\\?offer_id=([0-9]+)/, matches: [], networkId: 15 },\n    { name: 'Flexoffers', pattern: /trid=([0-9]+)/, matches: [], networkId: 16 },\n    { name: 'Flexoffers', pattern: /track\\.flexlinkspro\\.com/, matches: [], networkId: 16 },\n    { name: 'Impact', pattern: /impact\\.[a-zA-Z0-9-]+\\.com\\/c\\/|\\/c\\/[0-9]+\\/[0-9]+\\/([0-9]+)/, matches: [], networkId: 17 },\n    { name: 'Webgains', pattern: /wgprogramid=([0-9]+)/, matches: [], networkId: 18 },\n    { name: 'Circlewise', pattern: /trackmytarget\\.com\\/\\?a=([^&#]+)/, matches: [], networkId: 19 },\n    { name: 'Optimise', pattern: /https?:\\/\\/clk\\.omgt3\\.com\\/\\?.*PID=([0-9]+).*/, matches: [], networkId: 20 },\n    { name: 'Partnerboost', pattern: /https?:\\/\\/app\\.partnermatic\\.com\\/track\\/([a-zA-Z0-9_\\-]+)\\?/, matches: [], networkId: 21 },\n    { name: 'Involveasia', pattern: /\\/aff_m\\?offer_id=([0-9]+)/, matches: [], networkId: 22 },\n    { name: 'Chinesean', pattern: /https?:\\/\\/www\\.chinesean\\.com\\/affiliate\\/clickBanner\\.do\\?.*pId=(\\d+)/, matches: [], networkId: 23 },\n    { name: 'Rakuten', pattern: /https:\\/\\/click\\.linksynergy\\.com\\/(?:deeplink\\?|link\\?)(?:.*&)?(?:mid|offerid)=(\\d+)/, matches: [], networkId: 24 },\n    { name: 'Yieldkit', pattern: /https:\\/\\/r\\.linksprf\\.com/, matches: [], networkId: 25 },\n    { name: 'Indoleads', pattern: /\\.xyz\\/([a-zA-Z0-9]+)/, matches: [], networkId: 26 },\n    { name: 'Commissionfactory', pattern: /https:\\/\\/t\\.cfjump\\.com\\/[0-9]+\\/t\\/([0-9]+)/, matches: [], networkId: 27 },\n    { name: 'Accesstrade', pattern: /https?:\\/\\/(?:atsg\\.me|atmy\\.me|atid\\.me|accesstra\\.de)\\/([a-zA-Z0-9]+)/, matches: [], networkId: 28 },\n    { name: 'Yadore', pattern: /yadore\\.com\\/v2\\/d\\?url=(.*?)&market/, matches: [], networkId: 29 },\n    { name: 'Yadore', pattern: /yadore\\.com/, matches: [], networkId: 29 },\n    { name: 'Skimlinks', pattern: /https:\\/\\/go\\.skimresources\\.com.*?url=((http%3A%2F%2F|https%3A%2F%2F|http:\\/\\/|https:\\/\\/)[\\w.-]+)/, matches: [], networkId: 30 },\n    { name: 'Addrevenue', pattern: /https:\\/\\/addrevenue\\.io\\/t\\?c=[0-9]+&a=([0-9]+)/, matches: [], networkId: 33 },\n    { name: 'Timeone', pattern: /https:\\/\\/tracking\\.publicidees\\.com\\/clic\\.php\\?.*progid=(\\d+)/, matches: [], networkId: 35 },\n    { name: 'Glopss', pattern: /glopss\\.com\\/aff_c\\?offer_id=([0-9]+)/, matches: [], networkId: 36 },\n    { name: 'RetailAds', pattern: /retailads\\.net\\/tc\\.php\\?t=([a-zA-Z0-9]+)/, matches: [], networkId: 38 },\n    { name: 'Shareasale', pattern: /shareasale/, matches: [], networkId: 39 },\n    { name: 'Kelkoo', pattern: /kelkoogroup\\.net/, matches: [], networkId: 40 },\n    { name: 'Takeads', pattern: /tatrck\\.com/, matches: [], networkId: 45 },\n    { name: 'Belboon', pattern: /\\/ts\\/.*?\\/tsc/, matches: [], networkId: 31 },\n    { name: 'HealthTrader', pattern: /track\\.healthtrader\\.com/, matches: [], networkId: 48 },\n    { name: 'Sourceknowledge', pattern: /provenpixel\\.com\\/plp\\.php|sktng0/, matches: [], networkId: 999 },\n    { name: 'Linkbux', pattern: /linkbux\\.com\\/track/, matches: [], networkId: 998 },\n    { name: 'PointClickTrack', pattern: /clcktrck\\.com/, matches: [], networkId: 997 },\n    { name: 'Pepperjam', pattern: /pepperjamnetwork\\.com/, matches: [], networkId: 996 },\n    { name: 'OpieNetwork', pattern: /tracking\\.opienetwork\\.com/, matches: [], networkId: 995 },\n    { name: 'Vcommission', pattern: /vcommission\\.com/, matches: [], networkId: 994 },\n    { name: 'MissAffiliate', pattern: /missaffiliate\\.com/, matches: [], networkId: 993 },\n    { name: 'Ga-Net', pattern: /ga-net\\.com/, matches: [], networkId: 992 },\n    { name: 'Affisereach', pattern: /reachclk\\.com/, matches: [], networkId: 990 },\n    { name: 'opienetwork', pattern: /opienetwork\\.com/, matches: [], networkId: 990 },\n    { name: 'Fatcoupon', pattern: /fatcoupon\\.com/, matches: [], networkId: 989 },\n    { name: 'Adcell', pattern: /adcell\\.com/, matches: [], networkId: 988 },\n    { name: 'blueaff', pattern: /blueaff\\.com/, matches: [], networkId: 987 },\n    { name: 'DigiDum', pattern: /digidum/, matches: [], networkId: 986 },\n    { name: 'AdIndex', pattern: /adindex/, matches: [], networkId: 985 },\n];\n\nexport async function onRequestPost(context: any) {\n    try {\n        const body = await context.request.json();\n        const { url } = body;\n\n        if (!url) {\n            return new Response(JSON.stringify({ message: 'URL is required' }), {\n                status: 400,\n                headers: { 'Content-Type': 'application/json' }\n            });\n        }\n\n        let currentUrl = url;\n        const redirects: any[] = [];\n        const visitedUrls = new Set<string>();\n\n        while (true) {\n            if (visitedUrls.has(currentUrl)) {\n                console.log(`Redirect loop detected at URL: ${currentUrl}`);\n                redirects.push({\n                    url: currentUrl,\n                    status: 'error',\n                    type: 'Redirect Loop',\n                    name: null,\n                    error: 'Redirect loop detected'\n                });\n                break;\n            }\n            visitedUrls.add(currentUrl);\n\n            try {\n                const response = await fetch(currentUrl, {\n                    method: 'GET',\n                    redirect: 'manual',\n                });\n\n                let redirectedUrl = response.headers.get('location');\n                let matchName = null;\n\n                // Check if the current URL matches any of the provided patterns\n                for (const patternObj of regexPatterns) {\n                    if (patternObj.pattern.test(currentUrl)) {\n                        matchName = patternObj.name;\n                        break;\n                    }\n                }\n\n                console.log(`Checking URL: ${currentUrl}`);\n\n                if (redirectedUrl) {\n                    // Resolve relative URLs\n                    try {\n                        redirectedUrl = new URL(redirectedUrl, currentUrl).href;\n                    } catch (urlError: any) {\n                        console.log(`Error resolving redirect URL: ${urlError.message}`);\n                        redirects.push({\n                            url: currentUrl,\n                            status: response.status,\n                            type: 'Invalid Redirect URL',\n                            name: matchName,\n                            error: urlError.message\n                        });\n                        break;\n                    }\n\n                    console.log(`HTTP Redirect detected: ${redirectedUrl}`);\n                    redirects.push({\n                        url: currentUrl,\n                        status: response.status,\n                        type: 'HTTP Redirect',\n                        name: matchName\n                    });\n                    currentUrl = redirectedUrl;\n                    continue;\n                }\n\n                // Check for meta redirects or JS redirects\n                const html = await response.text();\n\n                // Meta refresh detection\n                const metaRedirect = html.match(/<meta[^>]*http-equiv=[\"']refresh[\"'][^>]*content=[\"']\\d+;\\s*url=([^\"']+)/i);\n                if (metaRedirect) {\n                    console.log(`Meta Redirect detected: ${metaRedirect[1]}`);\n                    currentUrl = metaRedirect[1];\n                    redirects.push({\n                        url: currentUrl,\n                        status: 200,\n                        type: 'Meta Redirect',\n                        name: matchName\n                    });\n                    continue;\n                }\n\n                // JavaScript redirect detection\n                const jsRedirect = html.match(/window\\.location\\.href\\s*=\\s*[\"']([^\"']+)[\"']/i) ||\n                                    html.match(/window\\.location\\.replace\\s*\\(\\s*[\"']([^\"']+)[\"']\\s*\\)/i) ||\n                                    html.match(/window\\.location\\s*=\\s*[\"']([^\"']+)[\"']/i) ||\n                                    html.match(/location\\.href\\s*=\\s*[\"']([^\"']+)[\"']/i) ||\n                                    html.match(/location\\.replace\\s*\\(\\s*[\"']([^\"']+)[\"']/i) ||\n                                    html.match(/window\\.open\\s*\\(\\s*[\"']([^\"']+)[\"']/i);\n\n                if (jsRedirect) {\n                    console.log(`JavaScript Redirect detected: ${jsRedirect[1]}`);\n                    currentUrl = jsRedirect[1];\n                    redirects.push({\n                        url: currentUrl,\n                        status: 200,\n                        type: 'JavaScript Redirect',\n                        name: matchName\n                    });\n                    continue;\n                }\n\n                const htmlRedirect = html.match(/window\\.location\\.replace\\s*\\(\\s*['\"]([^'\"]+)['\"]\\s*\\)/i);\n                if (htmlRedirect) {\n                    console.log(`HTML-based Redirect detected: ${htmlRedirect[1]}`);\n                    currentUrl = htmlRedirect[1];\n                    redirects.push({\n                        url: currentUrl,\n                        status: 200,\n                        type: 'HTML-based Redirect',\n                        name: matchName\n                    });\n                    continue;\n                }\n\n                // Add a check for query parameter-based redirects\n                const queryRedirect = new URL(currentUrl).searchParams.get('deeplink') || \n                                      new URL(currentUrl).searchParams.get('url') ||\n                                      new URL(currentUrl).searchParams.get('u');\n                if (queryRedirect) {\n                    console.log(`Query Parameter Redirect detected: ${queryRedirect}`);\n                    currentUrl = decodeURIComponent(queryRedirect);\n                    redirects.push({\n                        url: currentUrl,\n                        status: 200,\n                        type: 'Query Parameter Redirect',\n                        name: matchName\n                    });\n                    continue;\n                }\n\n                // Timeout-based JavaScript redirect detection\n                const timeoutRedirect = html.match(/setTimeout\\s*\\(\\s*(?:function\\s*\\(\\s*\\)\\s*\\{\\s*)?(?:window\\.location\\.(?:replace|href)\\s*=|location\\.(?:replace|href)\\s*=)\\s*[\"']([^\"']+)[\"']/i);\n                if (timeoutRedirect) {\n                    console.log(`Delayed JavaScript Redirect detected: ${timeoutRedirect[1]}`);\n                    currentUrl = timeoutRedirect[1];\n                    redirects.push({\n                        url: currentUrl,\n                        status: 200,\n                        type: 'Delayed JavaScript Redirect',\n                        name: matchName\n                    });\n                    continue;\n                }\n\n                // Inside the while loop, after checking for other redirects\n                if (currentUrl.includes('r.linksprf.com/v1/redirect')) {\n                    try {\n                        const response = await fetch(currentUrl, {\n                            method: 'GET',\n                            redirect: 'manual',\n                            headers: {\n                                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n                            }\n                        });\n\n                        if (response.status === 302 || response.status === 301) {\n                            let redirectedUrl = response.headers.get('location');\n                            console.log(`Linksprf HTTP Redirect detected: ${redirectedUrl}`);\n                            \n                            // Handle relative URLs\n                            if (redirectedUrl && redirectedUrl.startsWith('/')) {\n                                const currentUrlObj = new URL(currentUrl);\n                                redirectedUrl = `${currentUrlObj.protocol}//${currentUrlObj.host}${redirectedUrl}`;\n                            }\n                            \n                            if (redirectedUrl) {\n                                console.log(`Resolved Linksprf redirect URL: ${redirectedUrl}`);\n                                currentUrl = redirectedUrl;\n                                redirects.push({\n                                    url: currentUrl,\n                                    status: response.status,\n                                    type: 'Linksprf HTTP Redirect',\n                                    name: matchName\n                                });\n                                continue;\n                            }\n                        }\n\n                        const html = await response.text();\n                        \n                        // Check for window.location.replace in the response\n                        const scriptRedirect = html.match(/window\\.location\\.replace\\s*\\(\\s*['\"]([^'\"]+)['\"]\\s*\\)/i);\n                        \n                        if (scriptRedirect) {\n                            let redirectedUrl = scriptRedirect[1];\n                            console.log(`Linksprf Script Redirect detected: ${redirectedUrl}`);\n                            \n                            // Handle relative URLs\n                            if (redirectedUrl.startsWith('/')) {\n                                const currentUrlObj = new URL(currentUrl);\n                                redirectedUrl = `${currentUrlObj.protocol}//${currentUrlObj.host}${redirectedUrl}`;\n                            }\n                            \n                            console.log(`Resolved Linksprf script redirect URL: ${redirectedUrl}`);\n                            currentUrl = redirectedUrl;\n                            redirects.push({\n                                url: currentUrl,\n                                status: response.status,\n                                type: 'Linksprf Script Redirect',\n                                name: matchName\n                            });\n                            continue;\n                        }\n                        \n                        // If no redirect found, log the content for debugging\n                        console.log('Linksprf response content:', html);\n                    } catch (error: any) {\n                        console.log(`Error handling Linksprf URL: ${error.message}`);\n                    }\n                }\n\n                // If no more redirects are detected, check the final URL\n                let matchNameFinal = null;\n                for (const patternObj of regexPatterns) {\n                    if (patternObj.pattern.test(currentUrl)) {\n                        matchNameFinal = patternObj.name;\n                        break;\n                    }\n                }\n\n                console.log(`No more redirects detected. Final URL: ${currentUrl}`);\n                console.log(`Final URL: ${currentUrl}`); // Add this line\n                redirects.push({\n                    url: currentUrl,\n                    status: 200,\n                    type: 'Final URL',\n                    name: matchNameFinal\n                });\n                break;\n            } catch (redirectError: any) {\n                console.log(`Redirect Error: ${redirectError.message}`);\n                redirects.push({\n                    url: currentUrl,\n                    status: 'error',\n                    type: 'Redirect Error',\n                    name: null,\n                    error: redirectError.message\n                });\n                break;\n            }\n        }\n\n        return new Response(JSON.stringify({ redirects }), {\n            status: 200,\n            headers: { 'Content-Type': 'application/json' }\n        });\n    } catch (error: any) {\n        console.error('Error processing request:', error);\n        return new Response(JSON.stringify({ message: 'An error occurred', error: error.message }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' }\n        });\n    }\n}\n", "export interface Env {\n  UPTIME_KUMA_SECRET: string;\n  UPTIME_KUMA_URL?: string;\n}\n\ninterface StatusPageHeartbeat {\n  status: number;\n  time: string;\n  msg: string;\n  ping: number;\n}\n\ninterface StatusPageResponse {\n  heartbeatList: {\n    [key: string]: StatusPageHeartbeat[];\n  };\n  uptimeList: {\n    [key: string]: number;\n  };\n}\n\ninterface UrlData {\n  type: string;\n  avg_uptime_percentage: number;\n  avg_response_time: number;\n  hasStatusPage: boolean;\n  heartbeats?: StatusPageHeartbeat[];\n  uptimeList?: { [key: string]: number };\n}\n\ninterface Domain {\n  domain: string;\n  displayName: string;\n  avg_uptime_percentage: number;\n  urls: UrlData[];\n  day_uptime: { type: string; day_uptime: { date: string; uptime: number | null }[] }[];\n  hasStatusPage: boolean;\n  uptimeList?: { [key: string]: number };\n}\n\nexport async function onRequestGet(context: { env: Env, request: Request }): Promise<Response> {\n  try {\n    const { env } = context;\n    \n    const uptimeKumaSecret = env.UPTIME_KUMA_SECRET;\n\n    if (!uptimeKumaSecret) {\n      return new Response(JSON.stringify({ error: 'Uptime Kuma secret not configured' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    // Try multiple endpoints to get data from Uptime Kuma\n    let metricsText = '';\n    let success = false;\n\n    // First try the metrics endpoint with Basic Auth\n    try {\n      const monitorsResponse = await fetch(`${env.UPTIME_KUMA_URL || 'http://152.42.135.243:3001'}/metrics`, {\n        headers: {\n          'Authorization': `Basic ${btoa(':' + uptimeKumaSecret)}`,\n          'Accept': 'text/plain'\n        }\n      });\n\n      if (monitorsResponse.ok) {\n        metricsText = await monitorsResponse.text();\n        console.log('Metrics response preview:', metricsText.substring(0, 200));\n        \n        // Check if we got HTML instead of metrics\n        if (metricsText.startsWith('<!DOCTYPE') || metricsText.includes('<html')) {\n          console.log('Received HTML instead of metrics, trying alternative approach');\n        } else {\n          success = true;\n        }\n      } else {\n        console.error('Metrics endpoint failed:', monitorsResponse.status, monitorsResponse.statusText);\n      }\n    } catch (error) {\n      console.error('Error fetching metrics:', error);\n    }\n\n    if (!success) {\n      console.log('All API attempts failed - providing fallback response');\n      \n      // Check if we're in Cloudflare environment and the issue is network access\n      const isCloudflareEnv = typeof caches !== 'undefined';\n      const usingPrivateIp = !env.UPTIME_KUMA_URL && isCloudflareEnv;\n      \n      let errorMessage = 'Unable to fetch data from Uptime Kuma';\n      if (usingPrivateIp) {\n        errorMessage += ' - Private IP access blocked in production. Please configure UPTIME_KUMA_URL environment variable with a public domain.';\n      }\n      \n      return new Response(JSON.stringify({ \n        error: errorMessage,\n        debug: {\n          environment: isCloudflareEnv ? 'cloudflare' : 'local',\n          hasPublicUrl: !!env.UPTIME_KUMA_URL,\n          suggestedAction: usingPrivateIp ? 'Configure UPTIME_KUMA_URL environment variable' : 'Check network connectivity'\n        }\n      }), {\n        status: 503,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type'\n        }\n      });\n    }\n\n    // Process the Prometheus metrics to match our expected format\n    const processedDomains = await processPrometheusMetrics(metricsText, env.UPTIME_KUMA_URL);\n\n    return new Response(JSON.stringify(processedDomains), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type'\n      }\n    });\n\n  } catch (error) {\n    console.error('Error in affiliate-network-uptime API:', error);\n    \n    // Return error instead of mock data\n    return new Response(JSON.stringify({ error: 'Failed to fetch real uptime data: ' + (error instanceof Error ? error.message : 'Unknown error') }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type'\n      }\n    });\n  }\n}\n\nexport async function onRequestOptions(): Promise<Response> {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n}\n\nfunction formatNetworkDisplayName(networkName: string): string {\n  const nameMappings: { [key: string]: string } = {\n    'involveasia': 'Involve Asia',\n    'partnerads': 'Partner Ads',\n    'retailads': 'Retail Ads',\n    'smartresponse': 'Smart Response',\n    'takeads': 'Take Ads'\n  };\n  \n  const normalizedName = networkName.toLowerCase().replace(/[^a-z0-9]/g, '');\n  return nameMappings[normalizedName] || networkName;\n}\n\nasync function fetchStatusPageData(networkName: string, uptimeKumaUrl?: string): Promise<StatusPageResponse | null> {\n  try {\n    const url = `${uptimeKumaUrl || 'http://152.42.135.243:3001'}/api/status-page/heartbeat/${networkName}?limit=10080`;\n    console.log(`Fetching status page from: ${url}`);\n    \n    const response = await fetch(url);\n    \n    console.log(`Status page response for ${networkName}:`, response.status, response.statusText);\n    \n    if (!response.ok) {\n      console.log(`Status page not found for ${networkName}: ${response.status}`);\n      return null;\n    }\n    \n    const data = await response.json();\n    console.log(`Status page data for ${networkName}:`, {\n      hasHeartbeatList: !!data.heartbeatList,\n      heartbeatKeys: data.heartbeatList ? Object.keys(data.heartbeatList) : [],\n      totalHeartbeats: data.heartbeatList ? Object.values(data.heartbeatList).reduce((sum: number, arr: any) => sum + (Array.isArray(arr) ? arr.length : 0), 0) : 0\n    });\n    \n    return data;\n  } catch (error) {\n    console.error(`Error fetching status page data for ${networkName}:`, error);\n    return null;\n  }\n}\n\nasync function processPrometheusMetrics(metricsText: string, uptimeKumaUrl?: string): Promise<Domain[]> {\n  const domains: Map<string, Domain> = new Map();\n  const lines = metricsText.split('\\n');\n\n  // Parse Prometheus metrics\n  const monitors: Map<string, any> = new Map();\n\n  for (const line of lines) {\n    if (line.startsWith('#') || !line.trim()) continue;\n\n    // Parse metric lines like: metric_name{label1=\"value1\",label2=\"value2\"} value\n    const metricMatch = line.match(/^([a-zA-Z_:][a-zA-Z0-9_:]*)\\{([^}]*)\\}\\s+(.+)$/);\n    if (!metricMatch) continue;\n\n    const [, metricName, labelsStr, value] = metricMatch;\n    \n    // Parse labels\n    const labels: { [key: string]: string } = {};\n    const labelMatches = labelsStr.matchAll(/([a-zA-Z_][a-zA-Z0-9_]*)=\"([^\"]*)\"/g);\n    for (const labelMatch of labelMatches) {\n      labels[labelMatch[1]] = labelMatch[2];\n    }\n\n    const monitorName = labels.monitor_name || labels.job || 'unknown';\n    \n    // Skip group monitors or invalid ones\n    if (labels.monitor_type === 'group' || monitorName === 'unknown') continue;\n\n    if (!monitors.has(monitorName)) {\n      monitors.set(monitorName, {\n        name: monitorName,\n        type: labels.monitor_type || 'http',\n        url: labels.monitor_url || '',\n        metrics: {}\n      });\n    }\n\n    const monitor = monitors.get(monitorName)!;\n    monitor.metrics[metricName] = parseFloat(value);\n  }\n\n  // Process monitors into domains\n  for (const monitor of monitors.values()) {\n    const domain = monitor.name.toLowerCase().replace(/[^a-z0-9]/g, '');\n    \n    if (!domains.has(domain)) {\n      domains.set(domain, {\n        domain,\n        displayName: formatNetworkDisplayName(monitor.name),\n        avg_uptime_percentage: 0,\n        urls: [],\n        day_uptime: [],\n        hasStatusPage: false\n      });\n    }\n\n    const domainData = domains.get(domain)!;\n\n    // Extract metrics - using the actual metric names from Uptime Kuma\n    const status = monitor.metrics['monitor_status'] || 0; // 1 = UP, 0 = DOWN\n    const responseTime = monitor.metrics['monitor_response_time'] || 0;\n    \n    // Calculate uptime percentage based on actual status\n    const uptimePercentage = status === 1 ? 100 : 0;\n\n    // Add URL data - treating each monitor as a \"Tracking\" endpoint since they're all tracking URLs\n    domainData.urls.push({\n      type: 'Tracking',\n      avg_uptime_percentage: uptimePercentage,\n      avg_response_time: responseTime,\n      hasStatusPage: false\n    });\n\n    // Only include today's data since we don't have historical data\n    const today = new Date().toISOString().split('T')[0];\n    domainData.day_uptime.push({\n      type: 'Tracking',\n      day_uptime: [{\n        date: today,\n        uptime: uptimePercentage / 100\n      }]\n    });\n  }\n\n  // Fetch status page data for each domain and only keep those with status pages\n  const domainsWithStatusPages: Domain[] = [];\n  \n  for (const domain of domains.values()) {\n    const networkName = domain.domain;\n    console.log(`Checking status page for network: ${networkName}`);\n    \n    const statusPageData = await fetchStatusPageData(networkName, uptimeKumaUrl);\n    \n    if (statusPageData && statusPageData.heartbeatList && Object.keys(statusPageData.heartbeatList).length > 0) {\n      console.log(`Status page found for ${networkName}, heartbeats:`, Object.keys(statusPageData.heartbeatList).length);\n      \n      domain.hasStatusPage = true;\n      \n      // Add uptimeList to domain\n      if (statusPageData.uptimeList) {\n        domain.uptimeList = statusPageData.uptimeList;\n        console.log(`Added uptimeList to domain ${domain.domain}:`, statusPageData.uptimeList);\n      }\n      \n      // Update URLs with status page data\n      domain.urls.forEach(url => {\n        url.hasStatusPage = true;\n        \n        // Add uptimeList to each URL as well\n        if (statusPageData.uptimeList) {\n          url.uptimeList = statusPageData.uptimeList;\n          console.log(`Added uptimeList to URL ${url.type}:`, statusPageData.uptimeList);\n        }\n        \n        // Get heartbeats from all available monitors - each heartbeat should be a separate candle\n        const allHeartbeats: StatusPageHeartbeat[] = [];\n        console.log(`Processing heartbeats for ${domain.domain}, heartbeatList keys:`, Object.keys(statusPageData.heartbeatList));\n        \n        // Extract all individual heartbeats from all monitors\n        Object.entries(statusPageData.heartbeatList).forEach(([monitorId, heartbeatArray]) => {\n          console.log(`Monitor ${monitorId} heartbeats:`, Array.isArray(heartbeatArray) ? heartbeatArray.length : 'not array');\n          if (Array.isArray(heartbeatArray)) {\n            // Each heartbeat in the array should be a separate candle\n            heartbeatArray.forEach(heartbeat => {\n              if (heartbeat && typeof heartbeat === 'object' && 'status' in heartbeat) {\n                allHeartbeats.push(heartbeat as StatusPageHeartbeat);\n              }\n            });\n          }\n        });\n        \n        console.log(`Total individual heartbeats collected for ${domain.domain}:`, allHeartbeats.length);\n        \n        // Sort by time (newest first) and assign to URL\n        url.heartbeats = allHeartbeats.sort((a, b) => \n          new Date(b.time).getTime() - new Date(a.time).getTime()\n        );\n        \n        console.log(`Final heartbeats assigned to ${domain.domain} ${url.type}:`, url.heartbeats.length);\n        if (url.heartbeats.length > 0) {\n          console.log(`Sample heartbeats:`, url.heartbeats.slice(0, 3));\n        }\n      });\n      \n      domainsWithStatusPages.push(domain);\n    } else {\n      console.log(`No status page found for ${networkName}`);\n    }\n  }\n\n  console.log(`Total domains with status pages: ${domainsWithStatusPages.length}`);\n\n  // Calculate overall domain uptime for domains with status pages\n  domainsWithStatusPages.forEach((domain) => {\n    if (domain.urls.length > 0) {\n      domain.avg_uptime_percentage = domain.urls.reduce((sum, url) => sum + url.avg_uptime_percentage, 0) / domain.urls.length;\n    }\n  });\n\n  // Sort domains by name (displayName) by default\n  domainsWithStatusPages.sort((a, b) => {\n    const nameA = (a.displayName || a.domain).toLowerCase();\n    const nameB = (b.displayName || b.domain).toLowerCase();\n    return nameA.localeCompare(nameB);\n  });\n\n  return domainsWithStatusPages;\n}\n\n\n", "{\n  \"plans\": {\n    \"starter\": {\n      \"id\": \"starter\",\n      \"name\": {\n        \"en\": \"Starter\",\n        \"nl-nl\": \"Starter\"\n      },\n      \"description\": {\n        \"en\": \"Perfect for starters or entrepreneurs working on one domain.\",\n        \"nl-nl\": \"Perfect voor starters of ondernemers die aan \u00E9\u00E9n domein werken.\"\n      },\n      \"price\": {\n        \"monthly\": {\n          \"amount\": 2900,\n          \"currency\": \"USD\",\n          \"symbol\": \"$\"\n        },\n        \"yearly\": {\n          \"amount\": 31900,\n          \"currency\": \"USD\",\n          \"symbol\": \"$\"\n        }\n      },\n      \"billing\": {\n        \"monthly\": {\n          \"en\": \"month\",\n          \"nl-nl\": \"maand\"\n        },\n        \"yearly\": {\n          \"en\": \"year\",\n          \"nl-nl\": \"jaar\"\n        }\n      },\n      \"features\": {\n        \"en\": [\n          \"1 Project\",\n          \"1 Seat\",\n          \"$30 Additional project\",\n          \"Fully Encrypt\",\n          \"Network Uptime Alerts\"\n        ],\n        \"nl-nl\": [\n          \"1 Project\",\n          \"1 Gebruiker\",\n          \"$30 Extra project\",\n          \"Volledig versleuteld\",\n          \"Network Uptime Alerts\"\n        ]\n      },\n      \"stripePriceId\": \"price_starter\",\n      \"popular\": false\n    },\n    \"professional\": {\n      \"id\": \"professional\",\n      \"name\": {\n        \"en\": \"Professional\",\n        \"nl-nl\": \"Professioneel\"\n      },\n      \"description\": {\n        \"en\": \"For those that work in teams or maintain multiple domains.\",\n        \"nl-nl\": \"Voor degenen die in teams werken of meerdere domeinen onderhouden.\"\n      },\n      \"price\": {\n        \"monthly\": {\n          \"amount\": 9900,\n          \"currency\": \"USD\",\n          \"symbol\": \"$\"\n        },\n        \"yearly\": {\n          \"amount\": 108900,\n          \"currency\": \"USD\",\n          \"symbol\": \"$\"\n        }\n      },\n      \"billing\": {\n        \"monthly\": {\n          \"en\": \"month\",\n          \"nl-nl\": \"maand\"\n        },\n        \"yearly\": {\n          \"en\": \"year\",\n          \"nl-nl\": \"jaar\"\n        }\n      },\n      \"features\": {\n        \"en\": [\n          \"1 Project\",\n          \"10 Seat\",\n          \"$20 Additional project\",\n          \"Fully Encrypt\",\n          \"Coupon plugin\",\n          \"Project export\",\n          \"Customer support\",\n          \"Network Uptime Alerts\"\n        ],\n        \"nl-nl\": [\n          \"1 Project\",\n          \"10 Gebruikers\",\n          \"$20 Extra project\",\n          \"Volledig versleuteld\",\n          \"Coupon plugin\",\n          \"Project export\",\n          \"Klantondersteuning\",\n          \"Network Uptime Alerts\"\n        ]\n      },\n      \"stripePriceId\": \"price_professional\",\n      \"popular\": true\n    },\n    \"enterprise\": {\n      \"id\": \"enterprise\",\n      \"name\": {\n        \"en\": \"Enterprise\",\n        \"nl-nl\": \"Enterprise\"\n      },\n      \"description\": {\n        \"en\": \"Perfect for agencies that run multiple sites.\",\n        \"nl-nl\": \"Perfect voor bureaus die meerdere sites beheren.\"\n      },\n      \"price\": {\n        \"monthly\": {\n          \"amount\": 14900,\n          \"currency\": \"USD\",\n          \"symbol\": \"$\"\n        },\n        \"yearly\": {\n          \"amount\": 163900,\n          \"currency\": \"USD\",\n          \"symbol\": \"$\"\n        }\n      },\n      \"billing\": {\n        \"monthly\": {\n          \"en\": \"month\",\n          \"nl-nl\": \"maand\"\n        },\n        \"yearly\": {\n          \"en\": \"year\",\n          \"nl-nl\": \"jaar\"\n        }\n      },\n      \"features\": {\n        \"en\": [\n          \"1 Project\",\n          \"Unlimited seats\",\n          \"$10 Additional project\",\n          \"Fully Encrypt\",\n          \"Coupon plugin\",\n          \"Project export\",\n          \"Customer support\",\n          \"Network Uptime Alerts\"\n        ],\n        \"nl-nl\": [\n          \"1 Project\",\n          \"Onbeperkte gebruikers\",\n          \"$10 Extra project\",\n          \"Volledig versleuteld\",\n          \"Coupon plugin\",\n          \"Project export\",\n          \"Klantondersteuning\",\n          \"Network Uptime Alerts\"\n        ]\n      },\n      \"stripePriceId\": \"price_enterprise\",\n      \"popular\": false\n    }\n  }\n} ", "export const locales = {\n  'en': {\n    label: 'English',\n    country: 'Global',\n    locale: 'en',\n    currency: 'USD',\n    currencySymbol: '$',\n    flag: '\uD83C\uDDFA\uD83C\uDDF8',\n    hreflang: 'en',\n    canonicalBase: 'https://affensus.com',\n  },\n  'nl-nl': {\n    label: 'Nederlands',\n    country: 'Nederland',\n    locale: 'nl-NL',\n    currency: 'EUR',\n    currencySymbol: '\u20AC',\n    flag: '\uD83C\uDDF3\uD83C\uDDF1',\n    hreflang: 'nl-NL',\n    canonicalBase: 'https://affensus.com/nl-nl/',\n  }\n};\n", "import { verifyJwt } from '../../../src/lib/jwt'\nimport pricingPlans from '../../../src/pricing-plans.json'\nimport { locales } from '../../../src/locales/settings'\n\nfunction parseCookies(cookieHeader: string | null): { [key: string]: string } {\n  const cookies: { [key: string]: string } = {}\n  if (!cookieHeader) return cookies\n  \n  cookieHeader.split(';').forEach(cookie => {\n    const [name, value] = cookie.trim().split('=')\n    if (name && value) {\n      cookies[name] = decodeURIComponent(value)\n    }\n  })\n  \n  return cookies\n}\n\nasync function getUserByEmail(db: any, email: string) {\n  return await db.prepare('SELECT * FROM users WHERE email = ?').bind(email).first()\n}\n\nasync function createOrUpdateStripeCustomer(db: any, userId: string, stripeCustomerId: string) {\n  await db.prepare(`\n    UPDATE users \n    SET stripe_customer_id = ?, updated_at = datetime('now')\n    WHERE id = ?\n  `).bind(stripeCustomerId, userId).run()\n}\n\n// Create Stripe checkout session\nexport const onRequest = async (context: { request: Request; env: any }): Promise<Response> => {\n  try {\n    const { request, env } = context\n    const cookies = parseCookies(request.headers.get('Cookie'))\n    const token = cookies['auth-token']\n\n    const jwtSecret = env.JWT_SECRET\n    const stripeSecretKey = env.STRIPE_SECRET_KEY\n\n    if (!jwtSecret || !stripeSecretKey) {\n      return new Response(JSON.stringify({ error: 'Server configuration error' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    const { priceId, currency = 'USD', email, name, promoCode } = await request.json()\n    \n    // Validate price ID against allowed list\n    const allowedPriceIds = env.STRIPE_ALLOWED_PRICE_IDS?.split(',') || [\n      'price_basic',\n      'price_pro', \n      'price_lifetime'\n    ]\n    \n    // Always allow our internal price IDs\n    allowedPriceIds.push('price_pro', 'price_basic', 'price_lifetime')\n    \n    if (!allowedPriceIds.includes(priceId)) {\n      return new Response(JSON.stringify({ error: 'Invalid price ID' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    let customerId: string | null = null\n    let userId: string | null = null\n\n    \n\n    // If no customer ID yet (unauthenticated user), let Stripe collect email\n    if (!customerId && email) {\n      // Only create customer if email is provided, otherwise let Stripe handle it\n      // Add location suffix for testing currency conversion\n      let customerEmail = email\n      if (currency === 'TRY') {\n        // Add Turkish location suffix for testing\n        customerEmail = customerEmail.replace('@', '+location_TR@')\n      }\n      \n      const customerResponse = await fetch('https://api.stripe.com/v1/customers', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${stripeSecretKey}`,\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          email: customerEmail,\n          name: name || 'Customer',\n          'metadata[temp_user]': 'true',\n          'metadata[user_id]': userId || 'temp',\n        }),\n      })\n\n      if (!customerResponse.ok) {\n        console.error('Failed to create Stripe customer:', await customerResponse.text())\n        return new Response(JSON.stringify({ error: 'Failed to create customer' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      const customer = await customerResponse.json()\n      customerId = customer.id\n    }\n\n    // Get plan info for dynamic pricing\n    const plans = pricingPlans.plans as { [key: string]: any }\n    let planId = ''\n    let plan = null\n    \n    // Try to find the plan by stripePriceId\n    for (const [id, planData] of Object.entries(plans)) {\n      if (planData.stripePriceId === priceId) {\n        planId = id\n        plan = planData\n        break\n      }\n    }\n    \n    // If plan not found, try to extract plan ID from priceId (fallback)\n    if (!plan) {\n      planId = priceId.replace('price_', '')\n      plan = plans[planId]\n    }\n\n    // Create checkout session\n    const checkoutParams: any = {\n      'payment_method_types[]': 'card',\n      mode: 'payment', // One-time payment instead of subscription\n      success_url: `${env.SITE_URL || 'http://localhost:3000'}/auth/?paid=true&session_id={CHECKOUT_SESSION_ID}`,\n      cancel_url: `${env.SITE_URL || 'http://localhost:3000'}/learn-morse-code/`,\n      'metadata[user_id]': userId || 'temp',\n      'metadata[plan_id]': priceId,\n      'metadata[currency]': currency,\n      'metadata[temp_user]': userId ? 'false' : 'true',\n    }\n    \n    // Set customer or let Stripe collect email\n    if (customerId) {\n      checkoutParams.customer = customerId\n    } else {\n      // Let Stripe collect the email on the checkout page\n      // For currency testing, we can still use customer_email if provided\n      if (currency !== 'USD' && email) {\n        const countryCode = Object.values(locales).find((locale: any) => locale.currency === currency)?.locale?.split('-')[1]?.toUpperCase()\n        if (countryCode) {\n          let testEmail = email\n          testEmail = testEmail.replace('@', `+location_${countryCode}@`)\n          checkoutParams.customer_email = testEmail\n        }\n      }\n    }\n\n    // Determine language based on currency\n    let language = 'en'\n    if (currency === 'TRY') {\n      language = 'tr'\n    }\n    \n    // Get localized description from plan\n    const description = plan?.description?.[language] || plan?.description?.en || 'Morse Code Course'\n    \n    // Use price_data to override description while keeping Adaptive Pricing\n    const basePrice = plan?.price\n    if (!basePrice) {\n      return new Response(JSON.stringify({ error: 'Plan not found' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n    \n    // Get currency code from settings\n    const currencyCode = Object.values(locales).find((locale: any) => locale.currency === currency)?.currency?.toLowerCase() || currency.toLowerCase()\n    \n    // Use the actual Stripe price ID instead of price_data when we have a promo code\n    // This ensures the promotional code can be applied correctly\n    if (promoCode) {\n      checkoutParams['line_items[0][price]'] = priceId\n      checkoutParams['line_items[0][quantity]'] = '1'\n    } else {\n      // Use price_data for dynamic pricing when no promo code\n      checkoutParams['line_items[0][price_data][currency]'] = currencyCode\n      checkoutParams['line_items[0][price_data][unit_amount]'] = basePrice.amount.toString()\n      checkoutParams['line_items[0][price_data][product_data][name]'] = plan.name?.[language] || plan.name?.en || 'Morse Code Course'\n      checkoutParams['line_items[0][price_data][product_data][description]'] = description\n      checkoutParams['line_items[0][quantity]'] = '1'\n    }\n\n    // Add promotional code if provided\n    if (promoCode) {\n      checkoutParams['discounts[0][promotion_code]'] = promoCode\n    }\n\n    const checkoutResponse = await fetch('https://api.stripe.com/v1/checkout/sessions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${stripeSecretKey}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams(checkoutParams),\n    })\n\n    if (!checkoutResponse.ok) {\n      console.error('Failed to create checkout session:', await checkoutResponse.text())\n      return new Response(JSON.stringify({ error: 'Failed to create checkout session' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    const session = await checkoutResponse.json()\n\n    return new Response(JSON.stringify({\n      url: session.url\n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    })\n\n  } catch (error) {\n    console.error('Error creating checkout session:', error)\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n} ", "async function verifyJwt(token: string, secret: string): Promise<any> {\n  try {\n    const [headerB64, payloadB64, signatureB64] = token.split('.')\n    \n    const encoder = new TextEncoder()\n    const key = await crypto.subtle.importKey(\n      'raw',\n      encoder.encode(secret),\n      { name: 'HMAC', hash: 'SHA-256' },\n      false,\n      ['verify']\n    )\n    \n    const dataToVerify = encoder.encode(`${headerB64}.${payloadB64}`)\n    const signature = Uint8Array.from(atob(signatureB64.replace(/-/g, '+').replace(/_/g, '/')), c => c.charCodeAt(0))\n    \n    const isValid = await crypto.subtle.verify('HMAC', key, signature, dataToVerify)\n    \n    if (!isValid) {\n      throw new Error('Invalid signature')\n    }\n    \n    const payload = JSON.parse(atob(payloadB64.replace(/-/g, '+').replace(/_/g, '/')))\n    \n    if (payload.exp && payload.exp < Math.floor(Date.now() / 1000)) {\n      throw new Error('Token expired')\n    }\n    \n    return payload\n  } catch (error) {\n    throw new Error('Invalid token')\n  }\n}\n\nfunction parseCookies(cookieHeader: string | null): { [key: string]: string } {\n  const cookies: { [key: string]: string } = {}\n  if (!cookieHeader) return cookies\n  \n  cookieHeader.split(';').forEach(cookie => {\n    const [name, value] = cookie.trim().split('=')\n    if (name && value) {\n      cookies[name] = decodeURIComponent(value)\n    }\n  })\n  \n  return cookies\n}\n\nasync function getUserByEmail(db: any, email: string) {\n  return await db.prepare('SELECT * FROM users WHERE email = ?').bind(email).first()\n}\n\n// Create Stripe customer portal session\nexport const onRequest = async (context: any) => {\n  try {\n    const { request, env } = context\n    const cookies = parseCookies(request.headers.get('Cookie'))\n    const token = cookies['auth-token']\n\n    if (!token) {\n      return new Response(JSON.stringify({ error: 'No authentication token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    const jwtSecret = env.JWT_SECRET\n    const stripeSecretKey = env.STRIPE_SECRET_KEY\n\n    if (!jwtSecret || !stripeSecretKey) {\n      return new Response(JSON.stringify({ error: 'Server configuration error' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    try {\n      const decoded = await verifyJwt(token, jwtSecret)\n      \n      const db = env.DB\n      if (!db) {\n        return new Response(JSON.stringify({ error: 'Database not available' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      const user = await getUserByEmail(db, decoded.email)\n      if (!user || !user.stripe_customer_id) {\n        return new Response(JSON.stringify({ error: 'No active subscription found' }), {\n          status: 404,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      // Create customer portal session\n      const portalResponse = await fetch('https://api.stripe.com/v1/billing_portal/sessions', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${stripeSecretKey}`,\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          customer: user.stripe_customer_id,\n          return_url: `${env.SITE_URL || 'http://localhost:3000'}/profile`,\n        }),\n      })\n\n      if (!portalResponse.ok) {\n        console.error('Failed to create portal session:', await portalResponse.text())\n        return new Response(JSON.stringify({ error: 'Failed to create portal session' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      const session = await portalResponse.json()\n\n      return new Response(JSON.stringify({\n        url: session.url\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      })\n\n    } catch (jwtError) {\n      return new Response(JSON.stringify({ error: 'Invalid or expired token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n  } catch (error) {\n    console.error('Error creating portal session:', error)\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n} ", "import { verifyJwt } from '../../../src/lib/jwt'\nimport { signJwt } from '../../../src/lib/jwt'\n\nfunction parseCookies(cookieHeader: string | null): { [key: string]: string } {\n  if (!cookieHeader) return {}\n  return cookieHeader.split(';').reduce((cookies, cookie) => {\n    const [name, value] = cookie.trim().split('=')\n    cookies[name] = value\n    return cookies\n  }, {} as { [key: string]: string })\n}\n\nasync function getUserByEmail(db: any, email: string) {\n  return await db.prepare('SELECT * FROM users WHERE email = ?').bind(email).first()\n}\n\nasync function createUserAccount(db: any, email: string, loginMethod: string, stripeCustomerId?: string) {\n  const stmt = db.prepare(`\n    INSERT OR IGNORE INTO users (email, preferred_login_method, stripe_customer_id, created_at, updated_at)\n    VALUES (?, ?, ?, datetime('now'), datetime('now'))\n  `)\n  const result = await stmt.bind(email, loginMethod, stripeCustomerId || null).run()\n  \n  // Get the user (either just created or existing)\n  const user = await db.prepare('SELECT * FROM users WHERE email = ?').bind(email).first()\n  \n  // Check if this is a new user by checking if the insert actually happened\n  const isNewUser = result.changes > 0\n  \n  return { user, isNewUser }\n}\n\nasync function updateStripeCustomerId(db: any, email: string, stripeCustomerId: string) {\n  await db.prepare(`\n    UPDATE users \n    SET stripe_customer_id = ?, updated_at = datetime('now')\n    WHERE email = ?\n  `).bind(stripeCustomerId, email).run()\n}\n\n// POST - Create user account for paid users\nexport const onRequest = async (context: { request: Request; env: any }): Promise<Response> => {\n  try {\n    const { request, env } = context\n    const { email, loginMethod, sessionId } = await request.json()\n\n    if (!email || !loginMethod) {\n      return new Response(JSON.stringify({ error: 'Email and login method are required' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    const db = env.DB\n    if (!db) {\n      return new Response(JSON.stringify({ error: 'Database not available' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    // If sessionId is provided, try to find the Stripe customer ID\n    let stripeCustomerId: string | null = null\n    if (sessionId) {\n      try {\n        const stripeSecretKey = env.STRIPE_SECRET_KEY\n        if (stripeSecretKey) {\n          const sessionResponse = await fetch(`https://api.stripe.com/v1/checkout/sessions/${sessionId}`, {\n            headers: {\n              'Authorization': `Bearer ${stripeSecretKey}`,\n            },\n          })\n          \n          if (sessionResponse.ok) {\n            const session = await sessionResponse.json()\n            if (session.customer) {\n              stripeCustomerId = session.customer\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching Stripe session:', error)\n        // Continue without Stripe customer ID\n      }\n    }\n\n    // Create or update user account\n    const { user, isNewUser } = await createUserAccount(db, email.toLowerCase(), loginMethod, stripeCustomerId || undefined)\n\n    // If we found a Stripe customer ID but the user already exists, update it\n    if (stripeCustomerId && !isNewUser) {\n      await updateStripeCustomerId(db, email.toLowerCase(), stripeCustomerId)\n    }\n\n    // Generate JWT token\n    const jwtSecret = env.JWT_SECRET\n    if (!jwtSecret) {\n      return new Response(JSON.stringify({ error: 'JWT secret not configured' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    const jwtToken = await signJwt(\n      {\n        sub: user.id.toString(),\n        email: user.email,\n        login_method: loginMethod,\n      },\n      jwtSecret,\n      7 * 24 * 60 * 60 // 7 days\n    )\n\n    // Set cookie with appropriate security settings\n    const isProduction = env.SITE_URL?.startsWith('https://') || false\n    const secureFlag = isProduction ? 'Secure; ' : ''\n    \n    const headers = new Headers({\n      'Content-Type': 'application/json',\n      'Set-Cookie': `auth-token=${jwtToken}; HttpOnly; Path=/; ${secureFlag}SameSite=Lax; Max-Age=${7 * 24 * 60 * 60}`\n    })\n\n    return new Response(JSON.stringify({\n      success: true,\n      user: {\n        id: user.id,\n        email: user.email,\n        subscription_status: user.subscription_status\n      },\n      isNewUser\n    }), {\n      status: 200,\n      headers\n    })\n\n  } catch (error) {\n    console.error('Error creating user account:', error)\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n}\n", "import { verifyJwt } from '../../../src/lib/jwt'\n\nasync function handlePaymentWithoutCustomer(db: any, session: any, stripeSecretKey: string, resendApiKey?: string) {\n  try {\n    const { customer_details, amount_total, currency, metadata } = session\n    \n    if (!customer_details?.email) {\n      console.error('No customer email found in session')\n      return\n    }\n\n    const email = customer_details.email.toLowerCase()\n    \n    // Send immediate payment confirmation email\n    if (resendApiKey) {\n      try {\n        await sendPaymentConfirmationEmail(email, {\n          amount: amount_total / 100, // Convert from cents\n          currency: currency.toUpperCase(),\n          sessionId: session.id\n        }, resendApiKey)\n        console.log(`Payment confirmation email sent to: ${email}`)\n      } catch (error) {\n        console.error('Failed to send payment confirmation email:', error)\n      }\n    }\n\n    // Try to find existing user by email\n    let user = await db.prepare('SELECT * FROM users WHERE email = ?').bind(email).first()\n    \n    if (user) {\n      // Existing user - create/update Stripe customer and link\n      console.log(`Found existing user for email: ${email}`)\n      \n      // Create Stripe customer if needed\n      const customerResponse = await fetch('https://api.stripe.com/v1/customers', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${stripeSecretKey}`,\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          email: email,\n          name: customer_details.name || 'Customer',\n          'metadata[user_id]': user.id.toString(),\n          'metadata[session_id]': session.id,\n        }),\n      })\n\n      if (customerResponse.ok) {\n        const customer = await customerResponse.json()\n        \n        // Update user with Stripe customer ID\n        await db.prepare(`\n          UPDATE users \n          SET stripe_customer_id = ?, updated_at = datetime('now')\n          WHERE id = ?\n        `).bind(customer.id, user.id).run()\n        \n        // Process subscription update\n        await updateUserSubscription(db, customer.id, session)\n        await createInvoiceRecord(db, customer.id, session, stripeSecretKey)\n        \n        console.log(`Linked payment to existing user ${user.id} with new customer ${customer.id}`)\n      }\n    } else {\n      // New user - store payment info for when they sign up\n      console.log(`No existing user found for email: ${email} - storing payment for later linking`)\n      \n      // Store pending payment info\n      await db.prepare(`\n        INSERT INTO pending_payments (\n          email, session_id, amount_total, currency, customer_name,\n          created_at\n        ) VALUES (?, ?, ?, ?, ?, datetime('now'))\n      `).bind(\n        email,\n        session.id,\n        amount_total,\n        currency,\n        customer_details.name || 'Customer'\n      ).run()\n      \n      console.log(`Stored pending payment for email: ${email}`)\n    }\n  } catch (error) {\n    console.error('Error handling payment without customer:', error)\n  }\n}\n\nasync function sendPaymentConfirmationEmail(email: string, payment: any, resendApiKey: string) {\n  const emailResponse = await fetch('https://api.resend.com/emails', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${resendApiKey}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      from: 'noreply@email.morsexpress.com',\n      to: email,\n      subject: 'Payment Confirmation - MorseXpress',\n      html: `\n        <h2>Payment Confirmation</h2>\n        <p>Thank you for your payment!</p>\n        <p><strong>Amount:</strong> ${payment.currency} ${payment.amount}</p>\n        <p><strong>Session ID:</strong> ${payment.sessionId}</p>\n        <p>To access your purchase, please create an account or sign in with this email address.</p>\n        <p><a href=\"https://morsexpress.com/auth?paid=true&session_id=${payment.sessionId}\">Complete Your Account Setup</a></p>\n      `,\n    }),\n  })\n\n  if (!emailResponse.ok) {\n    throw new Error(`Failed to send email: ${await emailResponse.text()}`)\n  }\n}\n\nasync function updateUserSubscription(db: any, customerId: string, paymentData: any) {\n  const { id, status, amount_total, currency, metadata } = paymentData\n  \n  // Determine plan from metadata or payment amount\n  let planId = metadata?.plan_id || 'basic'\n  let subscriptionStatus = 'free'\n  \n  // Map payment amounts to plans\n  if (amount_total === 1999) planId = 'basic'\n  else if (amount_total === 3999) planId = 'pro'\n  else if (amount_total === 7900) planId = 'lifetime'\n  \n  // Set subscription status based on plan\n  if (planId === 'basic') subscriptionStatus = 'basic'\n  else if (planId === 'pro') subscriptionStatus = 'active'\n  else if (planId === 'lifetime') subscriptionStatus = 'lifetime'\n\n  await db.prepare(`\n    UPDATE users \n    SET \n      subscription_status = ?, \n      subscription_expires_at = datetime('now', '+1 year'),\n      updated_at = datetime('now')\n    WHERE stripe_customer_id = ?\n  `).bind(subscriptionStatus, customerId).run()\n}\n\nasync function createInvoiceRecord(db: any, customerId: string, paymentData: any, stripeSecretKey?: string) {\n  // Get user ID from customer ID\n  let user = await db.prepare('SELECT id, email, first_name, last_name FROM users WHERE stripe_customer_id = ?').bind(customerId).first()\n  \n  if (!user && stripeSecretKey) {\n    // Fallback: try to find user by email from Stripe customer\n    try {\n      const customerResponse = await fetch(`https://api.stripe.com/v1/customers/${customerId}`, {\n        headers: {\n          'Authorization': `Bearer ${stripeSecretKey}`,\n        },\n      })\n      \n      if (customerResponse.ok) {\n        const customer = await customerResponse.json()\n        if (customer.email) {\n          // Try to find user by email\n          user = await db.prepare('SELECT id, email, first_name, last_name FROM users WHERE email = ?').bind(customer.email.toLowerCase()).first()\n          \n          if (user) {\n            // Update user with the correct Stripe customer ID\n            await db.prepare(`\n              UPDATE users \n              SET stripe_customer_id = ?, updated_at = datetime('now')\n              WHERE id = ?\n            `).bind(customerId, user.id).run()\n            \n            console.log(`Linked existing user ${user.id} to Stripe customer ${customerId}`)\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching Stripe customer for fallback:', error)\n    }\n  }\n  \n  if (!user) {\n    console.error('User not found for Stripe customer:', customerId)\n    return\n  }\n\n  // Check if user has billing address\n  const billingAddress = await db.prepare(`\n    SELECT * FROM user_billing_addresses WHERE user_id = ?\n  `).bind(user.id).first()\n\n  if (!billingAddress) {\n    console.log(`User ${user.id} has no billing address, payment will be processed when address is added`)\n    return\n  }\n\n  // Import invoice generator functions\n  const { createInvoiceRecord: generateInvoice } = await import('../../../src/lib/invoice-generator.js')\n\n  const {\n    id,\n    amount_total,\n    currency,\n    description,\n    metadata\n  } = paymentData\n\n  // Format user name\n  const userName = user.first_name && user.last_name \n    ? `${user.first_name} ${user.last_name}`.trim()\n    : 'Customer'\n\n  // Prepare invoice data\n  const invoiceData = {\n    userId: user.id,\n    userEmail: user.email,\n    userName,\n    stripeCustomerId: customerId,\n    stripeInvoiceId: id || `session_${Date.now()}`,\n    amountPaid: amount_total || 0,\n    currency: currency || 'usd',\n    description: description || 'Premium Plan Purchase',\n    billingAddress: {\n      line1: billingAddress.line1,\n      line2: billingAddress.line2,\n      city: billingAddress.city,\n      state: billingAddress.state,\n      postalCode: billingAddress.postal_code,\n      country: billingAddress.country,\n      addressType: billingAddress.address_type,\n      companyName: billingAddress.company_name,\n      taxIdType: billingAddress.tax_id_type,\n      taxIdNumber: billingAddress.tax_id_number\n    }\n  }\n\n  // Generate invoice with sequential number and proper billing snapshot\n  await generateInvoice(db, invoiceData)\n}\n\nasync function verifyStripeSignature(payload: string, signature: string, secret: string): Promise<boolean> {\n  try {\n    const elements = signature.split(',')\n    let timestamp = ''\n    let v1 = ''\n\n    for (const element of elements) {\n      const [key, value] = element.split('=')\n      if (key === 't') timestamp = value\n      if (key === 'v1') v1 = value\n    }\n\n    if (!timestamp || !v1) return false\n\n    // Create the signed payload\n    const signedPayload = `${timestamp}.${payload}`\n    \n    // Create HMAC\n    const encoder = new TextEncoder()\n    const key = await crypto.subtle.importKey(\n      'raw',\n      encoder.encode(secret),\n      { name: 'HMAC', hash: 'SHA-256' },\n      false,\n      ['sign']\n    )\n    \n    const signature_buffer = await crypto.subtle.sign('HMAC', key, encoder.encode(signedPayload))\n    const signature_array = new Uint8Array(signature_buffer)\n    const signature_hex = Array.from(signature_array)\n      .map(b => b.toString(16).padStart(2, '0'))\n      .join('')\n\n    return signature_hex === v1\n  } catch (error) {\n    console.error('Error verifying Stripe signature:', error)\n    return false\n  }\n}\n\n// Handle Stripe webhooks\nexport const onRequest = async (context: { request: Request; env: any }): Promise<Response> => {\n  try {\n    const { request, env } = context\n    \n    const stripeWebhookSecret = env.STRIPE_WEBHOOK_SECRET\n    if (!stripeWebhookSecret) {\n      console.error('STRIPE_WEBHOOK_SECRET not configured')\n      return new Response('Webhook secret not configured', { status: 500 })\n    }\n\n    const body = await request.text()\n    const signature = request.headers.get('stripe-signature')\n\n    if (!signature) {\n      console.error('Missing Stripe signature')\n      return new Response('Missing signature', { status: 400 })\n    }\n\n    // Verify webhook signature\n    const isValid = await verifyStripeSignature(body, signature, stripeWebhookSecret)\n    if (!isValid) {\n      console.error('Invalid Stripe signature')\n      return new Response('Invalid signature', { status: 400 })\n    }\n\n    const event = JSON.parse(body)\n    console.log('Stripe webhook event:', event.type)\n\n    const db = env.DB\n    if (!db) {\n      console.error('Database not available')\n      return new Response('Database error', { status: 500 })\n    }\n\n    try {\n      switch (event.type) {\n        case 'checkout.session.completed': {\n          const session = event.data.object\n          if (session.payment_status === 'paid') {\n            if (session.customer) {\n              await updateUserSubscription(db, session.customer, session)\n              await createInvoiceRecord(db, session.customer, session, env.STRIPE_SECRET_KEY)\n              console.log(`Payment completed for customer: ${session.customer}`)\n            } else {\n              console.log('Payment completed but no customer ID - creating customer from session data')\n              await handlePaymentWithoutCustomer(db, session, env.STRIPE_SECRET_KEY, env.RESEND_API_KEY)\n            }\n          }\n          break\n        }\n\n        case 'payment_intent.succeeded': {\n          const paymentIntent = event.data.object\n          if (paymentIntent.status === 'succeeded') {\n            if (paymentIntent.customer) {\n              await updateUserSubscription(db, paymentIntent.customer, paymentIntent)\n              await createInvoiceRecord(db, paymentIntent.customer, paymentIntent, env.STRIPE_SECRET_KEY)\n              console.log(`Payment succeeded for customer: ${paymentIntent.customer}`)\n            } else {\n              console.log('Payment succeeded but no customer ID - cannot process without customer')\n            }\n          }\n          break\n        }\n\n        case 'payment_intent.payment_failed': {\n          const paymentIntent = event.data.object\n          console.log(`Payment failed for customer: ${paymentIntent.customer}`)\n          // Could send email notification here\n          break\n        }\n\n        case 'invoice.payment_succeeded':\n        case 'invoice.payment_failed': {\n          const invoice = event.data.object\n          await createInvoiceRecord(db, invoice.customer, invoice)\n          console.log(`Recorded invoice ${invoice.id} for customer: ${invoice.customer}`)\n          break\n        }\n\n        case 'checkout.session.expired': {\n          const session = event.data.object\n          console.log(`Checkout session expired: ${session.id}`)\n          // Could add analytics tracking or reminder emails here in the future\n          break\n        }\n\n        default:\n          console.log(`Unhandled event type: ${event.type}`)\n      }\n\n      return new Response(JSON.stringify({ received: true }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      })\n\n    } catch (dbError) {\n      console.error('Database error processing webhook:', dbError)\n      return new Response('Database error', { status: 500 })\n    }\n\n  } catch (error) {\n    console.error('Error processing Stripe webhook:', error)\n    return new Response('Webhook error', { status: 500 })\n  }\n} ", "import { verifyJwt } from '../../../src/lib/jwt'\n\nexport async function onRequestOptions() {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  })\n}\n\nexport async function onRequestGet(context: any) {\n  try {\n    const { request, env, params } = context\n    const invoiceNumber = params.invoiceNumber\n    \n    // Get JWT token from cookie\n    const cookieHeader = request.headers.get('Cookie')\n    let token: string | null = null\n    \n    if (cookieHeader) {\n      const cookies = cookieHeader.split('; ')\n      const authCookie = cookies.find((c: string) => c.startsWith('auth-token='))\n      if (authCookie) {\n        token = authCookie.split('=')[1]\n      }\n    }\n\n    if (!token) {\n      return new Response(JSON.stringify({ error: 'No authentication token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    const jwtSecret = env.JWT_SECRET\n    if (!jwtSecret) {\n      return new Response(JSON.stringify({ error: 'JWT secret not configured' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    try {\n      const payload = await verifyJwt(token, jwtSecret)\n      if (!payload) {\n        return new Response(JSON.stringify({ error: 'Invalid token' }), {\n          status: 401,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      const db = env.DB\n      if (!db) {\n        return new Response(JSON.stringify({ error: 'Database not available' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      // Get invoice by number and verify user ownership\n      const invoice = await db.prepare(`\n        SELECT * FROM stripe_invoices \n        WHERE invoice_number = ? AND user_id = ?\n      `).bind(invoiceNumber, payload.sub).first()\n\n      if (!invoice) {\n        return new Response(JSON.stringify({ error: 'Invoice not found' }), {\n          status: 404,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      // Get URL parameters to determine response format\n      const url = new URL(request.url)\n      const format = url.searchParams.get('format') || 'json'\n\n      if (format === 'pdf') {\n        // Generate HTML content for PDF conversion\n        const htmlContent = generateInvoiceHTML(invoice)\n        \n        // For now, we'll return the HTML with PDF headers to trigger browser PDF generation\n        // In production, you might want to use a PDF generation service like Puppeteer or jsPDF\n        return new Response(htmlContent, {\n          status: 200,\n          headers: {\n            'Content-Type': 'text/html',\n            'Content-Disposition': `inline; filename=\"${invoice.invoice_number}.html\"`\n          }\n        })\n      } else {\n        // Return invoice data as JSON\n        return new Response(JSON.stringify({\n          invoice: {\n            invoiceNumber: invoice.invoice_number,\n            invoiceType: invoice.invoice_type,\n            invoiceDate: invoice.invoice_date,\n            dueDate: invoice.due_date,\n            status: invoice.status,\n            description: invoice.description,\n            billingName: invoice.billing_name,\n            billingEmail: invoice.billing_email,\n            billingAddress: {\n              line1: invoice.billing_address_line1,\n              line2: invoice.billing_address_line2,\n              city: invoice.billing_city,\n              state: invoice.billing_state,\n              postalCode: invoice.billing_postal_code,\n              country: invoice.billing_country\n            },\n            amounts: {\n              subtotal: invoice.subtotal_amount,\n              taxRate: invoice.tax_rate,\n              taxAmount: invoice.tax_amount,\n              taxDescription: invoice.tax_description,\n              total: invoice.total_amount,\n              currency: invoice.currency\n            },\n            creditNoteForInvoiceId: invoice.credit_note_for_invoice_id,\n            createdAt: invoice.created_at\n          }\n        }), {\n          status: 200,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n    } catch (jwtError) {\n      return new Response(JSON.stringify({ error: 'Invalid or expired token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n  } catch (error) {\n    console.error('Error retrieving invoice:', error)\n    return new Response(JSON.stringify({ \n      error: \"Internal server error\" \n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n}\n\n/**\n * Generates a professional HTML invoice for Affensus Limited / MorseXpress\n * This HTML is designed to be easily convertible to PDF via browser print or PDF services\n */\nfunction generateInvoiceHTML(invoice: any): string {\n  const isCredit = invoice.invoice_type === 'credit_note'\n  const amountPrefix = isCredit ? '-' : ''\n  const documentTitle = isCredit ? 'CREDIT NOTE' : 'INVOICE'\n  \n  // Format amounts with proper currency display\n  const formatAmount = (amount: number) => {\n    const formatted = Math.abs(amount / 100).toFixed(2)\n    return `${amountPrefix}$${formatted} ${(invoice.currency || 'USD').toUpperCase()}`\n  }\n  \n  const html = `\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>${documentTitle} ${invoice.invoice_number}</title>\n    <style>\n        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n        \n        * { box-sizing: border-box; }\n        \n        body { \n            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; \n            margin: 0; \n            padding: 40px; \n            color: #1a1a1a;\n            line-height: 1.6;\n            font-size: 14px;\n        }\n        \n        .invoice-container {\n            max-width: 800px;\n            margin: 0 auto;\n            background: white;\n        }\n        \n        /* Header Section */\n        .header {\n            display: flex;\n            justify-content: space-between;\n            align-items: flex-start;\n            padding-bottom: 30px;\n            border-bottom: 3px solid #2563eb;\n            margin-bottom: 40px;\n        }\n        \n        .company-info {\n            flex: 1;\n        }\n        \n        .company-logo {\n            display: flex;\n            align-items: center;\n            margin-bottom: 20px;\n        }\n        \n        .company-name {\n            font-size: 28px;\n            font-weight: 700;\n            color: #2563eb;\n            margin-bottom: 8px;\n        }\n        \n        .company-tagline {\n            font-size: 16px;\n            color: #6b7280;\n            font-weight: 500;\n            margin-bottom: 20px;\n        }\n        \n        .company-details {\n            font-size: 13px;\n            color: #374151;\n            line-height: 1.8;\n        }\n        \n        .company-details strong {\n            font-weight: 600;\n            color: #1f2937;\n        }\n        \n        .document-info {\n            text-align: right;\n            flex-shrink: 0;\n            margin-left: 40px;\n        }\n        \n        .document-title {\n            font-size: 36px;\n            font-weight: 700;\n            color: ${isCredit ? '#dc2626' : '#2563eb'};\n            margin-bottom: 10px;\n            letter-spacing: -0.5px;\n        }\n        \n        .document-subtitle {\n            font-size: 14px;\n            color: #6b7280;\n            margin-bottom: 20px;\n        }\n        \n        .document-meta {\n            background: ${isCredit ? '#fef2f2' : '#eff6ff'};\n            padding: 20px;\n            border-radius: 8px;\n            border-left: 4px solid ${isCredit ? '#dc2626' : '#2563eb'};\n        }\n        \n        .document-meta-row {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 8px;\n        }\n        \n        .document-meta-row:last-child {\n            margin-bottom: 0;\n        }\n        \n        .meta-label {\n            font-weight: 500;\n            color: #374151;\n        }\n        \n        .meta-value {\n            font-weight: 600;\n            color: #1f2937;\n        }\n        \n        /* Billing Section */\n        .billing-section {\n            display: flex;\n            justify-content: space-between;\n            margin: 40px 0;\n            gap: 40px;\n        }\n        \n        .billing-from, .billing-to {\n            flex: 1;\n        }\n        \n        .billing-header {\n            font-size: 16px;\n            font-weight: 600;\n            color: #1f2937;\n            margin-bottom: 15px;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n        }\n        \n        .billing-details {\n            background: #f9fafb;\n            padding: 20px;\n            border-radius: 8px;\n            border: 1px solid #e5e7eb;\n        }\n        \n        .billing-name {\n            font-weight: 600;\n            color: #1f2937;\n            font-size: 16px;\n            margin-bottom: 8px;\n        }\n        \n        .billing-address {\n            color: #374151;\n            line-height: 1.7;\n        }\n        \n        /* Line Items */\n        .line-items {\n            margin: 40px 0;\n        }\n        \n        .line-items-header {\n            font-size: 18px;\n            font-weight: 600;\n            color: #1f2937;\n            margin-bottom: 20px;\n        }\n        \n        .items-table {\n            width: 100%;\n            border-collapse: collapse;\n            border-radius: 8px;\n            overflow: hidden;\n            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n        }\n        \n        .items-table th {\n            background: #f9fafb;\n            padding: 16px;\n            text-align: left;\n            font-weight: 600;\n            color: #374151;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n            font-size: 12px;\n            border-bottom: 1px solid #e5e7eb;\n        }\n        \n        .items-table td {\n            padding: 16px;\n            border-bottom: 1px solid #e5e7eb;\n            color: #1f2937;\n        }\n        \n        .items-table .amount-cell {\n            text-align: right;\n            font-weight: 600;\n            font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\n        }\n        \n        .credit-amount {\n            color: #dc2626;\n        }\n        \n        /* Totals Section */\n        .totals-section {\n            margin-top: 40px;\n            display: flex;\n            justify-content: flex-end;\n        }\n        \n        .totals-table {\n            width: 350px;\n        }\n        \n        .total-row {\n            display: flex;\n            justify-content: space-between;\n            padding: 12px 0;\n            border-bottom: 1px solid #e5e7eb;\n        }\n        \n        .total-row:last-child {\n            border-bottom: none;\n            border-top: 3px solid #2563eb;\n            padding-top: 16px;\n            margin-top: 8px;\n            font-weight: 700;\n            font-size: 18px;\n        }\n        \n        .total-label {\n            color: #374151;\n        }\n        \n        .total-amount {\n            font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;\n            font-weight: 600;\n            color: #1f2937;\n        }\n        \n        .final-total .total-amount {\n            color: ${isCredit ? '#dc2626' : '#2563eb'};\n        }\n        \n        /* Footer */\n        .footer {\n            margin-top: 60px;\n            padding-top: 30px;\n            border-top: 2px solid #e5e7eb;\n            display: flex;\n            justify-content: space-between;\n            align-items: flex-end;\n        }\n        \n        .footer-left {\n            flex: 1;\n        }\n        \n        .footer-note {\n            font-size: 14px;\n            color: #6b7280;\n            line-height: 1.6;\n            margin-bottom: 20px;\n        }\n        \n        .footer-legal {\n            font-size: 11px;\n            color: #9ca3af;\n            line-height: 1.5;\n        }\n        \n        .footer-right {\n            text-align: right;\n            margin-left: 40px;\n        }\n        \n        .signature-section {\n            margin-bottom: 20px;\n        }\n        \n        .signature-label {\n            font-size: 12px;\n            color: #6b7280;\n            margin-bottom: 10px;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n        }\n        \n        .signature-placeholder {\n            width: 200px;\n            height: 60px;\n            border-bottom: 1px solid #d1d5db;\n            position: relative;\n        }\n        \n        .authorized-signature {\n            font-size: 11px;\n            color: #9ca3af;\n            margin-top: 5px;\n        }\n        \n        /* Print Styles */\n        @media print {\n            body { margin: 0; padding: 20px; }\n            .invoice-container { box-shadow: none; }\n            .print-controls { display: none !important; }\n            .header { border-bottom: 2px solid #000 !important; }\n            .document-title { color: #000 !important; }\n            .company-name { color: #000 !important; }\n        }\n        \n        /* Print Controls */\n        .print-controls {\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            z-index: 1000;\n            background: white;\n            padding: 15px;\n            border-radius: 8px;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            border: 1px solid #e5e7eb;\n        }\n        \n        .print-button {\n            background: #2563eb;\n            color: white;\n            border: none;\n            padding: 12px 24px;\n            border-radius: 6px;\n            font-weight: 600;\n            cursor: pointer;\n            margin-right: 10px;\n            font-family: inherit;\n        }\n        \n        .print-button:hover {\n            background: #1d4ed8;\n        }\n        \n        .close-button {\n            background: #6b7280;\n            color: white;\n            border: none;\n            padding: 12px 24px;\n            border-radius: 6px;\n            font-weight: 600;\n            cursor: pointer;\n            font-family: inherit;\n        }\n        \n        .close-button:hover {\n            background: #4b5563;\n        }\n        \n        /* Credit Note Specific Styles */\n        .credit-notice {\n            background: #fef2f2;\n            border: 1px solid #fecaca;\n            border-radius: 8px;\n            padding: 16px;\n            margin: 30px 0;\n            color: #991b1b;\n            font-weight: 500;\n        }\n    </style>\n</head>\n<body>\n    <!-- Print Controls -->\n    <div class=\"print-controls\">\n        <button class=\"print-button\" onclick=\"window.print()\">Print / Save as PDF</button>\n        <button class=\"close-button\" onclick=\"window.close()\">Close</button>\n    </div>\n    \n    <div class=\"invoice-container\">\n        <!-- Header -->\n        <div class=\"header\">\n            <div class=\"company-info\">\n                <div class=\"company-logo\">\n                    <!-- Logo would go here -->\n                </div>\n                <div class=\"company-name\">MorseXpress</div>\n                <div class=\"company-tagline\">Master Morse Code Faster</div>\n                <div class=\"company-details\">\n                    <strong>Affensus Limited</strong><br>\n                    UNIT B, 3/F., KAI WAN HOUSE,<br>\n                    146 TUNG CHOI STREET,<br>\n                    MONGKOK, KLN<br>\n                    Hong Kong<br><br>\n                    <strong>Company Registration:</strong> 76782638-000-07-24-4\n                </div>\n            </div>\n            \n            <div class=\"document-info\">\n                <div class=\"document-title\">${documentTitle}</div>\n                <div class=\"document-subtitle\">${isCredit ? 'Refund Credit Note' : 'Payment Invoice'}</div>\n                <div class=\"document-meta\">\n                    <div class=\"document-meta-row\">\n                        <span class=\"meta-label\">${documentTitle} #:</span>\n                        <span class=\"meta-value\">${invoice.invoice_number}</span>\n                    </div>\n                    <div class=\"document-meta-row\">\n                        <span class=\"meta-label\">Date:</span>\n                        <span class=\"meta-value\">${new Date(invoice.invoice_date || invoice.created_at).toLocaleDateString('en-US', { \n                          year: 'numeric', month: 'long', day: 'numeric' \n                        })}</span>\n                    </div>\n                    <div class=\"document-meta-row\">\n                        <span class=\"meta-label\">Due Date:</span>\n                        <span class=\"meta-value\">${new Date(invoice.due_date || invoice.created_at).toLocaleDateString('en-US', { \n                          year: 'numeric', month: 'long', day: 'numeric' \n                        })}</span>\n                    </div>\n                    <div class=\"document-meta-row\">\n                        <span class=\"meta-label\">Status:</span>\n                        <span class=\"meta-value\">${(invoice.status || 'PAID').toUpperCase()}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        ${isCredit ? `\n        <div class=\"credit-notice\">\n            <strong>\u26A0\uFE0F Credit Note Notice:</strong> This document represents a refund issued for your original purchase. \n            The refund amount will be credited back to your original payment method within 3-5 business days.\n        </div>\n        ` : ''}\n        \n        <!-- Billing Information -->\n        <div class=\"billing-section\">\n            <div class=\"billing-from\">\n                <div class=\"billing-header\">From</div>\n                <div class=\"billing-details\">\n                    <div class=\"billing-name\">Affensus Limited</div>\n                    <div class=\"billing-address\">\n                        UNIT B, 3/F., KAI WAN HOUSE<br>\n                        146 TUNG CHOI STREET<br>\n                        MONGKOK, KLN<br>\n                        Hong Kong<br><br>\n                        <strong>Registration:</strong> 76782638-000-07-24-4<br>\n                        <strong>Contact:</strong> support@morsexpress.com\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"billing-to\">\n                <div class=\"billing-header\">Bill To</div>\n                <div class=\"billing-details\">\n                    <div class=\"billing-name\">${invoice.billing_name || 'Customer'}</div>\n                    <div class=\"billing-address\">\n                        ${invoice.billing_email || ''}<br>\n                        ${invoice.billing_address_line1 || ''}<br>\n                        ${invoice.billing_address_line2 ? invoice.billing_address_line2 + '<br>' : ''}\n                        ${invoice.billing_city || ''}, ${invoice.billing_state || ''} ${invoice.billing_postal_code || ''}<br>\n                        ${invoice.billing_country || ''}\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <!-- Line Items -->\n        <div class=\"line-items\">\n            <div class=\"line-items-header\">Items & Services</div>\n            <table class=\"items-table\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 70%;\">Description</th>\n                        <th style=\"width: 30%;\" class=\"amount-cell\">Amount</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>\n                            <strong>${invoice.description || 'MorseXpress Premium Subscription'}</strong><br>\n                            <span style=\"color: #6b7280; font-size: 13px;\">\n                                ${isCredit ? 'Refund for premium subscription purchase' : 'One-time payment for premium features and content'}\n                            </span>\n                        </td>\n                        <td class=\"amount-cell ${isCredit ? 'credit-amount' : ''}\">\n                            ${formatAmount(invoice.subtotal_amount || invoice.total_amount || invoice.amount_paid)}\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n        \n        <!-- Totals -->\n        <div class=\"totals-section\">\n            <div class=\"totals-table\">\n                <div class=\"total-row\">\n                    <span class=\"total-label\">Subtotal:</span>\n                    <span class=\"total-amount ${isCredit ? 'credit-amount' : ''}\">\n                        ${formatAmount(invoice.subtotal_amount || invoice.total_amount || invoice.amount_paid)}\n                    </span>\n                </div>\n                <div class=\"total-row\">\n                    <span class=\"total-label\">Tax (${(invoice.tax_rate || 0)}%):</span>\n                    <span class=\"total-amount ${isCredit ? 'credit-amount' : ''}\">\n                        ${formatAmount(invoice.tax_amount || 0)}\n                    </span>\n                </div>\n                ${invoice.tax_description ? `\n                <div class=\"total-row\" style=\"border: none; padding: 4px 0; font-size: 12px;\">\n                    <span class=\"total-label\" style=\"color: #6b7280;\">${invoice.tax_description}</span>\n                    <span></span>\n                </div>\n                ` : ''}\n                <div class=\"total-row final-total\">\n                    <span class=\"total-label\">Total:</span>\n                    <span class=\"total-amount ${isCredit ? 'credit-amount' : ''}\">\n                        ${formatAmount(invoice.total_amount || invoice.amount_paid)}\n                    </span>\n                </div>\n            </div>\n        </div>\n        \n        <!-- Footer -->\n        <div class=\"footer\">\n            <div class=\"footer-left\">\n                <div class=\"footer-note\">\n                    ${isCredit ? \n                      `<strong>Refund processed successfully.</strong> We're sorry to see you go! Your refund will be credited back to your original payment method within 3-5 business days.` :\n                      `Thank you for choosing MorseXpress! Your payment enables us to continue providing quality Morse code education and tools.`\n                    }\n                </div>\n                <div class=\"footer-legal\">\n                    This ${documentTitle.toLowerCase()} was generated on ${new Date().toLocaleDateString('en-US', { \n                      year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' \n                    })}.<br>\n                    ${isCredit ? 'This is an official credit note for refund processing.' : 'This is an official invoice for services rendered.'}<br>\n                    Affensus Limited \u2022 Hong Kong Company Registration: 76782638-000-07-24-4\n                </div>\n            </div>\n            \n            <div class=\"footer-right\">\n                <div class=\"signature-section\">\n                    <div class=\"signature-label\">Authorized Signature</div>\n                    <div class=\"signature-placeholder\"></div>\n                    <div class=\"authorized-signature\">Affensus Limited</div>\n                </div>\n            </div>\n        </div>\n    </div>\n</body>\n</html>`\n  \n  return html\n}\n", "export async function onRequestPost(context: any) {\n  try {\n    const { request, env } = context\n    const { name, email, message } = await request.json()\n\n    // Validate input\n    if (!name || !email || !message) {\n      return new Response(JSON.stringify({ error: \"Missing required fields\" }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    if (!emailRegex.test(email)) {\n      return new Response(JSON.stringify({ error: \"Invalid email format\" }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    // Basic spam protection\n    if (message.length > 5000) {\n      return new Response(JSON.stringify({ error: \"Message too long\" }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    // Log the contact submission (in production, you'd send an email or save to database)\n    console.log(`Contact form submission from ${email}:`, {\n      name,\n      email,\n      message: message.substring(0, 100) + (message.length > 100 ? '...' : '')\n    })\n\n    // TODO: Implement actual email sending or database storage\n    // For now, we'll just return success\n\n    return new Response(JSON.stringify({ \n      message: \"Thank you for your message. We'll get back to you soon!\" \n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    })\n\n  } catch (error) {\n    console.error('Error processing contact form:', error)\n    return new Response(JSON.stringify({ error: \"Internal server error\" }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n} ", "export async function onRequestGet(context: { env: any, request: Request }): Promise<Response> {\n  const { env } = context;\n  \n  const uptimeKumaUrl = env.UPTIME_KUMA_URL;\n  const uptimeKumaSecret = env.UPTIME_KUMA_SECRET;\n  \n  if (!uptimeKumaSecret || !uptimeKumaUrl) {\n    return new Response(JSON.stringify({ \n      error: 'Missing credentials',\n      hasSecret: !!uptimeKumaSecret,\n      hasUrl: !!uptimeKumaUrl \n    }), {\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  const debugInfo: any = {\n    url: uptimeKumaUrl,\n    timestamp: new Date().toISOString(),\n    cloudflareHeaders: {},\n    testResults: []\n  };\n\n  // Capture Cloudflare-specific request info\n  const cfHeaders = ['cf-ray', 'cf-ipcountry', 'cf-connecting-ip'];\n  cfHeaders.forEach(header => {\n    const value = context.request.headers.get(header);\n    if (value) debugInfo.cloudflareHeaders[header] = value;\n  });\n\n  // Test 1: Basic connectivity\n  try {\n    const testUrl = `${uptimeKumaUrl}/metrics`;\n    const response = await fetch(testUrl, {\n      method: 'HEAD',\n      headers: {\n        'User-Agent': 'Cloudflare-Pages-Debug/1.0'\n      }\n    });\n    \n    debugInfo.testResults.push({\n      test: 'HEAD request',\n      status: response.status,\n      statusText: response.statusText,\n      headers: Object.fromEntries(response.headers.entries())\n    });\n  } catch (error) {\n    debugInfo.testResults.push({\n      test: 'HEAD request',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n\n  // Test 2: GET with auth\n  try {\n    const testUrl = `${uptimeKumaUrl}/metrics`;\n    const response = await fetch(testUrl, {\n      headers: {\n        'Authorization': `Basic ${btoa(':' + uptimeKumaSecret)}`,\n        'Accept': 'text/plain',\n        'User-Agent': 'Cloudflare-Pages-Debug/1.0'\n      }\n    });\n    \n    debugInfo.testResults.push({\n      test: 'GET with auth',\n      status: response.status,\n      statusText: response.statusText,\n      responsePreview: response.ok ? (await response.text()).substring(0, 200) : 'Not OK'\n    });\n  } catch (error) {\n    debugInfo.testResults.push({\n      test: 'GET with auth',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n\n  // Test 3: Different endpoint\n  try {\n    const testUrl = uptimeKumaUrl; // Just the base URL\n    const response = await fetch(testUrl, {\n      method: 'HEAD',\n      headers: {\n        'User-Agent': 'Cloudflare-Pages-Debug/1.0'\n      }\n    });\n    \n    debugInfo.testResults.push({\n      test: 'Base URL HEAD',\n      status: response.status,\n      statusText: response.statusText\n    });\n  } catch (error) {\n    debugInfo.testResults.push({\n      test: 'Base URL HEAD',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n\n  return new Response(JSON.stringify(debugInfo, null, 2), {\n    headers: { 'Content-Type': 'application/json' }\n  });\n}\n", "export async function onRequestPost(context: any) {\n  const { env } = context\n  \n  // Set cookie clearing with appropriate security settings\n  const isProduction = env.SITE_URL?.startsWith('https://') || false\n  const secureFlag = isProduction ? 'Secure; ' : ''\n  const clearCookieHeader = `auth-token=; HttpOnly; ${secureFlag}SameSite=Lax; Max-Age=0; Path=/`\n  \n  console.log('\uD83D\uDEAA Clearing auth cookie:', clearCookieHeader)\n  \n  const response = new Response(JSON.stringify({ message: 'Logged out successfully' }), {\n    status: 200,\n    headers: { 'Content-Type': 'application/json' }\n  })\n\n  // Clear the auth cookie\n  response.headers.set('Set-Cookie', clearCookieHeader)\n\n  return response\n} ", "async function signJwt(payload: any, secret: string, expiresIn: number): Promise<string> {\n  const header = { alg: 'HS256', typ: 'JWT' }\n  const now = Math.floor(Date.now() / 1000)\n  const exp = now + expiresIn\n  \n  const jwtPayload = { ...payload, iat: now, exp }\n  \n  const encoder = new TextEncoder()\n  const key = await crypto.subtle.importKey(\n    'raw',\n    encoder.encode(secret),\n    { name: 'HMAC', hash: 'SHA-256' },\n    false,\n    ['sign']\n  )\n  \n  const headerB64 = btoa(JSON.stringify(header)).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n  const payloadB64 = btoa(JSON.stringify(jwtPayload)).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n  \n  const signatureArrayBuffer = await crypto.subtle.sign(\n    'HMAC',\n    key,\n    encoder.encode(`${headerB64}.${payloadB64}`)\n  )\n  \n  const signatureB64 = btoa(String.fromCharCode(...new Uint8Array(signatureArrayBuffer)))\n    .replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')\n  \n  return `${headerB64}.${payloadB64}.${signatureB64}`\n}\n\nasync function getMagicLinkByToken(db: any, token: string) {\n  return await db.prepare(`\n    SELECT * FROM magic_links \n    WHERE token = ? AND used_at IS NULL AND expires_at > datetime('now')\n  `).bind(token).first()\n}\n\nasync function markMagicLinkAsUsed(db: any, token: string) {\n  await db.prepare(`\n    UPDATE magic_links \n    SET used_at = datetime('now')\n    WHERE token = ?\n  `).bind(token).run()\n}\n\nasync function getUserByEmail(db: any, email: string) {\n  return await db.prepare('SELECT * FROM users WHERE email = ?').bind(email).first()\n}\n\nasync function updatePreferredLoginMethod(db: any, email: string, method: string) {\n  await db.prepare(`\n    UPDATE users \n    SET preferred_login_method = ?, updated_at = datetime('now')\n    WHERE email = ?\n  `).bind(method, email).run()\n}\n\nasync function processPendingPayments(db: any, email: string, userId: number, stripeSecretKey?: string) {\n  try {\n    // Check for pending payments for this email\n    const pendingPayments = await db.prepare(`\n      SELECT * FROM pending_payments \n      WHERE email = ? AND processed = 0\n    `).bind(email).all()\n\n    if (pendingPayments.results && pendingPayments.results.length > 0) {\n      console.log(`Found ${pendingPayments.results.length} pending payment(s) for ${email}`)\n      \n      for (const payment of pendingPayments.results) {\n        try {\n          if (stripeSecretKey) {\n            // Get the session details from Stripe\n            const sessionResponse = await fetch(`https://api.stripe.com/v1/checkout/sessions/${payment.session_id}`, {\n              headers: {\n                'Authorization': `Bearer ${stripeSecretKey}`,\n              },\n            })\n\n            if (sessionResponse.ok) {\n              const session = await sessionResponse.json()\n              \n              // Create Stripe customer for this user\n              const customerResponse = await fetch('https://api.stripe.com/v1/customers', {\n                method: 'POST',\n                headers: {\n                  'Authorization': `Bearer ${stripeSecretKey}`,\n                  'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: new URLSearchParams({\n                  email: email,\n                  name: payment.customer_name || 'Customer',\n                  'metadata[user_id]': userId.toString(),\n                  'metadata[session_id]': payment.session_id,\n                }),\n              })\n\n              if (customerResponse.ok) {\n                const customer = await customerResponse.json()\n                \n                // Update user with Stripe customer ID\n                await db.prepare(`\n                  UPDATE users \n                  SET stripe_customer_id = ?, updated_at = datetime('now')\n                  WHERE id = ?\n                `).bind(customer.id, userId).run()\n                \n                // Import the functions from webhook (we'll need to refactor this)\n                // For now, let's create a simple subscription update\n                let subscriptionStatus = 'free'\n                if (payment.amount_total === 1999) subscriptionStatus = 'basic'\n                else if (payment.amount_total === 3999) subscriptionStatus = 'active'\n                else if (payment.amount_total === 7900) subscriptionStatus = 'lifetime'\n                \n                await db.prepare(`\n                  UPDATE users \n                  SET \n                    subscription_status = ?, \n                    subscription_expires_at = datetime('now', '+1 year'),\n                    updated_at = datetime('now')\n                  WHERE id = ?\n                `).bind(subscriptionStatus, userId).run()\n                \n                console.log(`Processed pending payment for user ${userId}, customer ${customer.id}`)\n              }\n            }\n          }\n          \n          // Mark payment as processed\n          await db.prepare(`\n            UPDATE pending_payments \n            SET processed = 1 \n            WHERE id = ?\n          `).bind(payment.id).run()\n          \n        } catch (error) {\n          console.error('Error processing pending payment:', error)\n        }\n      }\n    }\n  } catch (error) {\n    console.error('Error checking for pending payments:', error)\n  }\n}\n\nexport async function onRequestGet(context: any) {\n  try {\n    const { request, env } = context\n    const url = new URL(request.url)\n    const token = url.searchParams.get('token')\n\n    if (!token) {\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=missing_token` }\n      })\n    }\n\n    // Get database from environment\n    const db = env.DB\n    if (!db) {\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=database_not_available` }\n      })\n    }\n\n    try {\n      // Find magic link\n      const magicLink = await getMagicLinkByToken(db, token)\n      \n      if (!magicLink) {\n        return new Response(null, {\n          status: 302,\n          headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=invalid_or_expired_token` }\n        })\n      }\n\n      // Mark magic link as used\n      await markMagicLinkAsUsed(db, token)\n\n      // Get user\n      const user = await getUserByEmail(db, magicLink.email)\n      if (!user) {\n        return new Response(null, {\n          status: 302,\n          headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=user_not_found` }\n        })\n      }\n\n      // Update user's preferred login method\n      await updatePreferredLoginMethod(db, user.email, 'magic_link')\n\n      // Check for pending payments after user login\n      await processPendingPayments(db, user.email, user.id, env.STRIPE_SECRET_KEY)\n\n      // Generate JWT token\n      const jwtSecret = env.JWT_SECRET\n      if (!jwtSecret) {\n        return new Response(null, {\n          status: 302,\n          headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=jwt_not_configured` }\n        })\n      }\n\n      const jwtToken = await signJwt(\n        {\n          sub: user.id.toString(),\n          email: user.email,\n          login_method: 'magic_link',\n        },\n        jwtSecret,\n        7 * 24 * 60 * 60 // 7 days\n      )\n\n      // Create HTML response with localStorage and redirect\n      const html = `\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <title>Redirecting...</title>\n        </head>\n        <body>\n          <script>\n            localStorage.setItem('lastLoginMethod', 'magic_link');\n            localStorage.setItem('lastLoginTime', new Date().toISOString());\n            window.location.href = '${env.SITE_URL || 'http://localhost:3000'}/auth';\n          </script>\n          <p>Redirecting...</p>\n        </body>\n        </html>\n      `\n      \n      // Set cookie with appropriate security settings\n      const isProduction = env.SITE_URL?.startsWith('https://') || false\n      const cookieFlags = `HttpOnly; ${isProduction ? 'Secure; ' : ''}SameSite=Lax; Max-Age=${7 * 24 * 60 * 60}; Path=/`\n      const cookieHeader = `auth-token=${jwtToken}; ${cookieFlags}`\n      \n      console.log('\uD83C\uDF6A Setting cookie:', cookieHeader)\n      console.log('\uD83D\uDD11 JWT Token (first 20 chars):', jwtToken.substring(0, 20))\n      console.log('\uD83D\uDCCD Is Production:', isProduction)\n      \n      return new Response(html, {\n        status: 200,\n        headers: {\n          'Content-Type': 'text/html',\n          'Set-Cookie': cookieHeader\n        },\n      })\n\n    } catch (dbError) {\n      console.error('Database error:', dbError)\n      return new Response(null, {\n        status: 302,\n        headers: { 'Location': `${env.SITE_URL || 'http://localhost:3000'}/auth?error=database_error` }\n      })\n    }\n\n  } catch (error) {\n    console.error('Error processing magic login:', error)\n    return new Response(null, {\n      status: 302,\n      headers: { 'Location': `${context.env.SITE_URL || 'http://localhost:3000'}/auth?error=internal_error` }\n    })\n  }\n} ", "export async function onRequestPost(context: any) {\n  try {\n    const { request, env } = context\n    const { \n      category, \n      word, \n      morseCode, \n      description, \n      userEmail,\n      locale = 'en'\n    } = await request.json()\n\n    // Validate required fields\n    if (!category || !word || !description) {\n      return new Response(JSON.stringify({ \n        error: \"Missing required fields\" \n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    // Validate category\n    const validCategories = [\n      'animals', 'basic-needs', 'colors', 'commands', 'communication',\n      'countries', 'emergency', 'family-friends', 'farewells', 'fashion',\n      'feel-good-words', 'feelings', 'food-drink', 'greetings',\n      'inspirational-motivational', 'internet-slang', 'military-tactical',\n      'nature', 'navigation', 'occupations', 'questions', 'responses',\n      'romantic-personal', 'sports-games', 'tattoo', 'technology',\n      'travel-transport', 'tv-games', 'weather'\n    ]\n\n    if (!validCategories.includes(category)) {\n      return new Response(JSON.stringify({ \n        error: \"Invalid category\" \n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    // Basic validation\n    if (description.length > 1000) {\n      return new Response(JSON.stringify({ \n        error: \"Description too long (max 1000 characters)\" \n      }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    // Log the mistake report (in production, you'd save to database or send notification)\n    console.log(`Mistake report for ${category}/${word}:`, {\n      category,\n      word,\n      morseCode,\n      description: description.substring(0, 100) + (description.length > 100 ? '...' : ''),\n      userEmail,\n      locale,\n      timestamp: new Date().toISOString()\n    })\n\n    // TODO: Implement actual database storage or notification system\n    // For now, we'll just return success\n\n    return new Response(JSON.stringify({ \n      message: \"Thank you for reporting this issue. We'll review it and make corrections if necessary.\" \n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    })\n\n  } catch (error) {\n    console.error('Error processing mistake report:', error)\n    return new Response(JSON.stringify({ \n      error: \"Internal server error\" \n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n} ", "import { verifyJwt } from '../../../src/lib/jwt'\n\n// Parse cookies from header (same as /api/user)\nfunction parseCookies(cookieHeader: string | null): { [key: string]: string } {\n  const cookies: { [key: string]: string } = {}\n  if (!cookieHeader) return cookies\n  \n  const cookiePairs = cookieHeader.split('; ')\n  for (const cookie of cookiePairs) {\n    const [name, ...rest] = cookie.split('=')\n    if (name && rest.length > 0) {\n      cookies[name] = rest.join('=') // Handle values with = signs\n    }\n  }\n  \n  return cookies\n}\n\nasync function getUserById(db: any, userId: string) {\n  return await db.prepare('SELECT * FROM users WHERE id = ?').bind(userId).first()\n}\n\nasync function updateUser(db: any, userId: string, data: any) {\n  const { firstName, lastName } = data\n  \n  await db.prepare(`\n    UPDATE users \n    SET first_name = ?, last_name = ?, updated_at = datetime('now')\n    WHERE id = ?\n  `).bind(firstName, lastName, userId).run()\n  \n  return await getUserById(db, userId)\n}\n\n// GET - Get user profile\nexport async function onRequestGet(context: any) {\n  try {\n    const { request, env } = context\n    const cookies = parseCookies(request.headers.get('Cookie'))\n    const token = cookies['auth-token']\n\n    if (!token) {\n      return new Response(JSON.stringify({ error: 'No authentication token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    const jwtSecret = env.JWT_SECRET\n    if (!jwtSecret) {\n      return new Response(JSON.stringify({ error: 'JWT secret not configured' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    try {\n      const decoded = await verifyJwt(token, jwtSecret)\n      \n      if (!decoded) {\n        return new Response(JSON.stringify({ error: 'Invalid or expired token' }), {\n          status: 401,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n      \n      const db = env.DB\n      if (!db) {\n        return new Response(JSON.stringify({ error: 'Database not available' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      const user = await getUserById(db, decoded.sub)\n      if (!user) {\n        return new Response(JSON.stringify({ error: 'User not found' }), {\n          status: 404,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      // Format user data for frontend\n      const userProfile = {\n        id: user.id.toString(),\n        email: user.email,\n        firstName: user.first_name,\n        lastName: user.last_name,\n        avatarUrl: user.avatar_url,\n        subscriptionStatus: user.subscription_status || 'free',\n        stripeCustomerId: user.stripe_customer_id,\n        subscriptionExpiresAt: user.subscription_expires_at,\n        trialEndsAt: user.trial_ends_at,\n        createdAt: user.created_at,\n        updatedAt: user.updated_at\n      }\n\n      return new Response(JSON.stringify({\n        user: userProfile\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      })\n\n    } catch (jwtError) {\n      return new Response(JSON.stringify({ error: 'Invalid or expired token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n  } catch (error) {\n    console.error('Error getting user profile:', error)\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n}\n\n// PUT - Update user profile\nexport async function onRequestPut(context: any) {\n  try {\n    const { request, env } = context\n    \n    const cookies = parseCookies(request.headers.get('Cookie'))\n    const token = cookies['auth-token']\n\n    if (!token) {\n      return new Response(JSON.stringify({ error: 'No authentication token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    const jwtSecret = env.JWT_SECRET\n    if (!jwtSecret) {\n      return new Response(JSON.stringify({ error: 'JWT secret not configured' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    try {\n      const decoded = await verifyJwt(token, jwtSecret)\n      if (!decoded) {\n        return new Response(JSON.stringify({ error: 'Invalid token' }), {\n          status: 401,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n      const updateData = await request.json()\n      \n      const db = env.DB\n      if (!db) {\n        return new Response(JSON.stringify({ error: 'Database not available' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      const updatedUser = await updateUser(db, decoded.sub, updateData)\n      if (!updatedUser) {\n        return new Response(JSON.stringify({ error: 'Failed to update user' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      // Format user data for frontend\n      const userProfile = {\n        id: updatedUser.id.toString(),\n        email: updatedUser.email,\n        firstName: updatedUser.first_name,\n        lastName: updatedUser.last_name,\n        avatarUrl: updatedUser.avatar_url,\n        subscriptionStatus: updatedUser.subscription_status || 'free',\n        stripeCustomerId: updatedUser.stripe_customer_id,\n        subscriptionExpiresAt: updatedUser.subscription_expires_at,\n        trialEndsAt: updatedUser.trial_ends_at,\n        createdAt: updatedUser.created_at,\n        updatedAt: updatedUser.updated_at\n      }\n\n      return new Response(JSON.stringify({\n        user: userProfile\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      })\n\n    } catch (jwtError) {\n      return new Response(JSON.stringify({ error: 'Invalid or expired token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n  } catch (error) {\n    console.error('Error updating user profile:', error)\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n} ", "import { verifyJwt } from '../../../src/lib/jwt'\n\nexport async function onRequestOptions() {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  })\n}\n\nexport async function onRequestPost(context: any) {\n  try {\n    const { request, env } = context\n    \n    // Get JWT token from cookie\n    const cookieHeader = request.headers.get('Cookie')\n    let token: string | null = null\n    \n    if (cookieHeader) {\n      const cookies = cookieHeader.split('; ')\n      const authCookie = cookies.find((c: string) => c.startsWith('auth-token='))\n      if (authCookie) {\n        token = authCookie.split('=')[1]\n      }\n    }\n\n    if (!token) {\n      return new Response(JSON.stringify({ error: 'No authentication token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    const jwtSecret = env.JWT_SECRET\n    if (!jwtSecret) {\n      return new Response(JSON.stringify({ error: 'JWT secret not configured' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    try {\n      const payload = await verifyJwt(token, jwtSecret)\n      if (!payload) {\n        return new Response(JSON.stringify({ error: 'Invalid token' }), {\n          status: 401,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      const { description, userEmail, subscriptionStatus } = await request.json()\n\n      // Validate required fields\n      if (!description) {\n        return new Response(JSON.stringify({ \n          error: \"Description is required\" \n        }), {\n          status: 400,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      // Basic validation\n      if (description.length > 1000) {\n        return new Response(JSON.stringify({ \n          error: \"Description too long (max 1000 characters)\" \n        }), {\n          status: 400,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      // Get user's payment information from database\n      const db = env.DB\n      if (!db) {\n        return new Response(JSON.stringify({ error: 'Database not available' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      // Get user's most recent paid invoice\n      const userInvoices = await db.prepare(`\n        SELECT * FROM stripe_invoices \n        WHERE user_id = ? AND status = 'paid' AND amount_paid > 0\n        ORDER BY created_at DESC \n        LIMIT 1\n      `).bind(payload.sub).all()\n\n      if (!userInvoices.results || userInvoices.results.length === 0) {\n        return new Response(JSON.stringify({ \n          error: \"No payment found to refund\" \n        }), {\n          status: 400,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      const latestInvoice = userInvoices.results[0]\n\n      // Check if refund is within 7 days\n      const paymentDate = new Date(latestInvoice.created_at)\n      const now = new Date()\n      const daysSincePayment = Math.floor((now.getTime() - paymentDate.getTime()) / (1000 * 60 * 60 * 24))\n\n      if (daysSincePayment > 7) {\n        return new Response(JSON.stringify({ \n          error: \"Refund window has expired. Refunds are only available within 7 days of payment.\" \n        }), {\n          status: 400,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      // Check if this is a manually created invoice (fake Stripe ID)\n      if (latestInvoice.stripe_invoice_id.startsWith('manual_fix_')) {\n        // For manually created invoices, just update subscription status without Stripe refund\n        await db.prepare(`\n          UPDATE users \n          SET subscription_status = 'free', \n              subscription_expires_at = datetime('now'),\n              updated_at = datetime('now')\n          WHERE id = ?\n        `).bind(payload.sub).run()\n\n        // Create credit note for the refund\n        const { createCreditNote } = await import('../../../src/lib/invoice-generator.js')\n        const creditNote = await createCreditNote(db, latestInvoice.id, description)\n\n        // Log the manual refund\n        console.log(`Manual refund processed for user ${payload.sub}:`, {\n          userId: payload.sub,\n          userEmail: userEmail || payload.email,\n          amountRefunded: latestInvoice.amount_paid,\n          currency: latestInvoice.currency,\n          refundReason: description,\n          timestamp: new Date().toISOString()\n        })\n\n        // Send email notification for refund request\n        const resendApiKey = env.RESEND_API_KEY\n        if (resendApiKey) {\n          try {\n            await fetch('https://api.resend.com/emails', {\n              method: 'POST',\n              headers: {\n                'Authorization': `Bearer ${resendApiKey}`,\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                from: 'MorseXpress <noreply@email.morsexpress.com>',\n                to: 'info@sjoerdcopier.nl',\n                subject: 'Refund Request - MorseXpress',\n                html: `\n                  <h2>Refund Request Processed</h2>\n                  <p><strong>User:</strong> ${userEmail || payload.email}</p>\n                  <p><strong>User ID:</strong> ${payload.sub}</p>\n                  <p><strong>Amount Refunded:</strong> $${(latestInvoice.amount_paid / 100).toFixed(2)} ${latestInvoice.currency.toUpperCase()}</p>\n                  <p><strong>Refund Reason:</strong> ${description}</p>\n                  <p><strong>Processed:</strong> ${new Date().toISOString()}</p>\n                  <p><strong>Type:</strong> Manual refund (testing environment)</p>\n                `\n              }),\n            })\n            console.log('Refund notification email sent')\n          } catch (emailError) {\n            console.error('Failed to send refund notification email:', emailError)\n          }\n        }\n\n        return new Response(JSON.stringify({ \n          message: `Refund processed successfully! $${(latestInvoice.amount_paid / 100).toFixed(2)} has been refunded. Your subscription has been cancelled.`,\n          amountRefunded: latestInvoice.amount_paid,\n          currency: latestInvoice.currency,\n          note: \"This was a manual refund for testing purposes.\"\n        }), {\n          status: 200,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      // Process refund through Stripe for real payments\n      const stripeSecretKey = env.STRIPE_SECRET_KEY\n      if (!stripeSecretKey) {\n        return new Response(JSON.stringify({ error: 'Stripe not configured' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      try {\n        // Create refund through Stripe API\n        const refundResponse = await fetch('https://api.stripe.com/v1/refunds', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${stripeSecretKey}`,\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          body: new URLSearchParams({\n            payment_intent: latestInvoice.stripe_invoice_id,\n            reason: 'requested_by_customer',\n            metadata: JSON.stringify({\n              user_id: payload.sub,\n              user_email: userEmail || payload.email,\n              refund_reason: description,\n              refund_date: new Date().toISOString()\n            })\n          }),\n        })\n\n        if (!refundResponse.ok) {\n          const errorData = await refundResponse.json()\n          console.error('Stripe refund error:', errorData)\n          return new Response(JSON.stringify({ \n            error: \"Failed to process refund through Stripe\" \n          }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json' }\n          })\n        }\n\n        const refund = await refundResponse.json()\n\n        // Update user subscription status to free\n        await db.prepare(`\n          UPDATE users \n          SET subscription_status = 'free', \n              subscription_expires_at = datetime('now'),\n              updated_at = datetime('now')\n          WHERE id = ?\n        `).bind(payload.sub).run()\n\n        // Create credit note for the refund\n        const { createCreditNote } = await import('../../../src/lib/invoice-generator.js')\n        const creditNote = await createCreditNote(db, latestInvoice.id, description)\n\n        // Log the successful refund\n        console.log(`Refund processed for user ${payload.sub}:`, {\n          userId: payload.sub,\n          userEmail: userEmail || payload.email,\n          stripeRefundId: refund.id,\n          amountRefunded: latestInvoice.amount_paid,\n          currency: latestInvoice.currency,\n          refundReason: description,\n          timestamp: new Date().toISOString()\n        })\n\n        // Send email notification for refund request\n        const resendApiKey = env.RESEND_API_KEY\n        if (resendApiKey) {\n          try {\n            await fetch('https://api.resend.com/emails', {\n              method: 'POST',\n              headers: {\n                'Authorization': `Bearer ${resendApiKey}`,\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                from: 'MorseXpress <noreply@morsexpress.com>',\n                to: 'info@sjoerdcopier.nl',\n                subject: 'Refund Request - MorseXpress',\n                html: `\n                  <h2>Refund Request Processed</h2>\n                  <p><strong>User:</strong> ${userEmail || payload.email}</p>\n                  <p><strong>User ID:</strong> ${payload.sub}</p>\n                  <p><strong>Stripe Refund ID:</strong> ${refund.id}</p>\n                  <p><strong>Amount Refunded:</strong> $${(latestInvoice.amount_paid / 100).toFixed(2)} ${latestInvoice.currency.toUpperCase()}</p>\n                  <p><strong>Refund Reason:</strong> ${description}</p>\n                  <p><strong>Processed:</strong> ${new Date().toISOString()}</p>\n                  <p><strong>Type:</strong> Stripe refund (production)</p>\n                `\n              }),\n            })\n            console.log('Refund notification email sent')\n          } catch (emailError) {\n            console.error('Failed to send refund notification email:', emailError)\n          }\n        }\n\n        return new Response(JSON.stringify({ \n          message: `Refund processed successfully! $${(latestInvoice.amount_paid / 100).toFixed(2)} has been refunded to your original payment method. Your subscription has been cancelled.`,\n          refundId: refund.id,\n          amountRefunded: latestInvoice.amount_paid,\n          currency: latestInvoice.currency\n        }), {\n          status: 200,\n          headers: { 'Content-Type': 'application/json' }\n        })\n\n      } catch (stripeError) {\n        console.error('Error processing Stripe refund:', stripeError)\n        return new Response(JSON.stringify({ \n          error: \"Failed to process refund. Please contact support.\" \n        }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n    } catch (jwtError) {\n      return new Response(JSON.stringify({ error: 'Invalid or expired token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n  } catch (error) {\n    console.error('Error processing refund request:', error)\n    return new Response(JSON.stringify({ \n      error: \"Internal server error\" \n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n}\n", "// D1 Database utilities for authentication\nfunction generateToken(): string {\n  // Use Web API crypto instead of Node.js crypto for edge runtime compatibility\n  const array = new Uint8Array(32)\n  crypto.getRandomValues(array)\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('')\n}\n\nasync function createUser(db: any, email: string, loginMethod: string = 'magic_link') {\n  const stmt = db.prepare(`\n    INSERT OR IGNORE INTO users (email, preferred_login_method, created_at, updated_at)\n    VALUES (?, ?, datetime('now'), datetime('now'))\n  `)\n  const result = await stmt.bind(email, loginMethod).run()\n  \n  // Get the user (either just created or existing)\n  const user = await db.prepare('SELECT * FROM users WHERE email = ?').bind(email).first()\n  \n  // Check if this is a new user by checking if the insert actually happened\n  // SQLite changes will be > 0 if a row was inserted\n  const isNewUser = result.changes > 0\n  \n  return { user, isNewUser }\n}\n\nasync function createMagicLink(db: any, email: string, token: string) {\n  const expiresAt = new Date(Date.now() + 10 * 60 * 1000) // 10 minutes from now\n  const stmt = db.prepare(`\n    INSERT INTO magic_links (email, token, expires_at, created_at)\n    VALUES (?, ?, ?, datetime('now'))\n  `)\n  await stmt.bind(email, token, expiresAt.toISOString()).run()\n}\n\nasync function cleanupExpiredMagicLinks(db: any) {\n  await db.prepare('DELETE FROM magic_links WHERE expires_at < datetime(\"now\")').run()\n}\n\nasync function sendMagicLinkEmail(email: string, magicLinkUrl: string, resendApiKey: string) {\n  const response = await fetch('https://api.resend.com/emails', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${resendApiKey}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      from: 'noreply@email.morsexpress.com',\n      to: email,\n      subject: 'Your Magic Link for MorseXpress',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <div style=\"text-align: center; margin-bottom: 30px;\">\n            <h1 style=\"color: #1f2937; margin-bottom: 10px;\">MorseXpress</h1>\n            <h2 style=\"color: #4b5563; font-weight: normal; margin-top: 0;\">Your Magic Link</h2>\n          </div>\n          \n          <p style=\"color: #374151; font-size: 16px; line-height: 1.5;\">\n            Click the button below to sign in to your MorseXpress account. This link will expire in 10 minutes.\n          </p>\n          \n          <div style=\"text-align: center; margin: 30px 0;\">\n            <a href=\"${magicLinkUrl}\" \n               style=\"background-color: #1f2937; color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; font-weight: 600; display: inline-block;\">\n              Sign In to MorseXpress\n            </a>\n          </div>\n          \n          <p style=\"color: #6b7280; font-size: 14px; line-height: 1.5;\">\n            If the button doesn't work, copy and paste this link into your browser:\n          </p>\n          <p style=\"color: #3b82f6; font-size: 14px; word-break: break-all;\">\n            ${magicLinkUrl}\n          </p>\n          \n          <hr style=\"border: none; border-top: 1px solid #e5e7eb; margin: 30px 0;\">\n          \n          <p style=\"color: #9ca3af; font-size: 12px; text-align: center;\">\n            If you didn't request this email, you can safely ignore it.\n          </p>\n        </div>\n      `,\n      text: `\nYour Magic Link for MorseXpress\n\nClick the following link to sign in to your MorseXpress account. This link will expire in 10 minutes.\n\n${magicLinkUrl}\n\nIf you didn't request this email, you can safely ignore it.\n      `.trim()\n    })\n  })\n\n  if (!response.ok) {\n    const errorText = await response.text()\n    console.error('Resend API error:', errorText)\n    throw new Error(`Failed to send email via Resend: ${response.status} ${errorText}`)\n  }\n\n  return await response.json()\n}\n\nexport async function onRequestPost(context: any) {\n  try {\n    const { request, env } = context\n    const { email } = await request.json()\n\n    // Validate email\n    if (!email || typeof email !== 'string') {\n      return new Response(JSON.stringify({ error: 'Valid email is required' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    if (!emailRegex.test(email)) {\n      return new Response(JSON.stringify({ error: 'Invalid email format' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    // Get database from environment\n    const db = env.DB\n    if (!db) {\n      return new Response(JSON.stringify({ error: 'Database not available' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    try {\n      // Clean up expired magic links\n      await cleanupExpiredMagicLinks(db)\n\n      // Create or update user\n      const { user, isNewUser } = await createUser(db, email.toLowerCase(), 'magic_link')\n\n      // Send email notification for new users\n      if (isNewUser) {\n        const resendApiKey = env.RESEND_API_KEY\n        if (resendApiKey) {\n          try {\n            const { sendNewUserNotification } = await import('../auth/shared/email-notifications')\n            await sendNewUserNotification(user.email, 'magic_link', resendApiKey)\n          } catch (error) {\n            console.error('Failed to send new user notification:', error)\n            // Continue with normal flow even if email fails\n          }\n        } else {\n          console.log('New user registered but RESEND_API_KEY not configured - email notification skipped')\n        }\n      }\n\n      // Generate magic link token\n      const token = generateToken()\n\n      // Store magic link in database\n      await createMagicLink(db, email.toLowerCase(), token)\n\n      // Create magic link URL\n      const magicLinkUrl = `${env.SITE_URL || 'http://localhost:3000'}/api/magic-login?token=${token}`\n\n      // For development mode, return the magic link\n      if (env.NODE_ENV === 'development') {\n        console.log(`[DEV] \uD83D\uDD17 Magic link for ${email}: ${magicLinkUrl}`)\n        return new Response(JSON.stringify({ \n          message: 'Magic link generated',\n          development_link: magicLinkUrl\n        }), {\n          status: 200,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      // Check if Resend API key is available\n      const resendApiKey = env.RESEND_API_KEY\n      if (!resendApiKey) {\n        console.error('RESEND_API_KEY not configured')\n        return new Response(JSON.stringify({ error: 'Email service not configured' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      // Send email with magic link using Resend\n      try {\n        const emailResult = await sendMagicLinkEmail(email, magicLinkUrl, resendApiKey)\n        console.log(`Magic link email sent to ${email}:`, emailResult)\n\n        return new Response(JSON.stringify({ \n          message: 'Magic link sent to your email' \n        }), {\n          status: 200,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      } catch (emailError) {\n        console.error('Failed to send magic link email:', emailError)\n        return new Response(JSON.stringify({ error: 'Failed to send email' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n    } catch (dbError) {\n      console.error('Database error:', dbError)\n      return new Response(JSON.stringify({ error: 'Database operation failed' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n  } catch (error) {\n    console.error('Error processing magic link request:', error)\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n} ", "import { verifyJwt } from '../../../src/lib/jwt'\n\nexport async function onRequestOptions() {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  })\n}\n\nexport async function onRequestGet(context: { request: Request; env: any }): Promise<Response> {\n  try {\n    const { request, env } = context\n\n    // Get JWT token from cookie (since it's HttpOnly, we can only access it server-side)\n    const cookieHeader = request.headers.get('Cookie')\n    \n    let token: string | null = null\n    \n    if (cookieHeader) {\n      const cookies = cookieHeader.split('; ')\n      const authCookie = cookies.find(c => c.startsWith('auth-token='))\n      if (authCookie) {\n        const encodedToken = authCookie.split('=')[1]\n        token = decodeURIComponent(encodedToken)\n      }\n    }\n\n    if (!token) {\n      return new Response(JSON.stringify({\n        authenticated: false,\n        user: null\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    // Verify JWT token\n    const jwtSecret = env.JWT_SECRET\n    if (!jwtSecret) {\n      return new Response(JSON.stringify({\n        error: 'JWT secret not configured'\n      }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    try {\n      const payload = await verifyJwt(token, jwtSecret)\n      \n      if (!payload) {\n        return new Response(JSON.stringify({\n          authenticated: false,\n          user: null\n        }), {\n          status: 200,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      // Return user info if authenticated\n      return new Response(JSON.stringify({\n        authenticated: true,\n        user: {\n          id: payload.sub,\n          email: payload.email,\n          loginMethod: payload.login_method\n        }\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      })\n\n    } catch (error) {\n      return new Response(JSON.stringify({\n        authenticated: false,\n        user: null,\n        error: 'Invalid token'\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n  } catch (error) {\n    console.error('Error checking authentication:', error)\n    return new Response(JSON.stringify({\n      error: 'Internal server error'\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n} ", "async function verifyJwt(token: string, secret: string): Promise<any> {\n  try {\n    const [headerB64, payloadB64, signatureB64] = token.split('.')\n    \n    // Decode and verify\n    const encoder = new TextEncoder()\n    const key = await crypto.subtle.importKey(\n      'raw',\n      encoder.encode(secret),\n      { name: 'HMAC', hash: 'SHA-256' },\n      false,\n      ['verify']\n    )\n    \n    const dataToVerify = encoder.encode(`${headerB64}.${payloadB64}`)\n    const signature = Uint8Array.from(atob(signatureB64.replace(/-/g, '+').replace(/_/g, '/')), c => c.charCodeAt(0))\n    \n    const isValid = await crypto.subtle.verify('HMAC', key, signature, dataToVerify)\n    \n    if (!isValid) {\n      throw new Error('Invalid signature')\n    }\n    \n    const payload = JSON.parse(atob(payloadB64.replace(/-/g, '+').replace(/_/g, '/')))\n    \n    // Check expiration\n    if (payload.exp && payload.exp < Math.floor(Date.now() / 1000)) {\n      throw new Error('Token expired')\n    }\n    \n    return payload\n  } catch (error) {\n    throw new Error('Invalid token')\n  }\n}\n\nfunction parseCookies(cookieHeader: string | null): Record<string, string> {\n  const cookies: Record<string, string> = {}\n  if (!cookieHeader) return cookies\n  \n  cookieHeader.split(';').forEach(cookie => {\n    const parts = cookie.trim().split('=')\n    if (parts.length === 2) {\n      cookies[parts[0]] = parts[1]\n    }\n  })\n  return cookies\n}\n\nasync function getUserByEmail(db: any, email: string) {\n  return await db.prepare('SELECT * FROM users WHERE email = ?').bind(email).first()\n}\n\nexport async function onRequestGet(context: any) {\n  try {\n    const { request, env } = context\n    const cookies = parseCookies(request.headers.get('Cookie'))\n    const token = cookies['auth-token']\n\n    if (!token) {\n      return new Response(JSON.stringify({ error: 'No authentication token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    const jwtSecret = env.JWT_SECRET\n    if (!jwtSecret) {\n      return new Response(JSON.stringify({ error: 'JWT secret not configured' }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n    try {\n      const decoded = await verifyJwt(token, jwtSecret)\n      \n      // Get database from environment\n      const db = env.DB\n      if (!db) {\n        return new Response(JSON.stringify({ error: 'Database not available' }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      // Get user from database\n      const user = await getUserByEmail(db, decoded.email)\n      if (!user) {\n        return new Response(JSON.stringify({ error: 'User not found' }), {\n          status: 404,\n          headers: { 'Content-Type': 'application/json' }\n        })\n      }\n\n      return new Response(JSON.stringify({\n        preferences: {\n          preferred_login_method: user.preferred_login_method,\n          last_login_at: user.updated_at\n        },\n        user: {\n          email: user.email,\n          created_at: user.created_at,\n          updated_at: user.updated_at\n        }\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      })\n\n    } catch (jwtError) {\n      return new Response(JSON.stringify({ error: 'Invalid or expired token' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      })\n    }\n\n  } catch (error) {\n    console.error('Error fetching user preferences:', error)\n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    })\n  }\n} ", "import { locales } from '../../src/locales/settings'\n\ninterface ExchangeRateResponse {\n  result: string\n  conversion_rates: { [key: string]: number }\n}\n\ninterface CurrencyRatesResponse {\n  rates: { [key: string]: number }\n  lastUpdated: string\n  baseCurrency: string\n}\n\nexport const onRequest = async (context: any) => {\n  const { request } = context\n\n  // Set CORS headers\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type',\n  }\n\n  // Handle CORS preflight\n  if (request.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders })\n  }\n\n  try {\n    // Extract unique currencies from settings.ts\n    const supportedCurrencies = Array.from(\n      new Set(Object.values(locales).map((locale: any) => locale.currency))\n    )\n\n    // Check cache headers\n    const cacheControl = 'public, max-age=21600' // 6 hours\n    \n    const API_KEY = context.env.EXCHANGE_RATE_API_KEY\n    const BASE_CURRENCY = 'USD'\n    \n    if (!API_KEY) {\n      throw new Error('EXCHANGE_RATE_API_KEY environment variable is not set')\n    }\n    \n    // Fetch exchange rates from ExchangeRate-API\n    const apiUrl = `https://v6.exchangerate-api.com/v6/${API_KEY}/latest/${BASE_CURRENCY}`\n    \n    const response = await fetch(apiUrl)\n    \n    if (!response.ok) {\n      throw new Error(`Exchange rate API failed: ${response.status}`)\n    }\n\n    const data: ExchangeRateResponse = await response.json()\n    \n    if (data.result !== 'success') {\n      throw new Error('Invalid API response')\n    }\n\n    // Filter rates to only include supported currencies\n    const filteredRates: { [key: string]: number } = {}\n    supportedCurrencies.forEach(currency => {\n      if (data.conversion_rates[currency]) {\n        filteredRates[currency] = data.conversion_rates[currency]\n      }\n    })\n\n    const result: CurrencyRatesResponse = {\n      rates: filteredRates,\n      lastUpdated: new Date().toISOString(),\n      baseCurrency: BASE_CURRENCY\n    }\n\n    return new Response(JSON.stringify(result), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': cacheControl,\n        ...corsHeaders\n      }\n    })\n\n  } catch (error) {\n    console.error('Currency rates API error:', error)\n    \n    // Return fallback rates if API fails\n    const fallbackRates: CurrencyRatesResponse = {\n      rates: {\n        'USD': 1,\n        'TRY': 32.5 // Approximate fallback rate\n      },\n      lastUpdated: new Date().toISOString(),\n      baseCurrency: 'USD'\n    }\n\n    return new Response(JSON.stringify(fallbackRates), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'public, max-age=300', // 5 minutes cache for fallback\n        ...corsHeaders\n      },\n      status: 200 // Return 200 to not break frontend\n    })\n  }\n} ", "import { onRequestGet as __api_auth_facebook_callback_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/auth/facebook/callback.ts\"\nimport { onRequestGet as __api_auth_github_callback_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/auth/github/callback.ts\"\nimport { onRequestGet as __api_auth_google_callback_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/auth/google/callback.ts\"\nimport { onRequestGet as __api_user_progress__courseId__index_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/user/progress/[courseId]/index.ts\"\nimport { onRequestPost as __api_user_progress__courseId__index_ts_onRequestPost } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/user/progress/[courseId]/index.ts\"\nimport { onRequestGet as __api_auth_facebook_index_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/auth/facebook/index.ts\"\nimport { onRequestGet as __api_auth_github_index_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/auth/github/index.ts\"\nimport { onRequestGet as __api_auth_google_index_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/auth/google/index.ts\"\nimport { onRequestGet as __api_profile_billing_address_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/profile/billing-address.ts\"\nimport { onRequestPut as __api_profile_billing_address_ts_onRequestPut } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/profile/billing-address.ts\"\nimport { onRequestGet as __api_profile_completion_status_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/profile/completion-status.ts\"\nimport { onRequestGet as __api_profile_invoices_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/profile/invoices.ts\"\nimport { onRequestGet as __api_profile_preferences_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/profile/preferences.ts\"\nimport { onRequestOptions as __api_profile_process_pending_invoices_ts_onRequestOptions } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/profile/process-pending-invoices.ts\"\nimport { onRequestPost as __api_profile_process_pending_invoices_ts_onRequestPost } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/profile/process-pending-invoices.ts\"\nimport { onRequestPost as __api_tools_affiliate_link_checker_ts_onRequestPost } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/tools/affiliate-link-checker.ts\"\nimport { onRequestGet as __api_tools_affiliate_network_uptime_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/tools/affiliate-network-uptime.ts\"\nimport { onRequestOptions as __api_tools_affiliate_network_uptime_ts_onRequestOptions } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/tools/affiliate-network-uptime.ts\"\nimport { onRequest as __api_stripe_create_checkout_session_ts_onRequest } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/stripe/create-checkout-session.ts\"\nimport { onRequest as __api_stripe_create_portal_session_ts_onRequest } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/stripe/create-portal-session.ts\"\nimport { onRequest as __api_stripe_create_user_account_ts_onRequest } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/stripe/create-user-account.ts\"\nimport { onRequest as __api_stripe_webhook_ts_onRequest } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/stripe/webhook.ts\"\nimport { onRequestGet as __api_invoice__invoiceNumber__ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/invoice/[invoiceNumber].ts\"\nimport { onRequestOptions as __api_invoice__invoiceNumber__ts_onRequestOptions } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/invoice/[invoiceNumber].ts\"\nimport { onRequestPost as __api_contact_index_ts_onRequestPost } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/contact/index.ts\"\nimport { onRequestGet as __api_debug_uptime_connection_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/debug-uptime-connection.ts\"\nimport { onRequestPost as __api_logout_index_ts_onRequestPost } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/logout/index.ts\"\nimport { onRequestGet as __api_magic_login_index_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/magic-login/index.ts\"\nimport { onRequestPost as __api_mistake_report_index_ts_onRequestPost } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/mistake-report/index.ts\"\nimport { onRequestGet as __api_profile_index_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/profile/index.ts\"\nimport { onRequestPut as __api_profile_index_ts_onRequestPut } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/profile/index.ts\"\nimport { onRequestOptions as __api_refund_request_index_ts_onRequestOptions } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/refund-request/index.ts\"\nimport { onRequestPost as __api_refund_request_index_ts_onRequestPost } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/refund-request/index.ts\"\nimport { onRequestPost as __api_request_magic_link_index_ts_onRequestPost } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/request-magic-link/index.ts\"\nimport { onRequestGet as __api_user_index_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/user/index.ts\"\nimport { onRequestOptions as __api_user_index_ts_onRequestOptions } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/user/index.ts\"\nimport { onRequestGet as __api_user_preferences_ts_onRequestGet } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/user-preferences.ts\"\nimport { onRequest as __api_currency_rates_ts_onRequest } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/functions/api/currency-rates.ts\"\n\nexport const routes = [\n    {\n      routePath: \"/api/auth/facebook/callback\",\n      mountPath: \"/api/auth/facebook\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_auth_facebook_callback_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/auth/github/callback\",\n      mountPath: \"/api/auth/github\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_auth_github_callback_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/auth/google/callback\",\n      mountPath: \"/api/auth/google\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_auth_google_callback_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/user/progress/:courseId\",\n      mountPath: \"/api/user/progress/:courseId\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_user_progress__courseId__index_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/user/progress/:courseId\",\n      mountPath: \"/api/user/progress/:courseId\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_user_progress__courseId__index_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/auth/facebook\",\n      mountPath: \"/api/auth/facebook\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_auth_facebook_index_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/auth/github\",\n      mountPath: \"/api/auth/github\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_auth_github_index_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/auth/google\",\n      mountPath: \"/api/auth/google\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_auth_google_index_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/profile/billing-address\",\n      mountPath: \"/api/profile\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_profile_billing_address_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/profile/billing-address\",\n      mountPath: \"/api/profile\",\n      method: \"PUT\",\n      middlewares: [],\n      modules: [__api_profile_billing_address_ts_onRequestPut],\n    },\n  {\n      routePath: \"/api/profile/completion-status\",\n      mountPath: \"/api/profile\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_profile_completion_status_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/profile/invoices\",\n      mountPath: \"/api/profile\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_profile_invoices_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/profile/preferences\",\n      mountPath: \"/api/profile\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_profile_preferences_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/profile/process-pending-invoices\",\n      mountPath: \"/api/profile\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_profile_process_pending_invoices_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/profile/process-pending-invoices\",\n      mountPath: \"/api/profile\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_profile_process_pending_invoices_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/tools/affiliate-link-checker\",\n      mountPath: \"/api/tools\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_tools_affiliate_link_checker_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/tools/affiliate-network-uptime\",\n      mountPath: \"/api/tools\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_tools_affiliate_network_uptime_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/tools/affiliate-network-uptime\",\n      mountPath: \"/api/tools\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_tools_affiliate_network_uptime_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/stripe/create-checkout-session\",\n      mountPath: \"/api/stripe\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api_stripe_create_checkout_session_ts_onRequest],\n    },\n  {\n      routePath: \"/api/stripe/create-portal-session\",\n      mountPath: \"/api/stripe\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api_stripe_create_portal_session_ts_onRequest],\n    },\n  {\n      routePath: \"/api/stripe/create-user-account\",\n      mountPath: \"/api/stripe\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api_stripe_create_user_account_ts_onRequest],\n    },\n  {\n      routePath: \"/api/stripe/webhook\",\n      mountPath: \"/api/stripe\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api_stripe_webhook_ts_onRequest],\n    },\n  {\n      routePath: \"/api/invoice/:invoiceNumber\",\n      mountPath: \"/api/invoice\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_invoice__invoiceNumber__ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/invoice/:invoiceNumber\",\n      mountPath: \"/api/invoice\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_invoice__invoiceNumber__ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/contact\",\n      mountPath: \"/api/contact\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_contact_index_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/debug-uptime-connection\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_debug_uptime_connection_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/logout\",\n      mountPath: \"/api/logout\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_logout_index_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/magic-login\",\n      mountPath: \"/api/magic-login\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_magic_login_index_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/mistake-report\",\n      mountPath: \"/api/mistake-report\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_mistake_report_index_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/profile\",\n      mountPath: \"/api/profile\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_profile_index_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/profile\",\n      mountPath: \"/api/profile\",\n      method: \"PUT\",\n      middlewares: [],\n      modules: [__api_profile_index_ts_onRequestPut],\n    },\n  {\n      routePath: \"/api/refund-request\",\n      mountPath: \"/api/refund-request\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_refund_request_index_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/refund-request\",\n      mountPath: \"/api/refund-request\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_refund_request_index_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/request-magic-link\",\n      mountPath: \"/api/request-magic-link\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_request_magic_link_index_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/user\",\n      mountPath: \"/api/user\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_user_index_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/user\",\n      mountPath: \"/api/user\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_user_index_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/user-preferences\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_user_preferences_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/currency-rates\",\n      mountPath: \"/api\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api_currency_rates_ts_onRequest],\n    },\n  ]", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/.wrangler/tmp/bundle-Z404Wm/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/.wrangler/tmp/bundle-Z404Wm/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/.wrangler/tmp/bundle-Z404Wm/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/node_modules/wrangler/templates/pages-template-worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/sjoerdcopier/PhpstormProjects/affensus_web/node_modules/wrangler/templates/pages-template-worker.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "import { match } from \"path-to-regexp\";\n\n//note: this explicitly does not include the * character, as pages requires this\nconst escapeRegex = /[.+?^${}()|[\\]\\\\]/g;\n\ntype HTTPMethod =\n\t| \"HEAD\"\n\t| \"OPTIONS\"\n\t| \"GET\"\n\t| \"POST\"\n\t| \"PUT\"\n\t| \"PATCH\"\n\t| \"DELETE\";\n\n/* TODO: Grab these from @cloudflare/workers-types instead */\ntype Params<P extends string = string> = Record<P, string | string[]>;\n\ntype EventContext<Env, P extends string, Data> = {\n\trequest: Request;\n\tfunctionPath: string;\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n\tnext: (input?: Request | string, init?: RequestInit) => Promise<Response>;\n\tenv: Env & { ASSETS: { fetch: typeof fetch } };\n\tparams: Params<P>;\n\tdata: Data;\n};\n\ndeclare type PagesFunction<\n\tEnv = unknown,\n\tP extends string = string,\n\tData extends Record<string, unknown> = Record<string, unknown>,\n> = (context: EventContext<Env, P, Data>) => Response | Promise<Response>;\n/* end @cloudflare/workers-types */\n\ntype RouteHandler = {\n\troutePath: string;\n\tmountPath: string;\n\tmethod?: HTTPMethod;\n\tmodules: PagesFunction[];\n\tmiddlewares: PagesFunction[];\n};\n\n// inject `routes` via ESBuild\ndeclare const routes: RouteHandler[];\n// define `__FALLBACK_SERVICE__` via ESBuild\ndeclare const __FALLBACK_SERVICE__: string;\n\n// expect an ASSETS fetcher binding pointing to the asset-server stage\ntype FetchEnv = {\n\t[name: string]: { fetch: typeof fetch };\n\tASSETS: { fetch: typeof fetch };\n};\n\ntype WorkerContext = {\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n};\n\nfunction* executeRequest(request: Request) {\n\tconst requestPath = new URL(request.url).pathname;\n\n\t// First, iterate through the routes (backwards) and execute \"middlewares\" on partial route matches\n\tfor (const route of [...routes].reverse()) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// replaces with \"\\\\$&\", this prepends a backslash to the matched string, e.g. \"[\" becomes \"\\[\"\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult) {\n\t\t\tfor (const handler of route.middlewares.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: mountMatchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t// Then look for the first exact route match and execute its \"modules\"\n\tfor (const route of routes) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: true,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult && route.modules.length) {\n\t\t\tfor (const handler of route.modules.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: matchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport default {\n\tasync fetch(\n\t\toriginalRequest: Request,\n\t\tenv: FetchEnv,\n\t\tworkerContext: WorkerContext\n\t) {\n\t\tlet request = originalRequest;\n\t\tconst handlerIterator = executeRequest(request);\n\t\tlet data = {}; // arbitrary data the user can set between functions\n\t\tlet isFailOpen = false;\n\n\t\tconst next = async (input?: RequestInfo, init?: RequestInit) => {\n\t\t\tif (input !== undefined) {\n\t\t\t\tlet url = input;\n\t\t\t\tif (typeof input === \"string\") {\n\t\t\t\t\turl = new URL(input, request.url).toString();\n\t\t\t\t}\n\t\t\t\trequest = new Request(url, init);\n\t\t\t}\n\n\t\t\tconst result = handlerIterator.next();\n\t\t\t// Note we can't use `!result.done` because this doesn't narrow to the correct type\n\t\t\tif (result.done === false) {\n\t\t\t\tconst { handler, params, path } = result.value;\n\t\t\t\tconst context = {\n\t\t\t\t\trequest: new Request(request.clone()),\n\t\t\t\t\tfunctionPath: path,\n\t\t\t\t\tnext,\n\t\t\t\t\tparams,\n\t\t\t\t\tget data() {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t},\n\t\t\t\t\tset data(value) {\n\t\t\t\t\t\tif (typeof value !== \"object\" || value === null) {\n\t\t\t\t\t\t\tthrow new Error(\"context.data must be an object\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// user has overriden context.data, so we need to merge it with the existing data\n\t\t\t\t\t\tdata = value;\n\t\t\t\t\t},\n\t\t\t\t\tenv,\n\t\t\t\t\twaitUntil: workerContext.waitUntil.bind(workerContext),\n\t\t\t\t\tpassThroughOnException: () => {\n\t\t\t\t\t\tisFailOpen = true;\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst response = await handler(context);\n\n\t\t\t\tif (!(response instanceof Response)) {\n\t\t\t\t\tthrow new Error(\"Your Pages function should return a Response\");\n\t\t\t\t}\n\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else if (__FALLBACK_SERVICE__) {\n\t\t\t\t// There are no more handlers so finish with the fallback service (`env.ASSETS.fetch` in Pages' case)\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else {\n\t\t\t\t// There was not fallback service so actually make the request to the origin.\n\t\t\t\tconst response = await fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\treturn await next();\n\t\t} catch (error) {\n\t\t\tif (isFailOpen) {\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t},\n};\n\n// This makes a Response mutable\nconst cloneResponse = (response: Response) =>\n\t// https://fetch.spec.whatwg.org/#null-body-status\n\tnew Response(\n\t\t[101, 204, 205, 304].includes(response.status) ? null : response.body,\n\t\tresponse\n\t);\n", "/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\", delimiter = \"/#?\" } = options;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  const isSafe = (value: string): boolean => {\n    for (const char of delimiter) if (value.indexOf(char) > -1) return true;\n    return false;\n  };\n\n  const safePattern = (prefix: string) => {\n    const prev = result[result.length - 1];\n    const prevText = prefix || (prev && typeof prev === \"string\" ? prev : \"\");\n\n    if (prev && !prevText) {\n      throw new TypeError(\n        `Must have text between two parameters, missing text after \"${(prev as Key).name}\"`,\n      );\n    }\n\n    if (!prevText || isSafe(prevText)) return `[^${escapeString(delimiter)}]+?`;\n    return `(?:(?!${escapeString(prevText)})[^${escapeString(delimiter)}])+?`;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || safePattern(prefix),\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? safePattern(prefix) : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions,\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {},\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map((token) => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`,\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string,\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions,\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {},\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function (pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map((value) => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\",\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n): RegExp {\n  const parts = paths.map((path) => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp won't allow an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {},\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x,\n    delimiter = \"/#?\",\n    endsWith = \"\",\n  } = options;\n  const endsWithRe = `[${escapeString(endsWith)}]|$`;\n  const delimiterRe = `[${escapeString(delimiter)}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            throw new TypeError(\n              `Can not repeat \"${token.name}\" without a prefix and suffix`,\n            );\n          }\n\n          route += `(${token.pattern})${token.modifier}`;\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiterRe}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWithRe})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1\n        : endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiterRe}(?=${endsWithRe}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiterRe}|${endsWithRe})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": "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",
  "names": ["createUser", "db", "user", "isNewUser", "updatePreferredLoginMethod", "sendNewUserNotification", "error", "parseCookies", "signJwt", "onRequestGet", "createUser", "db", "user", "isNewUser", "updatePreferredLoginMethod", "sendNewUserNotification", "error", "init_callback", "parseCookies", "signJwt", "processPendingPayments", "onRequestGet", "createUser", "db", "user", "isNewUser", "updatePreferredLoginMethod", "error", "sendNewUserNotification", "init_callback", "onRequestGet", "onRequestGet", "onRequestGet", "onRequestGet", "signJwt", "parseCookies", "onRequestGet", "parseCookies", "onRequestGet", "onRequestGet", "onRequestGet", "onRequestPost", "processPendingInvoices", "onRequestPost", "response", "redirectedUrl", "html", "onRequestGet", "onRequestOptions", "parseCookies", "verifyJwt", "parseCookies", "onRequest", "onRequest", "signJwt", "createInvoiceRecord", "key", "onRequest", "onRequestOptions", "onRequestGet", "onRequestPost", "onRequestGet", "onRequestPost", "signJwt", "getUserByEmail", "processPendingPayments", "onRequestGet", "onRequestPost", "parseCookies", "getUserById", "onRequestGet", "onRequestPut", "onRequestOptions", "onRequestPost", "createCreditNote", "onRequestPost", "resendApiKey", "sendNewUserNotification", "onRequestOptions", "onRequestGet", "verifyJwt", "parseCookies", "getUserByEmail", "onRequestGet", "onRequest", "init_callback", "onRequestGet", "onRequestPost", "onRequestOptions", "onRequest", "onRequestPut", "value", "_a", "result", "char", "prefix", "i"]
}
